Master-Worker模式是常用的并行设计模式。它的核心思想是，系统有两个进程协议工作：Master进程和
Worker进程。Master进程负责接收和分配任务，Worker进程负责处理子任务。当各个Worker进程将子任务处
理完后，将结果返回给Master进程，由Master进行归纳和汇总



nginx中的Master-Worker模式

    nginx在启动后，会有一个master进程和多个worker进程。master进程主要用来管理worker进程，包
含：接收来自外界的信号，向各worker进程发送信号，监控worker进程的运行状态，当worker进程退出后(异
常情况下)，会自动重新启动新的worker进程。而基本的网络事件，则是放在worker进程中来处理了。多个
worker进程之间是对等的，他们同等竞争来自客户端的请求，各进程互相之间是独立的。一个请求，只可能在一
个worker进程中处理，一个worker进程，不可能处理其它进程的请求。worker进程的个数是可以设置的，一般
我们会设置与机器cpu核数一致，这里面的原因与nginx的进程模型以及事件处理模型是分不开的。nginx的进程
模型

 flask 的 一个app 就是一个进程,所以应该是对应一个worker进程
 
 
     每个worker进程都是从master进程fork过来，在master进程里面，先建立好需要listen的socket
（listenfd）之后，然后再fork(克隆)出多个worker进程
    
    
    所有worker进程的listenfd会在新连接到来时变得可读，为保证只有一个进程处理该连接，所有worker
进程在注册listenfd读事件前抢accept_mutex，抢到互斥锁的那个进程注册listenfd读事件，在读事件里调
用accept接受该连接。当一个worker进程在accept这个连接之后，就开始读取请求，解析请求，处理请求，产
生数据后，再返回给客户端，最后才断开连接，这样一个完整的请求就是这样的了。我们可以看到，一个请求，
完全由worker进程来处理，而且只在一个worker进程中处理

优点:1.对于每个worker进程来说，独立的进程，不需要加锁，所以省掉了锁带来的开销
2.一个进程退出后，其它进程还在工作，服务不会中断，master进程则很快启动新的worker进程。



    在nginx启动后，如果我们要操作nginx,只需要与master进程通信就行了。master进程会接收来自外界发来的信号，再根据信号做不同的事情。直接给master进程发送信号，这是比较老的操作方式，nginx在0.8版本之后，引入了一系列命令行参数，来方便我们管理。比如，./nginx -s reload，就是来重启nginx，./nginx -s stop，就是来停止nginx的运行
