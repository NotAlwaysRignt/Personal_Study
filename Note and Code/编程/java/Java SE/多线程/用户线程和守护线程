首先要注意守护线程是 JVM 里的概念,操作系统里面有守护进程而没有守护线程.

java中有两类线程,用户线程(User Thread) 和 守护线程(Daemon Thread)
定义:
虚拟机中可能会同时有很多个线程在运行，只有当所有的非守护线程(用户线程)都结束的时候，虚拟机的进程才会结束，不管在运行的线程是不是main()线程(main()是一个用户线程)
Daemon thread在Java里面的定义是，如果虚拟机中只有Daemon thread 在运行，则虚拟机退出。

主线程结束后还会继续运行直到结束的是用户线程
主线程运行结束后该线程是否执行完都会被强制结束的是守护线程


当我们用 Thread 创建的线程对象的时候,如果调用了 Thread.setDaemon(True)； 则这个线程会被设置为守护线程
如果没有调用 Thread.setDaemon(True); 则创建的是用户线程

守护线程 的作用是为其他线程的运行提供服务,它只有在它所"守护"的线程存在的时候它才会存在并运行,
当所有用户线程都结束的时候,守护线程也就没有什么可以"守护"的了.此时守护线程也会结束.

Thread.setDaemon(True) 要在 Thread.start() 前调用,线程才会被设为守护线程
启动一个线程调用的方法 thread.start()
结束一个线程的通常做法,设置一个flag变量或者结合interrupt()方法,
(注意不要用stop()方法,虽然可行但不建议,也不是通常的做法,判断题要小心)


举例:
public class ThreadTest {
    public volatile  int i = 1;
    public static void main(String[] args){
        ThreadTest m = new ThreadTest();
        Mythread m2 = m.new Mythread();
        m2.setDaemon(true);  //如果设为守护线程那么main 函数退出后,守护线程不管有无运行完毕都会退出
        m2.start();
        try {
            //m2.join();
        }catch (Exception e){
            System.out.println(e.getMessage());
        }
        System.out.println("main end!");

    }

    class Mythread extends Thread{
        @Override
        public void run() {
            try {
                sleep(3000);
            }
            catch (Exception e){
                System.out.println(e.getMessage());
            }
            System.out.println("Hello World!");
        }
    }
}

结果:
main end!

如果设为守护线程 (m2.setDaemon(true);) ,那么即使守护线程sleep 还没运行完,随着main函数的退出,守护线程也会被退出

如果没有设为守护线程,默认为用户线程,那么main end 退出后,也会等待线程对象运行完才结束虚拟机运行
