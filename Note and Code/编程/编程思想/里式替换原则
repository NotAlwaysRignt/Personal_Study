简言之： 子类可以实现父类的抽象方法，可以扩展它的方法，但尽可能不要覆盖父类的非抽象方法。

原因：
子类一旦覆盖父类的抽象方法，代码会变得难以阅读，你可能需要不断地在父类代码和子类代码中跳转。假如我们没重写写方法A，那么当遇到一个实例调用方法A时我们只要找到A所在的类，并不用考虑这些继承导致的覆盖。这在阅读庞大的代码时是可以减轻我们的负担的。
如果非要重写父类的方法，则可以选择父类和子类都继承自一个更通俗的基类，把原有的继承关系去掉，采用依赖，聚合，组合等关系替代。
由上面的说法可得，当我们使用继承关系时，父类更多时候应该是对子类的拓展，而不应该去覆盖它。
