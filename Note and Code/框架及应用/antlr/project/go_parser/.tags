!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	/c77db55/
AllBlock	parser/golang_parser.go	/^func (s *IfStmtContext) AllBlock() []IBlockContext {$/;"	f	struct:parser.IfStmtContext	typeref:typename:[]IBlockContext	signature:()
AllCommClause	parser/golang_parser.go	/^func (s *SelectStmtContext) AllCommClause() []ICommClauseContext {$/;"	f	struct:parser.SelectStmtContext	typeref:typename:[]ICommClauseContext	signature:()
AllConstSpec	parser/golang_parser.go	/^func (s *ConstDeclContext) AllConstSpec() []IConstSpecContext {$/;"	f	struct:parser.ConstDeclContext	typeref:typename:[]IConstSpecContext	signature:()
AllEos	parser/golang_parser.go	/^func (s *ConstDeclContext) AllEos() []IEosContext {$/;"	f	struct:parser.ConstDeclContext	typeref:typename:[]IEosContext	signature:()
AllEos	parser/golang_parser.go	/^func (s *ImportDeclContext) AllEos() []IEosContext {$/;"	f	struct:parser.ImportDeclContext	typeref:typename:[]IEosContext	signature:()
AllEos	parser/golang_parser.go	/^func (s *InterfaceTypeContext) AllEos() []IEosContext {$/;"	f	struct:parser.InterfaceTypeContext	typeref:typename:[]IEosContext	signature:()
AllEos	parser/golang_parser.go	/^func (s *SourceFileContext) AllEos() []IEosContext {$/;"	f	struct:parser.SourceFileContext	typeref:typename:[]IEosContext	signature:()
AllEos	parser/golang_parser.go	/^func (s *StatementListContext) AllEos() []IEosContext {$/;"	f	struct:parser.StatementListContext	typeref:typename:[]IEosContext	signature:()
AllEos	parser/golang_parser.go	/^func (s *StructTypeContext) AllEos() []IEosContext {$/;"	f	struct:parser.StructTypeContext	typeref:typename:[]IEosContext	signature:()
AllEos	parser/golang_parser.go	/^func (s *TypeDeclContext) AllEos() []IEosContext {$/;"	f	struct:parser.TypeDeclContext	typeref:typename:[]IEosContext	signature:()
AllEos	parser/golang_parser.go	/^func (s *VarDeclContext) AllEos() []IEosContext {$/;"	f	struct:parser.VarDeclContext	typeref:typename:[]IEosContext	signature:()
AllExprCaseClause	parser/golang_parser.go	/^func (s *ExprSwitchStmtContext) AllExprCaseClause() []IExprCaseClauseContext {$/;"	f	struct:parser.ExprSwitchStmtContext	typeref:typename:[]IExprCaseClauseContext	signature:()
AllExpression	parser/golang_parser.go	/^func (s *ExpressionContext) AllExpression() []IExpressionContext {$/;"	f	struct:parser.ExpressionContext	typeref:typename:[]IExpressionContext	signature:()
AllExpression	parser/golang_parser.go	/^func (s *ExpressionListContext) AllExpression() []IExpressionContext {$/;"	f	struct:parser.ExpressionListContext	typeref:typename:[]IExpressionContext	signature:()
AllExpression	parser/golang_parser.go	/^func (s *SendStmtContext) AllExpression() []IExpressionContext {$/;"	f	struct:parser.SendStmtContext	typeref:typename:[]IExpressionContext	signature:()
AllExpression	parser/golang_parser.go	/^func (s *SliceContext) AllExpression() []IExpressionContext {$/;"	f	struct:parser.SliceContext	typeref:typename:[]IExpressionContext	signature:()
AllExpressionList	parser/golang_parser.go	/^func (s *AssignmentContext) AllExpressionList() []IExpressionListContext {$/;"	f	struct:parser.AssignmentContext	typeref:typename:[]IExpressionListContext	signature:()
AllFieldDecl	parser/golang_parser.go	/^func (s *StructTypeContext) AllFieldDecl() []IFieldDeclContext {$/;"	f	struct:parser.StructTypeContext	typeref:typename:[]IFieldDeclContext	signature:()
AllIDENTIFIER	parser/golang_parser.go	/^func (s *IdentifierListContext) AllIDENTIFIER() []antlr.TerminalNode {$/;"	f	struct:parser.IdentifierListContext	typeref:typename:[]antlr.TerminalNode	signature:()
AllIDENTIFIER	parser/golang_parser.go	/^func (s *QualifiedIdentContext) AllIDENTIFIER() []antlr.TerminalNode {$/;"	f	struct:parser.QualifiedIdentContext	typeref:typename:[]antlr.TerminalNode	signature:()
AllImportDecl	parser/golang_parser.go	/^func (s *SourceFileContext) AllImportDecl() []IImportDeclContext {$/;"	f	struct:parser.SourceFileContext	typeref:typename:[]IImportDeclContext	signature:()
AllImportSpec	parser/golang_parser.go	/^func (s *ImportDeclContext) AllImportSpec() []IImportSpecContext {$/;"	f	struct:parser.ImportDeclContext	typeref:typename:[]IImportSpecContext	signature:()
AllKeyedElement	parser/golang_parser.go	/^func (s *ElementListContext) AllKeyedElement() []IKeyedElementContext {$/;"	f	struct:parser.ElementListContext	typeref:typename:[]IKeyedElementContext	signature:()
AllMethodSpec	parser/golang_parser.go	/^func (s *InterfaceTypeContext) AllMethodSpec() []IMethodSpecContext {$/;"	f	struct:parser.InterfaceTypeContext	typeref:typename:[]IMethodSpecContext	signature:()
AllParameterDecl	parser/golang_parser.go	/^func (s *ParameterListContext) AllParameterDecl() []IParameterDeclContext {$/;"	f	struct:parser.ParameterListContext	typeref:typename:[]IParameterDeclContext	signature:()
AllSimpleStmt	parser/golang_parser.go	/^func (s *ForClauseContext) AllSimpleStmt() []ISimpleStmtContext {$/;"	f	struct:parser.ForClauseContext	typeref:typename:[]ISimpleStmtContext	signature:()
AllStatement	parser/golang_parser.go	/^func (s *StatementListContext) AllStatement() []IStatementContext {$/;"	f	struct:parser.StatementListContext	typeref:typename:[]IStatementContext	signature:()
AllTopLevelDecl	parser/golang_parser.go	/^func (s *SourceFileContext) AllTopLevelDecl() []ITopLevelDeclContext {$/;"	f	struct:parser.SourceFileContext	typeref:typename:[]ITopLevelDeclContext	signature:()
AllTypeCaseClause	parser/golang_parser.go	/^func (s *TypeSwitchStmtContext) AllTypeCaseClause() []ITypeCaseClauseContext {$/;"	f	struct:parser.TypeSwitchStmtContext	typeref:typename:[]ITypeCaseClauseContext	signature:()
AllTypeSpec	parser/golang_parser.go	/^func (s *TypeDeclContext) AllTypeSpec() []ITypeSpecContext {$/;"	f	struct:parser.TypeDeclContext	typeref:typename:[]ITypeSpecContext	signature:()
AllType_	parser/golang_parser.go	/^func (s *TypeListContext) AllType_() []IType_Context {$/;"	f	struct:parser.TypeListContext	typeref:typename:[]IType_Context	signature:()
AllVarSpec	parser/golang_parser.go	/^func (s *VarDeclContext) AllVarSpec() []IVarSpecContext {$/;"	f	struct:parser.VarDeclContext	typeref:typename:[]IVarSpecContext	signature:()
And	parser/golang_parser.go	/^func (s *ExpressionContext) And() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
AnonymousField	parser/golang_parser.go	/^func (p *GolangParser) AnonymousField() (localctx IAnonymousFieldContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IAnonymousFieldContext)	signature:()
AnonymousField	parser/golang_parser.go	/^func (s *FieldDeclContext) AnonymousField() IAnonymousFieldContext {$/;"	f	struct:parser.FieldDeclContext	typeref:typename:IAnonymousFieldContext	signature:()
AnonymousFieldContext	parser/golang_parser.go	/^type AnonymousFieldContext struct {$/;"	s	package:parser
Arguments	parser/golang_parser.go	/^func (p *GolangParser) Arguments() (localctx IArgumentsContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IArgumentsContext)	signature:()
Arguments	parser/golang_parser.go	/^func (s *PrimaryExprContext) Arguments() IArgumentsContext {$/;"	f	struct:parser.PrimaryExprContext	typeref:typename:IArgumentsContext	signature:()
ArgumentsContext	parser/golang_parser.go	/^type ArgumentsContext struct {$/;"	s	package:parser
ArrayLength	parser/golang_parser.go	/^func (p *GolangParser) ArrayLength() (localctx IArrayLengthContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IArrayLengthContext)	signature:()
ArrayLength	parser/golang_parser.go	/^func (s *ArrayTypeContext) ArrayLength() IArrayLengthContext {$/;"	f	struct:parser.ArrayTypeContext	typeref:typename:IArrayLengthContext	signature:()
ArrayLengthContext	parser/golang_parser.go	/^type ArrayLengthContext struct {$/;"	s	package:parser
ArrayType	parser/golang_parser.go	/^func (p *GolangParser) ArrayType() (localctx IArrayTypeContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IArrayTypeContext)	signature:()
ArrayType	parser/golang_parser.go	/^func (s *LiteralTypeContext) ArrayType() IArrayTypeContext {$/;"	f	struct:parser.LiteralTypeContext	typeref:typename:IArrayTypeContext	signature:()
ArrayType	parser/golang_parser.go	/^func (s *TypeLitContext) ArrayType() IArrayTypeContext {$/;"	f	struct:parser.TypeLitContext	typeref:typename:IArrayTypeContext	signature:()
ArrayTypeContext	parser/golang_parser.go	/^type ArrayTypeContext struct {$/;"	s	package:parser
Assign_op	parser/golang_parser.go	/^func (p *GolangParser) Assign_op() (localctx IAssign_opContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IAssign_opContext)	signature:()
Assign_op	parser/golang_parser.go	/^func (s *AssignmentContext) Assign_op() IAssign_opContext {$/;"	f	struct:parser.AssignmentContext	typeref:typename:IAssign_opContext	signature:()
Assign_opContext	parser/golang_parser.go	/^type Assign_opContext struct {$/;"	s	package:parser
Assignment	parser/golang_parser.go	/^func (p *GolangParser) Assignment() (localctx IAssignmentContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IAssignmentContext)	signature:()
Assignment	parser/golang_parser.go	/^func (s *SimpleStmtContext) Assignment() IAssignmentContext {$/;"	f	struct:parser.SimpleStmtContext	typeref:typename:IAssignmentContext	signature:()
AssignmentContext	parser/golang_parser.go	/^type AssignmentContext struct {$/;"	s	package:parser
BaseGolangParserListener	main.go	/^  *parser.BaseGolangParserListener$/;"	M	struct:main.GolangFileParserListener	typeref:typename:*parser.BaseGolangParserListener
BaseGolangParserListener	parser/golangparser_base_listener.go	/^type BaseGolangParserListener struct{}$/;"	s	package:parser
BaseLexer	golang_base_lexer.go	/^	*antlr.BaseLexer$/;"	M	struct:parser.GoBaseLexer	typeref:typename:*antlr.BaseLexer
BaseLexer	parser/golang_base_lexer.go	/^	*antlr.BaseLexer$/;"	M	struct:parser.GoBaseLexer	typeref:typename:*antlr.BaseLexer
BaseParser	golang_base_parser.go	/^	*antlr.BaseParser$/;"	M	struct:parser.GoBaseParser	typeref:typename:*antlr.BaseParser
BaseParser	parser/golang_base_parser.go	/^	*antlr.BaseParser$/;"	M	struct:parser.GoBaseParser	typeref:typename:*antlr.BaseParser
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.AnonymousFieldContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ArgumentsContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ArrayLengthContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ArrayTypeContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.Assign_opContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.AssignmentContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.BasicLitContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.BlockContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.BreakStmtContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ChannelTypeContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.CommCaseContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.CommClauseContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.CompositeLitContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ConstDeclContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ConstSpecContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ContinueStmtContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ConversionContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.DeclarationContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.DeferStmtContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ElementContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ElementListContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ElementTypeContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.EmptyStmtContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.EosContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ExprCaseClauseContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ExprSwitchCaseContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ExprSwitchStmtContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ExpressionContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ExpressionListContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ExpressionStmtContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.FallthroughStmtContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.FieldDeclContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ForClauseContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ForStmtContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.FunctionContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.FunctionDeclContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.FunctionLitContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.FunctionTypeContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.GoStmtContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.GotoStmtContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.IdentifierListContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.IfStmtContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ImportDeclContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ImportPathContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ImportSpecContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.IncDecStmtContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.IndexContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.InterfaceTypeContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.KeyContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.KeyedElementContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.LabeledStmtContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.LiteralContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.LiteralTypeContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.LiteralValueContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.MapTypeContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.MethodDeclContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.MethodExprContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.MethodSpecContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.OperandContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.OperandNameContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.PackageClauseContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ParameterDeclContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ParameterListContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ParametersContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.PointerTypeContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.PrimaryExprContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.QualifiedIdentContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.RangeClauseContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ReceiverContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ReceiverTypeContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.RecvStmtContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ResultContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ReturnStmtContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.SelectStmtContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.SelectorContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.SendStmtContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ShortVarDeclContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.SignatureContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.SimpleStmtContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.SliceContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.SliceTypeContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.SourceFileContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.StatementContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.StatementListContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.StructTypeContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.SwitchStmtContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.TopLevelDeclContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.TypeAssertionContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.TypeCaseClauseContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.TypeDeclContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.TypeListContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.TypeLitContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.TypeNameContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.TypeSpecContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.TypeSwitchCaseContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.TypeSwitchGuardContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.TypeSwitchStmtContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.Type_Context	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.UnaryExprContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.VarDeclContext	typeref:typename:*antlr.BaseParserRuleContext
BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.VarSpecContext	typeref:typename:*antlr.BaseParserRuleContext
BasicLit	parser/golang_parser.go	/^func (p *GolangParser) BasicLit() (localctx IBasicLitContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IBasicLitContext)	signature:()
BasicLit	parser/golang_parser.go	/^func (s *LiteralContext) BasicLit() IBasicLitContext {$/;"	f	struct:parser.LiteralContext	typeref:typename:IBasicLitContext	signature:()
BasicLitContext	parser/golang_parser.go	/^type BasicLitContext struct {$/;"	s	package:parser
BitAnd	parser/golang_parser.go	/^func (s *Assign_opContext) BitAnd() antlr.TerminalNode {$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.TerminalNode	signature:()
BitAnd	parser/golang_parser.go	/^func (s *ExpressionContext) BitAnd() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
BitAnd	parser/golang_parser.go	/^func (s *UnaryExprContext) BitAnd() antlr.TerminalNode {$/;"	f	struct:parser.UnaryExprContext	typeref:typename:antlr.TerminalNode	signature:()
BitClear	parser/golang_parser.go	/^func (s *Assign_opContext) BitClear() antlr.TerminalNode {$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.TerminalNode	signature:()
BitClear	parser/golang_parser.go	/^func (s *ExpressionContext) BitClear() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
BitOr	parser/golang_parser.go	/^func (s *Assign_opContext) BitOr() antlr.TerminalNode {$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.TerminalNode	signature:()
BitOr	parser/golang_parser.go	/^func (s *ExpressionContext) BitOr() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
BitXor	parser/golang_parser.go	/^func (s *Assign_opContext) BitXor() antlr.TerminalNode {$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.TerminalNode	signature:()
BitXor	parser/golang_parser.go	/^func (s *ExpressionContext) BitXor() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
BitXor	parser/golang_parser.go	/^func (s *UnaryExprContext) BitXor() antlr.TerminalNode {$/;"	f	struct:parser.UnaryExprContext	typeref:typename:antlr.TerminalNode	signature:()
Block	parser/golang_parser.go	/^func (p *GolangParser) Block() (localctx IBlockContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IBlockContext)	signature:()
Block	parser/golang_parser.go	/^func (s *ForStmtContext) Block() IBlockContext {$/;"	f	struct:parser.ForStmtContext	typeref:typename:IBlockContext	signature:()
Block	parser/golang_parser.go	/^func (s *FunctionContext) Block() IBlockContext {$/;"	f	struct:parser.FunctionContext	typeref:typename:IBlockContext	signature:()
Block	parser/golang_parser.go	/^func (s *IfStmtContext) Block(i int) IBlockContext {$/;"	f	struct:parser.IfStmtContext	typeref:typename:IBlockContext	signature:(i int)
Block	parser/golang_parser.go	/^func (s *StatementContext) Block() IBlockContext {$/;"	f	struct:parser.StatementContext	typeref:typename:IBlockContext	signature:()
BlockContext	parser/golang_parser.go	/^type BlockContext struct {$/;"	s	package:parser
Break	parser/golang_parser.go	/^func (s *BreakStmtContext) Break() antlr.TerminalNode {$/;"	f	struct:parser.BreakStmtContext	typeref:typename:antlr.TerminalNode	signature:()
BreakStmt	parser/golang_parser.go	/^func (p *GolangParser) BreakStmt() (localctx IBreakStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IBreakStmtContext)	signature:()
BreakStmt	parser/golang_parser.go	/^func (s *StatementContext) BreakStmt() IBreakStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:IBreakStmtContext	signature:()
BreakStmtContext	parser/golang_parser.go	/^type BreakStmtContext struct {$/;"	s	package:parser
Case	parser/golang_parser.go	/^func (s *CommCaseContext) Case() antlr.TerminalNode {$/;"	f	struct:parser.CommCaseContext	typeref:typename:antlr.TerminalNode	signature:()
Case	parser/golang_parser.go	/^func (s *ExprSwitchCaseContext) Case() antlr.TerminalNode {$/;"	f	struct:parser.ExprSwitchCaseContext	typeref:typename:antlr.TerminalNode	signature:()
Case	parser/golang_parser.go	/^func (s *TypeSwitchCaseContext) Case() antlr.TerminalNode {$/;"	f	struct:parser.TypeSwitchCaseContext	typeref:typename:antlr.TerminalNode	signature:()
Chan	parser/golang_parser.go	/^func (s *ChannelTypeContext) Chan() antlr.TerminalNode {$/;"	f	struct:parser.ChannelTypeContext	typeref:typename:antlr.TerminalNode	signature:()
ChanOp	parser/golang_parser.go	/^func (s *ChannelTypeContext) ChanOp() antlr.TerminalNode {$/;"	f	struct:parser.ChannelTypeContext	typeref:typename:antlr.TerminalNode	signature:()
ChanOp	parser/golang_parser.go	/^func (s *SendStmtContext) ChanOp() antlr.TerminalNode {$/;"	f	struct:parser.SendStmtContext	typeref:typename:antlr.TerminalNode	signature:()
ChanOp	parser/golang_parser.go	/^func (s *UnaryExprContext) ChanOp() antlr.TerminalNode {$/;"	f	struct:parser.UnaryExprContext	typeref:typename:antlr.TerminalNode	signature:()
ChannelType	parser/golang_parser.go	/^func (p *GolangParser) ChannelType() (localctx IChannelTypeContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IChannelTypeContext)	signature:()
ChannelType	parser/golang_parser.go	/^func (s *TypeLitContext) ChannelType() IChannelTypeContext {$/;"	f	struct:parser.TypeLitContext	typeref:typename:IChannelTypeContext	signature:()
ChannelTypeContext	parser/golang_parser.go	/^type ChannelTypeContext struct {$/;"	s	package:parser
CommCase	parser/golang_parser.go	/^func (p *GolangParser) CommCase() (localctx ICommCaseContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ICommCaseContext)	signature:()
CommCase	parser/golang_parser.go	/^func (s *CommClauseContext) CommCase() ICommCaseContext {$/;"	f	struct:parser.CommClauseContext	typeref:typename:ICommCaseContext	signature:()
CommCaseContext	parser/golang_parser.go	/^type CommCaseContext struct {$/;"	s	package:parser
CommClause	parser/golang_parser.go	/^func (p *GolangParser) CommClause() (localctx ICommClauseContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ICommClauseContext)	signature:()
CommClause	parser/golang_parser.go	/^func (s *SelectStmtContext) CommClause(i int) ICommClauseContext {$/;"	f	struct:parser.SelectStmtContext	typeref:typename:ICommClauseContext	signature:(i int)
CommClauseContext	parser/golang_parser.go	/^type CommClauseContext struct {$/;"	s	package:parser
CompositeLit	parser/golang_parser.go	/^func (p *GolangParser) CompositeLit() (localctx ICompositeLitContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ICompositeLitContext)	signature:()
CompositeLit	parser/golang_parser.go	/^func (s *LiteralContext) CompositeLit() ICompositeLitContext {$/;"	f	struct:parser.LiteralContext	typeref:typename:ICompositeLitContext	signature:()
CompositeLitContext	parser/golang_parser.go	/^type CompositeLitContext struct {$/;"	s	package:parser
Const	parser/golang_parser.go	/^func (s *ConstDeclContext) Const() antlr.TerminalNode {$/;"	f	struct:parser.ConstDeclContext	typeref:typename:antlr.TerminalNode	signature:()
ConstDecl	parser/golang_parser.go	/^func (p *GolangParser) ConstDecl() (localctx IConstDeclContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IConstDeclContext)	signature:()
ConstDecl	parser/golang_parser.go	/^func (s *DeclarationContext) ConstDecl() IConstDeclContext {$/;"	f	struct:parser.DeclarationContext	typeref:typename:IConstDeclContext	signature:()
ConstDeclContext	parser/golang_parser.go	/^type ConstDeclContext struct {$/;"	s	package:parser
ConstSpec	parser/golang_parser.go	/^func (p *GolangParser) ConstSpec() (localctx IConstSpecContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IConstSpecContext)	signature:()
ConstSpec	parser/golang_parser.go	/^func (s *ConstDeclContext) ConstSpec(i int) IConstSpecContext {$/;"	f	struct:parser.ConstDeclContext	typeref:typename:IConstSpecContext	signature:(i int)
ConstSpecContext	parser/golang_parser.go	/^type ConstSpecContext struct {$/;"	s	package:parser
Continue	parser/golang_parser.go	/^func (s *ContinueStmtContext) Continue() antlr.TerminalNode {$/;"	f	struct:parser.ContinueStmtContext	typeref:typename:antlr.TerminalNode	signature:()
ContinueStmt	parser/golang_parser.go	/^func (p *GolangParser) ContinueStmt() (localctx IContinueStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IContinueStmtContext)	signature:()
ContinueStmt	parser/golang_parser.go	/^func (s *StatementContext) ContinueStmt() IContinueStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:IContinueStmtContext	signature:()
ContinueStmtContext	parser/golang_parser.go	/^type ContinueStmtContext struct {$/;"	s	package:parser
Conversion	parser/golang_parser.go	/^func (p *GolangParser) Conversion() (localctx IConversionContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IConversionContext)	signature:()
Conversion	parser/golang_parser.go	/^func (s *PrimaryExprContext) Conversion() IConversionContext {$/;"	f	struct:parser.PrimaryExprContext	typeref:typename:IConversionContext	signature:()
ConversionContext	parser/golang_parser.go	/^type ConversionContext struct {$/;"	s	package:parser
Declaration	parser/golang_parser.go	/^func (p *GolangParser) Declaration() (localctx IDeclarationContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IDeclarationContext)	signature:()
Declaration	parser/golang_parser.go	/^func (s *StatementContext) Declaration() IDeclarationContext {$/;"	f	struct:parser.StatementContext	typeref:typename:IDeclarationContext	signature:()
Declaration	parser/golang_parser.go	/^func (s *TopLevelDeclContext) Declaration() IDeclarationContext {$/;"	f	struct:parser.TopLevelDeclContext	typeref:typename:IDeclarationContext	signature:()
DeclarationContext	parser/golang_parser.go	/^type DeclarationContext struct {$/;"	s	package:parser
Default	parser/golang_parser.go	/^func (s *CommCaseContext) Default() antlr.TerminalNode {$/;"	f	struct:parser.CommCaseContext	typeref:typename:antlr.TerminalNode	signature:()
Default	parser/golang_parser.go	/^func (s *ExprSwitchCaseContext) Default() antlr.TerminalNode {$/;"	f	struct:parser.ExprSwitchCaseContext	typeref:typename:antlr.TerminalNode	signature:()
Default	parser/golang_parser.go	/^func (s *TypeSwitchCaseContext) Default() antlr.TerminalNode {$/;"	f	struct:parser.TypeSwitchCaseContext	typeref:typename:antlr.TerminalNode	signature:()
Defer	parser/golang_parser.go	/^func (s *DeferStmtContext) Defer() antlr.TerminalNode {$/;"	f	struct:parser.DeferStmtContext	typeref:typename:antlr.TerminalNode	signature:()
DeferStmt	parser/golang_parser.go	/^func (p *GolangParser) DeferStmt() (localctx IDeferStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IDeferStmtContext)	signature:()
DeferStmt	parser/golang_parser.go	/^func (s *StatementContext) DeferStmt() IDeferStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:IDeferStmtContext	signature:()
DeferStmtContext	parser/golang_parser.go	/^type DeferStmtContext struct {$/;"	s	package:parser
Divide	parser/golang_parser.go	/^func (s *Assign_opContext) Divide() antlr.TerminalNode {$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.TerminalNode	signature:()
Divide	parser/golang_parser.go	/^func (s *ExpressionContext) Divide() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
EOF	parser/golang_parser.go	/^func (s *EosContext) EOF() antlr.TerminalNode {$/;"	f	struct:parser.EosContext	typeref:typename:antlr.TerminalNode	signature:()
Element	parser/golang_parser.go	/^func (p *GolangParser) Element() (localctx IElementContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IElementContext)	signature:()
Element	parser/golang_parser.go	/^func (s *KeyedElementContext) Element() IElementContext {$/;"	f	struct:parser.KeyedElementContext	typeref:typename:IElementContext	signature:()
ElementContext	parser/golang_parser.go	/^type ElementContext struct {$/;"	s	package:parser
ElementList	parser/golang_parser.go	/^func (p *GolangParser) ElementList() (localctx IElementListContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IElementListContext)	signature:()
ElementList	parser/golang_parser.go	/^func (s *LiteralValueContext) ElementList() IElementListContext {$/;"	f	struct:parser.LiteralValueContext	typeref:typename:IElementListContext	signature:()
ElementListContext	parser/golang_parser.go	/^type ElementListContext struct {$/;"	s	package:parser
ElementType	parser/golang_parser.go	/^func (p *GolangParser) ElementType() (localctx IElementTypeContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IElementTypeContext)	signature:()
ElementType	parser/golang_parser.go	/^func (s *ArrayTypeContext) ElementType() IElementTypeContext {$/;"	f	struct:parser.ArrayTypeContext	typeref:typename:IElementTypeContext	signature:()
ElementType	parser/golang_parser.go	/^func (s *ChannelTypeContext) ElementType() IElementTypeContext {$/;"	f	struct:parser.ChannelTypeContext	typeref:typename:IElementTypeContext	signature:()
ElementType	parser/golang_parser.go	/^func (s *LiteralTypeContext) ElementType() IElementTypeContext {$/;"	f	struct:parser.LiteralTypeContext	typeref:typename:IElementTypeContext	signature:()
ElementType	parser/golang_parser.go	/^func (s *MapTypeContext) ElementType() IElementTypeContext {$/;"	f	struct:parser.MapTypeContext	typeref:typename:IElementTypeContext	signature:()
ElementType	parser/golang_parser.go	/^func (s *SliceTypeContext) ElementType() IElementTypeContext {$/;"	f	struct:parser.SliceTypeContext	typeref:typename:IElementTypeContext	signature:()
ElementTypeContext	parser/golang_parser.go	/^type ElementTypeContext struct {$/;"	s	package:parser
Ellipsis	parser/golang_parser.go	/^func (s *LiteralTypeContext) Ellipsis() antlr.TerminalNode {$/;"	f	struct:parser.LiteralTypeContext	typeref:typename:antlr.TerminalNode	signature:()
Ellipsis	parser/golang_parser.go	/^func (s *ParameterDeclContext) Ellipsis() antlr.TerminalNode {$/;"	f	struct:parser.ParameterDeclContext	typeref:typename:antlr.TerminalNode	signature:()
Else	parser/golang_parser.go	/^func (s *IfStmtContext) Else() antlr.TerminalNode {$/;"	f	struct:parser.IfStmtContext	typeref:typename:antlr.TerminalNode	signature:()
EmptyStmt	parser/golang_parser.go	/^func (p *GolangParser) EmptyStmt() (localctx IEmptyStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IEmptyStmtContext)	signature:()
EmptyStmt	parser/golang_parser.go	/^func (s *SimpleStmtContext) EmptyStmt() IEmptyStmtContext {$/;"	f	struct:parser.SimpleStmtContext	typeref:typename:IEmptyStmtContext	signature:()
EmptyStmtContext	parser/golang_parser.go	/^type EmptyStmtContext struct {$/;"	s	package:parser
EnterAnonymousField	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterAnonymousField(ctx *AnonymousFieldContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *AnonymousFieldContext)
EnterAnonymousField	parser/golangparser_listener.go	/^	EnterAnonymousField(c *AnonymousFieldContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *AnonymousFieldContext)
EnterArguments	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterArguments(ctx *ArgumentsContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ArgumentsContext)
EnterArguments	parser/golangparser_listener.go	/^	EnterArguments(c *ArgumentsContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ArgumentsContext)
EnterArrayLength	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterArrayLength(ctx *ArrayLengthContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ArrayLengthContext)
EnterArrayLength	parser/golangparser_listener.go	/^	EnterArrayLength(c *ArrayLengthContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ArrayLengthContext)
EnterArrayType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterArrayType(ctx *ArrayTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ArrayTypeContext)
EnterArrayType	parser/golangparser_listener.go	/^	EnterArrayType(c *ArrayTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ArrayTypeContext)
EnterAssign_op	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterAssign_op(ctx *Assign_opContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *Assign_opContext)
EnterAssign_op	parser/golangparser_listener.go	/^	EnterAssign_op(c *Assign_opContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *Assign_opContext)
EnterAssignment	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterAssignment(ctx *AssignmentContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *AssignmentContext)
EnterAssignment	parser/golangparser_listener.go	/^	EnterAssignment(c *AssignmentContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *AssignmentContext)
EnterBasicLit	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterBasicLit(ctx *BasicLitContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *BasicLitContext)
EnterBasicLit	parser/golangparser_listener.go	/^	EnterBasicLit(c *BasicLitContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *BasicLitContext)
EnterBlock	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterBlock(ctx *BlockContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *BlockContext)
EnterBlock	parser/golangparser_listener.go	/^	EnterBlock(c *BlockContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *BlockContext)
EnterBreakStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterBreakStmt(ctx *BreakStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *BreakStmtContext)
EnterBreakStmt	parser/golangparser_listener.go	/^	EnterBreakStmt(c *BreakStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *BreakStmtContext)
EnterChannelType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterChannelType(ctx *ChannelTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ChannelTypeContext)
EnterChannelType	parser/golangparser_listener.go	/^	EnterChannelType(c *ChannelTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ChannelTypeContext)
EnterCommCase	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterCommCase(ctx *CommCaseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *CommCaseContext)
EnterCommCase	parser/golangparser_listener.go	/^	EnterCommCase(c *CommCaseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *CommCaseContext)
EnterCommClause	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterCommClause(ctx *CommClauseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *CommClauseContext)
EnterCommClause	parser/golangparser_listener.go	/^	EnterCommClause(c *CommClauseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *CommClauseContext)
EnterCompositeLit	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterCompositeLit(ctx *CompositeLitContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *CompositeLitContext)
EnterCompositeLit	parser/golangparser_listener.go	/^	EnterCompositeLit(c *CompositeLitContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *CompositeLitContext)
EnterConstDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterConstDecl(ctx *ConstDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ConstDeclContext)
EnterConstDecl	parser/golangparser_listener.go	/^	EnterConstDecl(c *ConstDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ConstDeclContext)
EnterConstSpec	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterConstSpec(ctx *ConstSpecContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ConstSpecContext)
EnterConstSpec	parser/golangparser_listener.go	/^	EnterConstSpec(c *ConstSpecContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ConstSpecContext)
EnterContinueStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterContinueStmt(ctx *ContinueStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ContinueStmtContext)
EnterContinueStmt	parser/golangparser_listener.go	/^	EnterContinueStmt(c *ContinueStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ContinueStmtContext)
EnterConversion	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterConversion(ctx *ConversionContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ConversionContext)
EnterConversion	parser/golangparser_listener.go	/^	EnterConversion(c *ConversionContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ConversionContext)
EnterDeclaration	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterDeclaration(ctx *DeclarationContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *DeclarationContext)
EnterDeclaration	parser/golangparser_listener.go	/^	EnterDeclaration(c *DeclarationContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *DeclarationContext)
EnterDeferStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterDeferStmt(ctx *DeferStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *DeferStmtContext)
EnterDeferStmt	parser/golangparser_listener.go	/^	EnterDeferStmt(c *DeferStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *DeferStmtContext)
EnterElement	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterElement(ctx *ElementContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ElementContext)
EnterElement	parser/golangparser_listener.go	/^	EnterElement(c *ElementContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ElementContext)
EnterElementList	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterElementList(ctx *ElementListContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ElementListContext)
EnterElementList	parser/golangparser_listener.go	/^	EnterElementList(c *ElementListContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ElementListContext)
EnterElementType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterElementType(ctx *ElementTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ElementTypeContext)
EnterElementType	parser/golangparser_listener.go	/^	EnterElementType(c *ElementTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ElementTypeContext)
EnterEmptyStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterEmptyStmt(ctx *EmptyStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *EmptyStmtContext)
EnterEmptyStmt	parser/golangparser_listener.go	/^	EnterEmptyStmt(c *EmptyStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *EmptyStmtContext)
EnterEos	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterEos(ctx *EosContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *EosContext)
EnterEos	parser/golangparser_listener.go	/^	EnterEos(c *EosContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *EosContext)
EnterEveryRule	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterEveryRule(ctx antlr.ParserRuleContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx antlr.ParserRuleContext)
EnterExprCaseClause	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterExprCaseClause(ctx *ExprCaseClauseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ExprCaseClauseContext)
EnterExprCaseClause	parser/golangparser_listener.go	/^	EnterExprCaseClause(c *ExprCaseClauseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ExprCaseClauseContext)
EnterExprSwitchCase	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterExprSwitchCase(ctx *ExprSwitchCaseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ExprSwitchCaseContext)
EnterExprSwitchCase	parser/golangparser_listener.go	/^	EnterExprSwitchCase(c *ExprSwitchCaseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ExprSwitchCaseContext)
EnterExprSwitchStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterExprSwitchStmt(ctx *ExprSwitchStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ExprSwitchStmtContext)
EnterExprSwitchStmt	parser/golangparser_listener.go	/^	EnterExprSwitchStmt(c *ExprSwitchStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ExprSwitchStmtContext)
EnterExpression	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterExpression(ctx *ExpressionContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ExpressionContext)
EnterExpression	parser/golangparser_listener.go	/^	EnterExpression(c *ExpressionContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ExpressionContext)
EnterExpressionList	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterExpressionList(ctx *ExpressionListContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ExpressionListContext)
EnterExpressionList	parser/golangparser_listener.go	/^	EnterExpressionList(c *ExpressionListContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ExpressionListContext)
EnterExpressionStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterExpressionStmt(ctx *ExpressionStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ExpressionStmtContext)
EnterExpressionStmt	parser/golangparser_listener.go	/^	EnterExpressionStmt(c *ExpressionStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ExpressionStmtContext)
EnterFallthroughStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterFallthroughStmt(ctx *FallthroughStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *FallthroughStmtContext)
EnterFallthroughStmt	parser/golangparser_listener.go	/^	EnterFallthroughStmt(c *FallthroughStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *FallthroughStmtContext)
EnterFieldDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterFieldDecl(ctx *FieldDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *FieldDeclContext)
EnterFieldDecl	parser/golangparser_listener.go	/^	EnterFieldDecl(c *FieldDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *FieldDeclContext)
EnterForClause	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterForClause(ctx *ForClauseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ForClauseContext)
EnterForClause	parser/golangparser_listener.go	/^	EnterForClause(c *ForClauseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ForClauseContext)
EnterForStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterForStmt(ctx *ForStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ForStmtContext)
EnterForStmt	parser/golangparser_listener.go	/^	EnterForStmt(c *ForStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ForStmtContext)
EnterFunction	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterFunction(ctx *FunctionContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *FunctionContext)
EnterFunction	parser/golangparser_listener.go	/^	EnterFunction(c *FunctionContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *FunctionContext)
EnterFunctionDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterFunctionDecl(ctx *FunctionDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *FunctionDeclContext)
EnterFunctionDecl	parser/golangparser_listener.go	/^	EnterFunctionDecl(c *FunctionDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *FunctionDeclContext)
EnterFunctionLit	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterFunctionLit(ctx *FunctionLitContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *FunctionLitContext)
EnterFunctionLit	parser/golangparser_listener.go	/^	EnterFunctionLit(c *FunctionLitContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *FunctionLitContext)
EnterFunctionType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterFunctionType(ctx *FunctionTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *FunctionTypeContext)
EnterFunctionType	parser/golangparser_listener.go	/^	EnterFunctionType(c *FunctionTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *FunctionTypeContext)
EnterGoStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterGoStmt(ctx *GoStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *GoStmtContext)
EnterGoStmt	parser/golangparser_listener.go	/^	EnterGoStmt(c *GoStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *GoStmtContext)
EnterGotoStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterGotoStmt(ctx *GotoStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *GotoStmtContext)
EnterGotoStmt	parser/golangparser_listener.go	/^	EnterGotoStmt(c *GotoStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *GotoStmtContext)
EnterIdentifierList	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterIdentifierList(ctx *IdentifierListContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *IdentifierListContext)
EnterIdentifierList	parser/golangparser_listener.go	/^	EnterIdentifierList(c *IdentifierListContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *IdentifierListContext)
EnterIfStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterIfStmt(ctx *IfStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *IfStmtContext)
EnterIfStmt	parser/golangparser_listener.go	/^	EnterIfStmt(c *IfStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *IfStmtContext)
EnterImportDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterImportDecl(ctx *ImportDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ImportDeclContext)
EnterImportDecl	parser/golangparser_listener.go	/^	EnterImportDecl(c *ImportDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ImportDeclContext)
EnterImportPath	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterImportPath(ctx *ImportPathContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ImportPathContext)
EnterImportPath	parser/golangparser_listener.go	/^	EnterImportPath(c *ImportPathContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ImportPathContext)
EnterImportSpec	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterImportSpec(ctx *ImportSpecContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ImportSpecContext)
EnterImportSpec	parser/golangparser_listener.go	/^	EnterImportSpec(c *ImportSpecContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ImportSpecContext)
EnterIncDecStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterIncDecStmt(ctx *IncDecStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *IncDecStmtContext)
EnterIncDecStmt	parser/golangparser_listener.go	/^	EnterIncDecStmt(c *IncDecStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *IncDecStmtContext)
EnterIndex	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterIndex(ctx *IndexContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *IndexContext)
EnterIndex	parser/golangparser_listener.go	/^	EnterIndex(c *IndexContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *IndexContext)
EnterInterfaceType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterInterfaceType(ctx *InterfaceTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *InterfaceTypeContext)
EnterInterfaceType	parser/golangparser_listener.go	/^	EnterInterfaceType(c *InterfaceTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *InterfaceTypeContext)
EnterKey	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterKey(ctx *KeyContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *KeyContext)
EnterKey	parser/golangparser_listener.go	/^	EnterKey(c *KeyContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *KeyContext)
EnterKeyedElement	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterKeyedElement(ctx *KeyedElementContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *KeyedElementContext)
EnterKeyedElement	parser/golangparser_listener.go	/^	EnterKeyedElement(c *KeyedElementContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *KeyedElementContext)
EnterLabeledStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterLabeledStmt(ctx *LabeledStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *LabeledStmtContext)
EnterLabeledStmt	parser/golangparser_listener.go	/^	EnterLabeledStmt(c *LabeledStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *LabeledStmtContext)
EnterLiteral	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterLiteral(ctx *LiteralContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *LiteralContext)
EnterLiteral	parser/golangparser_listener.go	/^	EnterLiteral(c *LiteralContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *LiteralContext)
EnterLiteralType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterLiteralType(ctx *LiteralTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *LiteralTypeContext)
EnterLiteralType	parser/golangparser_listener.go	/^	EnterLiteralType(c *LiteralTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *LiteralTypeContext)
EnterLiteralValue	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterLiteralValue(ctx *LiteralValueContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *LiteralValueContext)
EnterLiteralValue	parser/golangparser_listener.go	/^	EnterLiteralValue(c *LiteralValueContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *LiteralValueContext)
EnterMapType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterMapType(ctx *MapTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *MapTypeContext)
EnterMapType	parser/golangparser_listener.go	/^	EnterMapType(c *MapTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *MapTypeContext)
EnterMethodDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterMethodDecl(ctx *MethodDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *MethodDeclContext)
EnterMethodDecl	parser/golangparser_listener.go	/^	EnterMethodDecl(c *MethodDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *MethodDeclContext)
EnterMethodExpr	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterMethodExpr(ctx *MethodExprContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *MethodExprContext)
EnterMethodExpr	parser/golangparser_listener.go	/^	EnterMethodExpr(c *MethodExprContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *MethodExprContext)
EnterMethodSpec	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterMethodSpec(ctx *MethodSpecContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *MethodSpecContext)
EnterMethodSpec	parser/golangparser_listener.go	/^	EnterMethodSpec(c *MethodSpecContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *MethodSpecContext)
EnterOperand	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterOperand(ctx *OperandContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *OperandContext)
EnterOperand	parser/golangparser_listener.go	/^	EnterOperand(c *OperandContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *OperandContext)
EnterOperandName	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterOperandName(ctx *OperandNameContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *OperandNameContext)
EnterOperandName	parser/golangparser_listener.go	/^	EnterOperandName(c *OperandNameContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *OperandNameContext)
EnterPackageClause	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterPackageClause(ctx *PackageClauseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *PackageClauseContext)
EnterPackageClause	parser/golangparser_listener.go	/^	EnterPackageClause(c *PackageClauseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *PackageClauseContext)
EnterParameterDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterParameterDecl(ctx *ParameterDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ParameterDeclContext)
EnterParameterDecl	parser/golangparser_listener.go	/^	EnterParameterDecl(c *ParameterDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ParameterDeclContext)
EnterParameterList	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterParameterList(ctx *ParameterListContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ParameterListContext)
EnterParameterList	parser/golangparser_listener.go	/^	EnterParameterList(c *ParameterListContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ParameterListContext)
EnterParameters	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterParameters(ctx *ParametersContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ParametersContext)
EnterParameters	parser/golangparser_listener.go	/^	EnterParameters(c *ParametersContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ParametersContext)
EnterPointerType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterPointerType(ctx *PointerTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *PointerTypeContext)
EnterPointerType	parser/golangparser_listener.go	/^	EnterPointerType(c *PointerTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *PointerTypeContext)
EnterPrimaryExpr	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterPrimaryExpr(ctx *PrimaryExprContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *PrimaryExprContext)
EnterPrimaryExpr	parser/golangparser_listener.go	/^	EnterPrimaryExpr(c *PrimaryExprContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *PrimaryExprContext)
EnterQualifiedIdent	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterQualifiedIdent(ctx *QualifiedIdentContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *QualifiedIdentContext)
EnterQualifiedIdent	parser/golangparser_listener.go	/^	EnterQualifiedIdent(c *QualifiedIdentContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *QualifiedIdentContext)
EnterRangeClause	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterRangeClause(ctx *RangeClauseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *RangeClauseContext)
EnterRangeClause	parser/golangparser_listener.go	/^	EnterRangeClause(c *RangeClauseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *RangeClauseContext)
EnterReceiver	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterReceiver(ctx *ReceiverContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ReceiverContext)
EnterReceiver	parser/golangparser_listener.go	/^	EnterReceiver(c *ReceiverContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ReceiverContext)
EnterReceiverType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterReceiverType(ctx *ReceiverTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ReceiverTypeContext)
EnterReceiverType	parser/golangparser_listener.go	/^	EnterReceiverType(c *ReceiverTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ReceiverTypeContext)
EnterRecvStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterRecvStmt(ctx *RecvStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *RecvStmtContext)
EnterRecvStmt	parser/golangparser_listener.go	/^	EnterRecvStmt(c *RecvStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *RecvStmtContext)
EnterResult	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterResult(ctx *ResultContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ResultContext)
EnterResult	parser/golangparser_listener.go	/^	EnterResult(c *ResultContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ResultContext)
EnterReturnStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterReturnStmt(ctx *ReturnStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ReturnStmtContext)
EnterReturnStmt	parser/golangparser_listener.go	/^	EnterReturnStmt(c *ReturnStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ReturnStmtContext)
EnterRule	parser/golang_parser.go	/^func (s *AnonymousFieldContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.AnonymousFieldContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ArgumentsContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ArgumentsContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ArrayLengthContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ArrayLengthContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ArrayTypeContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ArrayTypeContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *Assign_opContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.Assign_opContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *AssignmentContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.AssignmentContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *BasicLitContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.BasicLitContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *BlockContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.BlockContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *BreakStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.BreakStmtContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ChannelTypeContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ChannelTypeContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *CommCaseContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.CommCaseContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *CommClauseContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.CommClauseContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *CompositeLitContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.CompositeLitContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ConstDeclContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ConstDeclContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ConstSpecContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ConstSpecContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ContinueStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ContinueStmtContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ConversionContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ConversionContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *DeclarationContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.DeclarationContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *DeferStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.DeferStmtContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ElementContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ElementContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ElementListContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ElementListContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ElementTypeContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ElementTypeContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *EmptyStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.EmptyStmtContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *EosContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.EosContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ExprCaseClauseContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ExprCaseClauseContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ExprSwitchCaseContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ExprSwitchCaseContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ExprSwitchStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ExprSwitchStmtContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ExpressionContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ExpressionListContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ExpressionListContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ExpressionStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ExpressionStmtContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *FallthroughStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.FallthroughStmtContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *FieldDeclContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.FieldDeclContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ForClauseContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ForClauseContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ForStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ForStmtContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *FunctionContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.FunctionContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *FunctionDeclContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.FunctionDeclContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *FunctionLitContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.FunctionLitContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *FunctionTypeContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.FunctionTypeContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *GoStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.GoStmtContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *GotoStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.GotoStmtContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *IdentifierListContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.IdentifierListContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *IfStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.IfStmtContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ImportDeclContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ImportDeclContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ImportPathContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ImportPathContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ImportSpecContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ImportSpecContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *IncDecStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.IncDecStmtContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *IndexContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.IndexContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *InterfaceTypeContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.InterfaceTypeContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *KeyContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.KeyContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *KeyedElementContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.KeyedElementContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *LabeledStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.LabeledStmtContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *LiteralContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.LiteralContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *LiteralTypeContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.LiteralTypeContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *LiteralValueContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.LiteralValueContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *MapTypeContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.MapTypeContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *MethodDeclContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.MethodDeclContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *MethodExprContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.MethodExprContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *MethodSpecContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.MethodSpecContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *OperandContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.OperandContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *OperandNameContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.OperandNameContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *PackageClauseContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.PackageClauseContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ParameterDeclContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ParameterDeclContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ParameterListContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ParameterListContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ParametersContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ParametersContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *PointerTypeContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.PointerTypeContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *PrimaryExprContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.PrimaryExprContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *QualifiedIdentContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.QualifiedIdentContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *RangeClauseContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.RangeClauseContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ReceiverContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ReceiverContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ReceiverTypeContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ReceiverTypeContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *RecvStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.RecvStmtContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ResultContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ResultContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ReturnStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ReturnStmtContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *SelectStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SelectStmtContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *SelectorContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SelectorContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *SendStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SendStmtContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *ShortVarDeclContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ShortVarDeclContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *SignatureContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SignatureContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *SimpleStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SimpleStmtContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *SliceContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SliceContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *SliceTypeContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SliceTypeContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *SourceFileContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SourceFileContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.StatementContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *StatementListContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.StatementListContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *StructTypeContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.StructTypeContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *SwitchStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SwitchStmtContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *TopLevelDeclContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TopLevelDeclContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *TypeAssertionContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeAssertionContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *TypeCaseClauseContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeCaseClauseContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *TypeDeclContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeDeclContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *TypeListContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeListContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *TypeLitContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeLitContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *TypeNameContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeNameContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *TypeSpecContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeSpecContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *TypeSwitchCaseContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeSwitchCaseContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *TypeSwitchGuardContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeSwitchGuardContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *TypeSwitchStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeSwitchStmtContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *Type_Context) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.Type_Context	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *UnaryExprContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.UnaryExprContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *VarDeclContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.VarDeclContext	signature:(listener antlr.ParseTreeListener)
EnterRule	parser/golang_parser.go	/^func (s *VarSpecContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.VarSpecContext	signature:(listener antlr.ParseTreeListener)
EnterSelectStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterSelectStmt(ctx *SelectStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SelectStmtContext)
EnterSelectStmt	parser/golangparser_listener.go	/^	EnterSelectStmt(c *SelectStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SelectStmtContext)
EnterSelector	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterSelector(ctx *SelectorContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SelectorContext)
EnterSelector	parser/golangparser_listener.go	/^	EnterSelector(c *SelectorContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SelectorContext)
EnterSendStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterSendStmt(ctx *SendStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SendStmtContext)
EnterSendStmt	parser/golangparser_listener.go	/^	EnterSendStmt(c *SendStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SendStmtContext)
EnterShortVarDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterShortVarDecl(ctx *ShortVarDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ShortVarDeclContext)
EnterShortVarDecl	parser/golangparser_listener.go	/^	EnterShortVarDecl(c *ShortVarDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ShortVarDeclContext)
EnterSignature	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterSignature(ctx *SignatureContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SignatureContext)
EnterSignature	parser/golangparser_listener.go	/^	EnterSignature(c *SignatureContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SignatureContext)
EnterSimpleStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterSimpleStmt(ctx *SimpleStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SimpleStmtContext)
EnterSimpleStmt	parser/golangparser_listener.go	/^	EnterSimpleStmt(c *SimpleStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SimpleStmtContext)
EnterSlice	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterSlice(ctx *SliceContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SliceContext)
EnterSlice	parser/golangparser_listener.go	/^	EnterSlice(c *SliceContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SliceContext)
EnterSliceType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterSliceType(ctx *SliceTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SliceTypeContext)
EnterSliceType	parser/golangparser_listener.go	/^	EnterSliceType(c *SliceTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SliceTypeContext)
EnterSourceFile	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterSourceFile(ctx *SourceFileContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SourceFileContext)
EnterSourceFile	parser/golangparser_listener.go	/^	EnterSourceFile(c *SourceFileContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SourceFileContext)
EnterStatement	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterStatement(ctx *StatementContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *StatementContext)
EnterStatement	parser/golangparser_listener.go	/^	EnterStatement(c *StatementContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *StatementContext)
EnterStatementList	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterStatementList(ctx *StatementListContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *StatementListContext)
EnterStatementList	parser/golangparser_listener.go	/^	EnterStatementList(c *StatementListContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *StatementListContext)
EnterStructType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterStructType(ctx *StructTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *StructTypeContext)
EnterStructType	parser/golangparser_listener.go	/^	EnterStructType(c *StructTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *StructTypeContext)
EnterSwitchStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterSwitchStmt(ctx *SwitchStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SwitchStmtContext)
EnterSwitchStmt	parser/golangparser_listener.go	/^	EnterSwitchStmt(c *SwitchStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SwitchStmtContext)
EnterTopLevelDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterTopLevelDecl(ctx *TopLevelDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TopLevelDeclContext)
EnterTopLevelDecl	parser/golangparser_listener.go	/^	EnterTopLevelDecl(c *TopLevelDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TopLevelDeclContext)
EnterTypeAssertion	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterTypeAssertion(ctx *TypeAssertionContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeAssertionContext)
EnterTypeAssertion	parser/golangparser_listener.go	/^	EnterTypeAssertion(c *TypeAssertionContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeAssertionContext)
EnterTypeCaseClause	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterTypeCaseClause(ctx *TypeCaseClauseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeCaseClauseContext)
EnterTypeCaseClause	parser/golangparser_listener.go	/^	EnterTypeCaseClause(c *TypeCaseClauseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeCaseClauseContext)
EnterTypeDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterTypeDecl(ctx *TypeDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeDeclContext)
EnterTypeDecl	parser/golangparser_listener.go	/^	EnterTypeDecl(c *TypeDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeDeclContext)
EnterTypeList	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterTypeList(ctx *TypeListContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeListContext)
EnterTypeList	parser/golangparser_listener.go	/^	EnterTypeList(c *TypeListContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeListContext)
EnterTypeLit	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterTypeLit(ctx *TypeLitContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeLitContext)
EnterTypeLit	parser/golangparser_listener.go	/^	EnterTypeLit(c *TypeLitContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeLitContext)
EnterTypeName	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterTypeName(ctx *TypeNameContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeNameContext)
EnterTypeName	parser/golangparser_listener.go	/^	EnterTypeName(c *TypeNameContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeNameContext)
EnterTypeSpec	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterTypeSpec(ctx *TypeSpecContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeSpecContext)
EnterTypeSpec	parser/golangparser_listener.go	/^	EnterTypeSpec(c *TypeSpecContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeSpecContext)
EnterTypeSwitchCase	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterTypeSwitchCase(ctx *TypeSwitchCaseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeSwitchCaseContext)
EnterTypeSwitchCase	parser/golangparser_listener.go	/^	EnterTypeSwitchCase(c *TypeSwitchCaseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeSwitchCaseContext)
EnterTypeSwitchGuard	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterTypeSwitchGuard(ctx *TypeSwitchGuardContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeSwitchGuardContext)
EnterTypeSwitchGuard	parser/golangparser_listener.go	/^	EnterTypeSwitchGuard(c *TypeSwitchGuardContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeSwitchGuardContext)
EnterTypeSwitchStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterTypeSwitchStmt(ctx *TypeSwitchStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeSwitchStmtContext)
EnterTypeSwitchStmt	parser/golangparser_listener.go	/^	EnterTypeSwitchStmt(c *TypeSwitchStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeSwitchStmtContext)
EnterType_	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterType_(ctx *Type_Context) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *Type_Context)
EnterType_	parser/golangparser_listener.go	/^	EnterType_(c *Type_Context)$/;"	n	interface:parser.GolangParserListener	signature:(c *Type_Context)
EnterUnaryExpr	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterUnaryExpr(ctx *UnaryExprContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *UnaryExprContext)
EnterUnaryExpr	parser/golangparser_listener.go	/^	EnterUnaryExpr(c *UnaryExprContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *UnaryExprContext)
EnterVarDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterVarDecl(ctx *VarDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *VarDeclContext)
EnterVarDecl	parser/golangparser_listener.go	/^	EnterVarDecl(c *VarDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *VarDeclContext)
EnterVarSpec	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterVarSpec(ctx *VarSpecContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *VarSpecContext)
EnterVarSpec	parser/golangparser_listener.go	/^	EnterVarSpec(c *VarSpecContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *VarSpecContext)
Eos	parser/golang_parser.go	/^func (p *GolangParser) Eos() (localctx IEosContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IEosContext)	signature:()
Eos	parser/golang_parser.go	/^func (s *ConstDeclContext) Eos(i int) IEosContext {$/;"	f	struct:parser.ConstDeclContext	typeref:typename:IEosContext	signature:(i int)
Eos	parser/golang_parser.go	/^func (s *ImportDeclContext) Eos(i int) IEosContext {$/;"	f	struct:parser.ImportDeclContext	typeref:typename:IEosContext	signature:(i int)
Eos	parser/golang_parser.go	/^func (s *InterfaceTypeContext) Eos(i int) IEosContext {$/;"	f	struct:parser.InterfaceTypeContext	typeref:typename:IEosContext	signature:(i int)
Eos	parser/golang_parser.go	/^func (s *SourceFileContext) Eos(i int) IEosContext {$/;"	f	struct:parser.SourceFileContext	typeref:typename:IEosContext	signature:(i int)
Eos	parser/golang_parser.go	/^func (s *StatementListContext) Eos(i int) IEosContext {$/;"	f	struct:parser.StatementListContext	typeref:typename:IEosContext	signature:(i int)
Eos	parser/golang_parser.go	/^func (s *StructTypeContext) Eos(i int) IEosContext {$/;"	f	struct:parser.StructTypeContext	typeref:typename:IEosContext	signature:(i int)
Eos	parser/golang_parser.go	/^func (s *TypeDeclContext) Eos(i int) IEosContext {$/;"	f	struct:parser.TypeDeclContext	typeref:typename:IEosContext	signature:(i int)
Eos	parser/golang_parser.go	/^func (s *VarDeclContext) Eos(i int) IEosContext {$/;"	f	struct:parser.VarDeclContext	typeref:typename:IEosContext	signature:(i int)
EosContext	parser/golang_parser.go	/^type EosContext struct {$/;"	s	package:parser
Eos_Sempred	parser/golang_parser.go	/^func (p *GolangParser) Eos_Sempred(localctx antlr.RuleContext, predIndex int) bool {$/;"	f	struct:parser.GolangParser	typeref:typename:bool	signature:(localctx antlr.RuleContext, predIndex int)
Equals_	parser/golang_parser.go	/^func (s *ExpressionContext) Equals_() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
ExitAnonymousField	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitAnonymousField(ctx *AnonymousFieldContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *AnonymousFieldContext)
ExitAnonymousField	parser/golangparser_listener.go	/^	ExitAnonymousField(c *AnonymousFieldContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *AnonymousFieldContext)
ExitArguments	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitArguments(ctx *ArgumentsContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ArgumentsContext)
ExitArguments	parser/golangparser_listener.go	/^	ExitArguments(c *ArgumentsContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ArgumentsContext)
ExitArrayLength	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitArrayLength(ctx *ArrayLengthContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ArrayLengthContext)
ExitArrayLength	parser/golangparser_listener.go	/^	ExitArrayLength(c *ArrayLengthContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ArrayLengthContext)
ExitArrayType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitArrayType(ctx *ArrayTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ArrayTypeContext)
ExitArrayType	parser/golangparser_listener.go	/^	ExitArrayType(c *ArrayTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ArrayTypeContext)
ExitAssign_op	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitAssign_op(ctx *Assign_opContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *Assign_opContext)
ExitAssign_op	parser/golangparser_listener.go	/^	ExitAssign_op(c *Assign_opContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *Assign_opContext)
ExitAssignment	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitAssignment(ctx *AssignmentContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *AssignmentContext)
ExitAssignment	parser/golangparser_listener.go	/^	ExitAssignment(c *AssignmentContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *AssignmentContext)
ExitBasicLit	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitBasicLit(ctx *BasicLitContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *BasicLitContext)
ExitBasicLit	parser/golangparser_listener.go	/^	ExitBasicLit(c *BasicLitContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *BasicLitContext)
ExitBlock	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitBlock(ctx *BlockContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *BlockContext)
ExitBlock	parser/golangparser_listener.go	/^	ExitBlock(c *BlockContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *BlockContext)
ExitBreakStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitBreakStmt(ctx *BreakStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *BreakStmtContext)
ExitBreakStmt	parser/golangparser_listener.go	/^	ExitBreakStmt(c *BreakStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *BreakStmtContext)
ExitChannelType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitChannelType(ctx *ChannelTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ChannelTypeContext)
ExitChannelType	parser/golangparser_listener.go	/^	ExitChannelType(c *ChannelTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ChannelTypeContext)
ExitCommCase	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitCommCase(ctx *CommCaseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *CommCaseContext)
ExitCommCase	parser/golangparser_listener.go	/^	ExitCommCase(c *CommCaseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *CommCaseContext)
ExitCommClause	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitCommClause(ctx *CommClauseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *CommClauseContext)
ExitCommClause	parser/golangparser_listener.go	/^	ExitCommClause(c *CommClauseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *CommClauseContext)
ExitCompositeLit	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitCompositeLit(ctx *CompositeLitContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *CompositeLitContext)
ExitCompositeLit	parser/golangparser_listener.go	/^	ExitCompositeLit(c *CompositeLitContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *CompositeLitContext)
ExitConstDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitConstDecl(ctx *ConstDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ConstDeclContext)
ExitConstDecl	parser/golangparser_listener.go	/^	ExitConstDecl(c *ConstDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ConstDeclContext)
ExitConstSpec	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitConstSpec(ctx *ConstSpecContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ConstSpecContext)
ExitConstSpec	parser/golangparser_listener.go	/^	ExitConstSpec(c *ConstSpecContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ConstSpecContext)
ExitContinueStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitContinueStmt(ctx *ContinueStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ContinueStmtContext)
ExitContinueStmt	parser/golangparser_listener.go	/^	ExitContinueStmt(c *ContinueStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ContinueStmtContext)
ExitConversion	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitConversion(ctx *ConversionContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ConversionContext)
ExitConversion	parser/golangparser_listener.go	/^	ExitConversion(c *ConversionContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ConversionContext)
ExitDeclaration	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitDeclaration(ctx *DeclarationContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *DeclarationContext)
ExitDeclaration	parser/golangparser_listener.go	/^	ExitDeclaration(c *DeclarationContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *DeclarationContext)
ExitDeferStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitDeferStmt(ctx *DeferStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *DeferStmtContext)
ExitDeferStmt	parser/golangparser_listener.go	/^	ExitDeferStmt(c *DeferStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *DeferStmtContext)
ExitElement	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitElement(ctx *ElementContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ElementContext)
ExitElement	parser/golangparser_listener.go	/^	ExitElement(c *ElementContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ElementContext)
ExitElementList	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitElementList(ctx *ElementListContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ElementListContext)
ExitElementList	parser/golangparser_listener.go	/^	ExitElementList(c *ElementListContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ElementListContext)
ExitElementType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitElementType(ctx *ElementTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ElementTypeContext)
ExitElementType	parser/golangparser_listener.go	/^	ExitElementType(c *ElementTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ElementTypeContext)
ExitEmptyStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitEmptyStmt(ctx *EmptyStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *EmptyStmtContext)
ExitEmptyStmt	parser/golangparser_listener.go	/^	ExitEmptyStmt(c *EmptyStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *EmptyStmtContext)
ExitEos	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitEos(ctx *EosContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *EosContext)
ExitEos	parser/golangparser_listener.go	/^	ExitEos(c *EosContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *EosContext)
ExitEveryRule	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitEveryRule(ctx antlr.ParserRuleContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx antlr.ParserRuleContext)
ExitExprCaseClause	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitExprCaseClause(ctx *ExprCaseClauseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ExprCaseClauseContext)
ExitExprCaseClause	parser/golangparser_listener.go	/^	ExitExprCaseClause(c *ExprCaseClauseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ExprCaseClauseContext)
ExitExprSwitchCase	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitExprSwitchCase(ctx *ExprSwitchCaseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ExprSwitchCaseContext)
ExitExprSwitchCase	parser/golangparser_listener.go	/^	ExitExprSwitchCase(c *ExprSwitchCaseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ExprSwitchCaseContext)
ExitExprSwitchStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitExprSwitchStmt(ctx *ExprSwitchStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ExprSwitchStmtContext)
ExitExprSwitchStmt	parser/golangparser_listener.go	/^	ExitExprSwitchStmt(c *ExprSwitchStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ExprSwitchStmtContext)
ExitExpression	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitExpression(ctx *ExpressionContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ExpressionContext)
ExitExpression	parser/golangparser_listener.go	/^	ExitExpression(c *ExpressionContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ExpressionContext)
ExitExpressionList	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitExpressionList(ctx *ExpressionListContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ExpressionListContext)
ExitExpressionList	parser/golangparser_listener.go	/^	ExitExpressionList(c *ExpressionListContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ExpressionListContext)
ExitExpressionStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitExpressionStmt(ctx *ExpressionStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ExpressionStmtContext)
ExitExpressionStmt	parser/golangparser_listener.go	/^	ExitExpressionStmt(c *ExpressionStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ExpressionStmtContext)
ExitFallthroughStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitFallthroughStmt(ctx *FallthroughStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *FallthroughStmtContext)
ExitFallthroughStmt	parser/golangparser_listener.go	/^	ExitFallthroughStmt(c *FallthroughStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *FallthroughStmtContext)
ExitFieldDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitFieldDecl(ctx *FieldDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *FieldDeclContext)
ExitFieldDecl	parser/golangparser_listener.go	/^	ExitFieldDecl(c *FieldDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *FieldDeclContext)
ExitForClause	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitForClause(ctx *ForClauseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ForClauseContext)
ExitForClause	parser/golangparser_listener.go	/^	ExitForClause(c *ForClauseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ForClauseContext)
ExitForStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitForStmt(ctx *ForStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ForStmtContext)
ExitForStmt	parser/golangparser_listener.go	/^	ExitForStmt(c *ForStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ForStmtContext)
ExitFunction	main.go	/^func (this *GolangFileParserListener) ExitFunction(ctx *parser.FunctionContext) {$/;"	f	struct:main.GolangFileParserListener	signature:(ctx *parser.FunctionContext)
ExitFunction	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitFunction(ctx *FunctionContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *FunctionContext)
ExitFunction	parser/golangparser_listener.go	/^	ExitFunction(c *FunctionContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *FunctionContext)
ExitFunctionDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitFunctionDecl(ctx *FunctionDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *FunctionDeclContext)
ExitFunctionDecl	parser/golangparser_listener.go	/^	ExitFunctionDecl(c *FunctionDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *FunctionDeclContext)
ExitFunctionLit	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitFunctionLit(ctx *FunctionLitContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *FunctionLitContext)
ExitFunctionLit	parser/golangparser_listener.go	/^	ExitFunctionLit(c *FunctionLitContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *FunctionLitContext)
ExitFunctionType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitFunctionType(ctx *FunctionTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *FunctionTypeContext)
ExitFunctionType	parser/golangparser_listener.go	/^	ExitFunctionType(c *FunctionTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *FunctionTypeContext)
ExitGoStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitGoStmt(ctx *GoStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *GoStmtContext)
ExitGoStmt	parser/golangparser_listener.go	/^	ExitGoStmt(c *GoStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *GoStmtContext)
ExitGotoStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitGotoStmt(ctx *GotoStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *GotoStmtContext)
ExitGotoStmt	parser/golangparser_listener.go	/^	ExitGotoStmt(c *GotoStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *GotoStmtContext)
ExitIdentifierList	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitIdentifierList(ctx *IdentifierListContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *IdentifierListContext)
ExitIdentifierList	parser/golangparser_listener.go	/^	ExitIdentifierList(c *IdentifierListContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *IdentifierListContext)
ExitIfStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitIfStmt(ctx *IfStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *IfStmtContext)
ExitIfStmt	parser/golangparser_listener.go	/^	ExitIfStmt(c *IfStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *IfStmtContext)
ExitImportDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitImportDecl(ctx *ImportDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ImportDeclContext)
ExitImportDecl	parser/golangparser_listener.go	/^	ExitImportDecl(c *ImportDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ImportDeclContext)
ExitImportPath	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitImportPath(ctx *ImportPathContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ImportPathContext)
ExitImportPath	parser/golangparser_listener.go	/^	ExitImportPath(c *ImportPathContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ImportPathContext)
ExitImportSpec	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitImportSpec(ctx *ImportSpecContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ImportSpecContext)
ExitImportSpec	parser/golangparser_listener.go	/^	ExitImportSpec(c *ImportSpecContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ImportSpecContext)
ExitIncDecStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitIncDecStmt(ctx *IncDecStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *IncDecStmtContext)
ExitIncDecStmt	parser/golangparser_listener.go	/^	ExitIncDecStmt(c *IncDecStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *IncDecStmtContext)
ExitIndex	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitIndex(ctx *IndexContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *IndexContext)
ExitIndex	parser/golangparser_listener.go	/^	ExitIndex(c *IndexContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *IndexContext)
ExitInterfaceType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitInterfaceType(ctx *InterfaceTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *InterfaceTypeContext)
ExitInterfaceType	parser/golangparser_listener.go	/^	ExitInterfaceType(c *InterfaceTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *InterfaceTypeContext)
ExitKey	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitKey(ctx *KeyContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *KeyContext)
ExitKey	parser/golangparser_listener.go	/^	ExitKey(c *KeyContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *KeyContext)
ExitKeyedElement	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitKeyedElement(ctx *KeyedElementContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *KeyedElementContext)
ExitKeyedElement	parser/golangparser_listener.go	/^	ExitKeyedElement(c *KeyedElementContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *KeyedElementContext)
ExitLabeledStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitLabeledStmt(ctx *LabeledStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *LabeledStmtContext)
ExitLabeledStmt	parser/golangparser_listener.go	/^	ExitLabeledStmt(c *LabeledStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *LabeledStmtContext)
ExitLiteral	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitLiteral(ctx *LiteralContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *LiteralContext)
ExitLiteral	parser/golangparser_listener.go	/^	ExitLiteral(c *LiteralContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *LiteralContext)
ExitLiteralType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitLiteralType(ctx *LiteralTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *LiteralTypeContext)
ExitLiteralType	parser/golangparser_listener.go	/^	ExitLiteralType(c *LiteralTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *LiteralTypeContext)
ExitLiteralValue	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitLiteralValue(ctx *LiteralValueContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *LiteralValueContext)
ExitLiteralValue	parser/golangparser_listener.go	/^	ExitLiteralValue(c *LiteralValueContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *LiteralValueContext)
ExitMapType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitMapType(ctx *MapTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *MapTypeContext)
ExitMapType	parser/golangparser_listener.go	/^	ExitMapType(c *MapTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *MapTypeContext)
ExitMethodDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitMethodDecl(ctx *MethodDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *MethodDeclContext)
ExitMethodDecl	parser/golangparser_listener.go	/^	ExitMethodDecl(c *MethodDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *MethodDeclContext)
ExitMethodExpr	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitMethodExpr(ctx *MethodExprContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *MethodExprContext)
ExitMethodExpr	parser/golangparser_listener.go	/^	ExitMethodExpr(c *MethodExprContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *MethodExprContext)
ExitMethodSpec	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitMethodSpec(ctx *MethodSpecContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *MethodSpecContext)
ExitMethodSpec	parser/golangparser_listener.go	/^	ExitMethodSpec(c *MethodSpecContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *MethodSpecContext)
ExitOperand	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitOperand(ctx *OperandContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *OperandContext)
ExitOperand	parser/golangparser_listener.go	/^	ExitOperand(c *OperandContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *OperandContext)
ExitOperandName	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitOperandName(ctx *OperandNameContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *OperandNameContext)
ExitOperandName	parser/golangparser_listener.go	/^	ExitOperandName(c *OperandNameContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *OperandNameContext)
ExitPackageClause	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitPackageClause(ctx *PackageClauseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *PackageClauseContext)
ExitPackageClause	parser/golangparser_listener.go	/^	ExitPackageClause(c *PackageClauseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *PackageClauseContext)
ExitParameterDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitParameterDecl(ctx *ParameterDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ParameterDeclContext)
ExitParameterDecl	parser/golangparser_listener.go	/^	ExitParameterDecl(c *ParameterDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ParameterDeclContext)
ExitParameterList	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitParameterList(ctx *ParameterListContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ParameterListContext)
ExitParameterList	parser/golangparser_listener.go	/^	ExitParameterList(c *ParameterListContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ParameterListContext)
ExitParameters	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitParameters(ctx *ParametersContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ParametersContext)
ExitParameters	parser/golangparser_listener.go	/^	ExitParameters(c *ParametersContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ParametersContext)
ExitPointerType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitPointerType(ctx *PointerTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *PointerTypeContext)
ExitPointerType	parser/golangparser_listener.go	/^	ExitPointerType(c *PointerTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *PointerTypeContext)
ExitPrimaryExpr	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitPrimaryExpr(ctx *PrimaryExprContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *PrimaryExprContext)
ExitPrimaryExpr	parser/golangparser_listener.go	/^	ExitPrimaryExpr(c *PrimaryExprContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *PrimaryExprContext)
ExitQualifiedIdent	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitQualifiedIdent(ctx *QualifiedIdentContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *QualifiedIdentContext)
ExitQualifiedIdent	parser/golangparser_listener.go	/^	ExitQualifiedIdent(c *QualifiedIdentContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *QualifiedIdentContext)
ExitRangeClause	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitRangeClause(ctx *RangeClauseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *RangeClauseContext)
ExitRangeClause	parser/golangparser_listener.go	/^	ExitRangeClause(c *RangeClauseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *RangeClauseContext)
ExitReceiver	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitReceiver(ctx *ReceiverContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ReceiverContext)
ExitReceiver	parser/golangparser_listener.go	/^	ExitReceiver(c *ReceiverContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ReceiverContext)
ExitReceiverType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitReceiverType(ctx *ReceiverTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ReceiverTypeContext)
ExitReceiverType	parser/golangparser_listener.go	/^	ExitReceiverType(c *ReceiverTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ReceiverTypeContext)
ExitRecvStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitRecvStmt(ctx *RecvStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *RecvStmtContext)
ExitRecvStmt	parser/golangparser_listener.go	/^	ExitRecvStmt(c *RecvStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *RecvStmtContext)
ExitResult	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitResult(ctx *ResultContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ResultContext)
ExitResult	parser/golangparser_listener.go	/^	ExitResult(c *ResultContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ResultContext)
ExitReturnStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitReturnStmt(ctx *ReturnStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ReturnStmtContext)
ExitReturnStmt	parser/golangparser_listener.go	/^	ExitReturnStmt(c *ReturnStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ReturnStmtContext)
ExitRule	parser/golang_parser.go	/^func (s *AnonymousFieldContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.AnonymousFieldContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ArgumentsContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ArgumentsContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ArrayLengthContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ArrayLengthContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ArrayTypeContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ArrayTypeContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *Assign_opContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.Assign_opContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *AssignmentContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.AssignmentContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *BasicLitContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.BasicLitContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *BlockContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.BlockContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *BreakStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.BreakStmtContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ChannelTypeContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ChannelTypeContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *CommCaseContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.CommCaseContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *CommClauseContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.CommClauseContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *CompositeLitContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.CompositeLitContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ConstDeclContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ConstDeclContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ConstSpecContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ConstSpecContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ContinueStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ContinueStmtContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ConversionContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ConversionContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *DeclarationContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.DeclarationContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *DeferStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.DeferStmtContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ElementContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ElementContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ElementListContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ElementListContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ElementTypeContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ElementTypeContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *EmptyStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.EmptyStmtContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *EosContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.EosContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ExprCaseClauseContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ExprCaseClauseContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ExprSwitchCaseContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ExprSwitchCaseContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ExprSwitchStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ExprSwitchStmtContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ExpressionContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ExpressionListContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ExpressionListContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ExpressionStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ExpressionStmtContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *FallthroughStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.FallthroughStmtContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *FieldDeclContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.FieldDeclContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ForClauseContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ForClauseContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ForStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ForStmtContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *FunctionContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.FunctionContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *FunctionDeclContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.FunctionDeclContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *FunctionLitContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.FunctionLitContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *FunctionTypeContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.FunctionTypeContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *GoStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.GoStmtContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *GotoStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.GotoStmtContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *IdentifierListContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.IdentifierListContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *IfStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.IfStmtContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ImportDeclContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ImportDeclContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ImportPathContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ImportPathContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ImportSpecContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ImportSpecContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *IncDecStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.IncDecStmtContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *IndexContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.IndexContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *InterfaceTypeContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.InterfaceTypeContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *KeyContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.KeyContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *KeyedElementContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.KeyedElementContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *LabeledStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.LabeledStmtContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *LiteralContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.LiteralContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *LiteralTypeContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.LiteralTypeContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *LiteralValueContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.LiteralValueContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *MapTypeContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.MapTypeContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *MethodDeclContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.MethodDeclContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *MethodExprContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.MethodExprContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *MethodSpecContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.MethodSpecContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *OperandContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.OperandContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *OperandNameContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.OperandNameContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *PackageClauseContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.PackageClauseContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ParameterDeclContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ParameterDeclContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ParameterListContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ParameterListContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ParametersContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ParametersContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *PointerTypeContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.PointerTypeContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *PrimaryExprContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.PrimaryExprContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *QualifiedIdentContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.QualifiedIdentContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *RangeClauseContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.RangeClauseContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ReceiverContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ReceiverContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ReceiverTypeContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ReceiverTypeContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *RecvStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.RecvStmtContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ResultContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ResultContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ReturnStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ReturnStmtContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *SelectStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SelectStmtContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *SelectorContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SelectorContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *SendStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SendStmtContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *ShortVarDeclContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ShortVarDeclContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *SignatureContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SignatureContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *SimpleStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SimpleStmtContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *SliceContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SliceContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *SliceTypeContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SliceTypeContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *SourceFileContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SourceFileContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.StatementContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *StatementListContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.StatementListContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *StructTypeContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.StructTypeContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *SwitchStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SwitchStmtContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *TopLevelDeclContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TopLevelDeclContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *TypeAssertionContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeAssertionContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *TypeCaseClauseContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeCaseClauseContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *TypeDeclContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeDeclContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *TypeListContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeListContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *TypeLitContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeLitContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *TypeNameContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeNameContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *TypeSpecContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeSpecContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *TypeSwitchCaseContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeSwitchCaseContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *TypeSwitchGuardContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeSwitchGuardContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *TypeSwitchStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeSwitchStmtContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *Type_Context) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.Type_Context	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *UnaryExprContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.UnaryExprContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *VarDeclContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.VarDeclContext	signature:(listener antlr.ParseTreeListener)
ExitRule	parser/golang_parser.go	/^func (s *VarSpecContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.VarSpecContext	signature:(listener antlr.ParseTreeListener)
ExitSelectStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitSelectStmt(ctx *SelectStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SelectStmtContext)
ExitSelectStmt	parser/golangparser_listener.go	/^	ExitSelectStmt(c *SelectStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SelectStmtContext)
ExitSelector	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitSelector(ctx *SelectorContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SelectorContext)
ExitSelector	parser/golangparser_listener.go	/^	ExitSelector(c *SelectorContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SelectorContext)
ExitSendStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitSendStmt(ctx *SendStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SendStmtContext)
ExitSendStmt	parser/golangparser_listener.go	/^	ExitSendStmt(c *SendStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SendStmtContext)
ExitShortVarDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitShortVarDecl(ctx *ShortVarDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ShortVarDeclContext)
ExitShortVarDecl	parser/golangparser_listener.go	/^	ExitShortVarDecl(c *ShortVarDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ShortVarDeclContext)
ExitSignature	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitSignature(ctx *SignatureContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SignatureContext)
ExitSignature	parser/golangparser_listener.go	/^	ExitSignature(c *SignatureContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SignatureContext)
ExitSimpleStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitSimpleStmt(ctx *SimpleStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SimpleStmtContext)
ExitSimpleStmt	parser/golangparser_listener.go	/^	ExitSimpleStmt(c *SimpleStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SimpleStmtContext)
ExitSlice	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitSlice(ctx *SliceContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SliceContext)
ExitSlice	parser/golangparser_listener.go	/^	ExitSlice(c *SliceContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SliceContext)
ExitSliceType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitSliceType(ctx *SliceTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SliceTypeContext)
ExitSliceType	parser/golangparser_listener.go	/^	ExitSliceType(c *SliceTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SliceTypeContext)
ExitSourceFile	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitSourceFile(ctx *SourceFileContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SourceFileContext)
ExitSourceFile	parser/golangparser_listener.go	/^	ExitSourceFile(c *SourceFileContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SourceFileContext)
ExitStatement	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitStatement(ctx *StatementContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *StatementContext)
ExitStatement	parser/golangparser_listener.go	/^	ExitStatement(c *StatementContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *StatementContext)
ExitStatementList	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitStatementList(ctx *StatementListContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *StatementListContext)
ExitStatementList	parser/golangparser_listener.go	/^	ExitStatementList(c *StatementListContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *StatementListContext)
ExitStructType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitStructType(ctx *StructTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *StructTypeContext)
ExitStructType	parser/golangparser_listener.go	/^	ExitStructType(c *StructTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *StructTypeContext)
ExitSwitchStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitSwitchStmt(ctx *SwitchStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SwitchStmtContext)
ExitSwitchStmt	parser/golangparser_listener.go	/^	ExitSwitchStmt(c *SwitchStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SwitchStmtContext)
ExitTopLevelDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitTopLevelDecl(ctx *TopLevelDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TopLevelDeclContext)
ExitTopLevelDecl	parser/golangparser_listener.go	/^	ExitTopLevelDecl(c *TopLevelDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TopLevelDeclContext)
ExitTypeAssertion	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitTypeAssertion(ctx *TypeAssertionContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeAssertionContext)
ExitTypeAssertion	parser/golangparser_listener.go	/^	ExitTypeAssertion(c *TypeAssertionContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeAssertionContext)
ExitTypeCaseClause	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitTypeCaseClause(ctx *TypeCaseClauseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeCaseClauseContext)
ExitTypeCaseClause	parser/golangparser_listener.go	/^	ExitTypeCaseClause(c *TypeCaseClauseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeCaseClauseContext)
ExitTypeDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitTypeDecl(ctx *TypeDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeDeclContext)
ExitTypeDecl	parser/golangparser_listener.go	/^	ExitTypeDecl(c *TypeDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeDeclContext)
ExitTypeList	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitTypeList(ctx *TypeListContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeListContext)
ExitTypeList	parser/golangparser_listener.go	/^	ExitTypeList(c *TypeListContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeListContext)
ExitTypeLit	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitTypeLit(ctx *TypeLitContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeLitContext)
ExitTypeLit	parser/golangparser_listener.go	/^	ExitTypeLit(c *TypeLitContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeLitContext)
ExitTypeName	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitTypeName(ctx *TypeNameContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeNameContext)
ExitTypeName	parser/golangparser_listener.go	/^	ExitTypeName(c *TypeNameContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeNameContext)
ExitTypeSpec	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitTypeSpec(ctx *TypeSpecContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeSpecContext)
ExitTypeSpec	parser/golangparser_listener.go	/^	ExitTypeSpec(c *TypeSpecContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeSpecContext)
ExitTypeSwitchCase	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitTypeSwitchCase(ctx *TypeSwitchCaseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeSwitchCaseContext)
ExitTypeSwitchCase	parser/golangparser_listener.go	/^	ExitTypeSwitchCase(c *TypeSwitchCaseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeSwitchCaseContext)
ExitTypeSwitchGuard	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitTypeSwitchGuard(ctx *TypeSwitchGuardContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeSwitchGuardContext)
ExitTypeSwitchGuard	parser/golangparser_listener.go	/^	ExitTypeSwitchGuard(c *TypeSwitchGuardContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeSwitchGuardContext)
ExitTypeSwitchStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitTypeSwitchStmt(ctx *TypeSwitchStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeSwitchStmtContext)
ExitTypeSwitchStmt	parser/golangparser_listener.go	/^	ExitTypeSwitchStmt(c *TypeSwitchStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeSwitchStmtContext)
ExitType_	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitType_(ctx *Type_Context) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *Type_Context)
ExitType_	parser/golangparser_listener.go	/^	ExitType_(c *Type_Context)$/;"	n	interface:parser.GolangParserListener	signature:(c *Type_Context)
ExitUnaryExpr	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitUnaryExpr(ctx *UnaryExprContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *UnaryExprContext)
ExitUnaryExpr	parser/golangparser_listener.go	/^	ExitUnaryExpr(c *UnaryExprContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *UnaryExprContext)
ExitVarDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitVarDecl(ctx *VarDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *VarDeclContext)
ExitVarDecl	parser/golangparser_listener.go	/^	ExitVarDecl(c *VarDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *VarDeclContext)
ExitVarSpec	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitVarSpec(ctx *VarSpecContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *VarSpecContext)
ExitVarSpec	parser/golangparser_listener.go	/^	ExitVarSpec(c *VarSpecContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *VarSpecContext)
ExprCaseClause	parser/golang_parser.go	/^func (p *GolangParser) ExprCaseClause() (localctx IExprCaseClauseContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IExprCaseClauseContext)	signature:()
ExprCaseClause	parser/golang_parser.go	/^func (s *ExprSwitchStmtContext) ExprCaseClause(i int) IExprCaseClauseContext {$/;"	f	struct:parser.ExprSwitchStmtContext	typeref:typename:IExprCaseClauseContext	signature:(i int)
ExprCaseClauseContext	parser/golang_parser.go	/^type ExprCaseClauseContext struct {$/;"	s	package:parser
ExprSwitchCase	parser/golang_parser.go	/^func (p *GolangParser) ExprSwitchCase() (localctx IExprSwitchCaseContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IExprSwitchCaseContext)	signature:()
ExprSwitchCase	parser/golang_parser.go	/^func (s *ExprCaseClauseContext) ExprSwitchCase() IExprSwitchCaseContext {$/;"	f	struct:parser.ExprCaseClauseContext	typeref:typename:IExprSwitchCaseContext	signature:()
ExprSwitchCaseContext	parser/golang_parser.go	/^type ExprSwitchCaseContext struct {$/;"	s	package:parser
ExprSwitchStmt	parser/golang_parser.go	/^func (p *GolangParser) ExprSwitchStmt() (localctx IExprSwitchStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IExprSwitchStmtContext)	signature:()
ExprSwitchStmt	parser/golang_parser.go	/^func (s *SwitchStmtContext) ExprSwitchStmt() IExprSwitchStmtContext {$/;"	f	struct:parser.SwitchStmtContext	typeref:typename:IExprSwitchStmtContext	signature:()
ExprSwitchStmtContext	parser/golang_parser.go	/^type ExprSwitchStmtContext struct {$/;"	s	package:parser
Expression	parser/golang_parser.go	/^func (p *GolangParser) Expression() (localctx IExpressionContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IExpressionContext)	signature:()
Expression	parser/golang_parser.go	/^func (s *ArrayLengthContext) Expression() IExpressionContext {$/;"	f	struct:parser.ArrayLengthContext	typeref:typename:IExpressionContext	signature:()
Expression	parser/golang_parser.go	/^func (s *ConversionContext) Expression() IExpressionContext {$/;"	f	struct:parser.ConversionContext	typeref:typename:IExpressionContext	signature:()
Expression	parser/golang_parser.go	/^func (s *DeferStmtContext) Expression() IExpressionContext {$/;"	f	struct:parser.DeferStmtContext	typeref:typename:IExpressionContext	signature:()
Expression	parser/golang_parser.go	/^func (s *ElementContext) Expression() IExpressionContext {$/;"	f	struct:parser.ElementContext	typeref:typename:IExpressionContext	signature:()
Expression	parser/golang_parser.go	/^func (s *ExprSwitchStmtContext) Expression() IExpressionContext {$/;"	f	struct:parser.ExprSwitchStmtContext	typeref:typename:IExpressionContext	signature:()
Expression	parser/golang_parser.go	/^func (s *ExpressionContext) Expression(i int) IExpressionContext {$/;"	f	struct:parser.ExpressionContext	typeref:typename:IExpressionContext	signature:(i int)
Expression	parser/golang_parser.go	/^func (s *ExpressionListContext) Expression(i int) IExpressionContext {$/;"	f	struct:parser.ExpressionListContext	typeref:typename:IExpressionContext	signature:(i int)
Expression	parser/golang_parser.go	/^func (s *ExpressionStmtContext) Expression() IExpressionContext {$/;"	f	struct:parser.ExpressionStmtContext	typeref:typename:IExpressionContext	signature:()
Expression	parser/golang_parser.go	/^func (s *ForClauseContext) Expression() IExpressionContext {$/;"	f	struct:parser.ForClauseContext	typeref:typename:IExpressionContext	signature:()
Expression	parser/golang_parser.go	/^func (s *ForStmtContext) Expression() IExpressionContext {$/;"	f	struct:parser.ForStmtContext	typeref:typename:IExpressionContext	signature:()
Expression	parser/golang_parser.go	/^func (s *GoStmtContext) Expression() IExpressionContext {$/;"	f	struct:parser.GoStmtContext	typeref:typename:IExpressionContext	signature:()
Expression	parser/golang_parser.go	/^func (s *IfStmtContext) Expression() IExpressionContext {$/;"	f	struct:parser.IfStmtContext	typeref:typename:IExpressionContext	signature:()
Expression	parser/golang_parser.go	/^func (s *IncDecStmtContext) Expression() IExpressionContext {$/;"	f	struct:parser.IncDecStmtContext	typeref:typename:IExpressionContext	signature:()
Expression	parser/golang_parser.go	/^func (s *IndexContext) Expression() IExpressionContext {$/;"	f	struct:parser.IndexContext	typeref:typename:IExpressionContext	signature:()
Expression	parser/golang_parser.go	/^func (s *KeyContext) Expression() IExpressionContext {$/;"	f	struct:parser.KeyContext	typeref:typename:IExpressionContext	signature:()
Expression	parser/golang_parser.go	/^func (s *OperandContext) Expression() IExpressionContext {$/;"	f	struct:parser.OperandContext	typeref:typename:IExpressionContext	signature:()
Expression	parser/golang_parser.go	/^func (s *RangeClauseContext) Expression() IExpressionContext {$/;"	f	struct:parser.RangeClauseContext	typeref:typename:IExpressionContext	signature:()
Expression	parser/golang_parser.go	/^func (s *RecvStmtContext) Expression() IExpressionContext {$/;"	f	struct:parser.RecvStmtContext	typeref:typename:IExpressionContext	signature:()
Expression	parser/golang_parser.go	/^func (s *SendStmtContext) Expression(i int) IExpressionContext {$/;"	f	struct:parser.SendStmtContext	typeref:typename:IExpressionContext	signature:(i int)
Expression	parser/golang_parser.go	/^func (s *SliceContext) Expression(i int) IExpressionContext {$/;"	f	struct:parser.SliceContext	typeref:typename:IExpressionContext	signature:(i int)
ExpressionContext	parser/golang_parser.go	/^type ExpressionContext struct {$/;"	s	package:parser
ExpressionList	parser/golang_parser.go	/^func (p *GolangParser) ExpressionList() (localctx IExpressionListContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IExpressionListContext)	signature:()
ExpressionList	parser/golang_parser.go	/^func (s *ArgumentsContext) ExpressionList() IExpressionListContext {$/;"	f	struct:parser.ArgumentsContext	typeref:typename:IExpressionListContext	signature:()
ExpressionList	parser/golang_parser.go	/^func (s *AssignmentContext) ExpressionList(i int) IExpressionListContext {$/;"	f	struct:parser.AssignmentContext	typeref:typename:IExpressionListContext	signature:(i int)
ExpressionList	parser/golang_parser.go	/^func (s *ConstSpecContext) ExpressionList() IExpressionListContext {$/;"	f	struct:parser.ConstSpecContext	typeref:typename:IExpressionListContext	signature:()
ExpressionList	parser/golang_parser.go	/^func (s *ExprSwitchCaseContext) ExpressionList() IExpressionListContext {$/;"	f	struct:parser.ExprSwitchCaseContext	typeref:typename:IExpressionListContext	signature:()
ExpressionList	parser/golang_parser.go	/^func (s *RangeClauseContext) ExpressionList() IExpressionListContext {$/;"	f	struct:parser.RangeClauseContext	typeref:typename:IExpressionListContext	signature:()
ExpressionList	parser/golang_parser.go	/^func (s *RecvStmtContext) ExpressionList() IExpressionListContext {$/;"	f	struct:parser.RecvStmtContext	typeref:typename:IExpressionListContext	signature:()
ExpressionList	parser/golang_parser.go	/^func (s *ReturnStmtContext) ExpressionList() IExpressionListContext {$/;"	f	struct:parser.ReturnStmtContext	typeref:typename:IExpressionListContext	signature:()
ExpressionList	parser/golang_parser.go	/^func (s *ShortVarDeclContext) ExpressionList() IExpressionListContext {$/;"	f	struct:parser.ShortVarDeclContext	typeref:typename:IExpressionListContext	signature:()
ExpressionList	parser/golang_parser.go	/^func (s *VarSpecContext) ExpressionList() IExpressionListContext {$/;"	f	struct:parser.VarSpecContext	typeref:typename:IExpressionListContext	signature:()
ExpressionListContext	parser/golang_parser.go	/^type ExpressionListContext struct {$/;"	s	package:parser
ExpressionStmt	parser/golang_parser.go	/^func (p *GolangParser) ExpressionStmt() (localctx IExpressionStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IExpressionStmtContext)	signature:()
ExpressionStmt	parser/golang_parser.go	/^func (s *SimpleStmtContext) ExpressionStmt() IExpressionStmtContext {$/;"	f	struct:parser.SimpleStmtContext	typeref:typename:IExpressionStmtContext	signature:()
ExpressionStmtContext	parser/golang_parser.go	/^type ExpressionStmtContext struct {$/;"	s	package:parser
Expression_Sempred	parser/golang_parser.go	/^func (p *GolangParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {$/;"	f	struct:parser.GolangParser	typeref:typename:bool	signature:(localctx antlr.RuleContext, predIndex int)
FLOAT_LIT	parser/golang_parser.go	/^func (s *BasicLitContext) FLOAT_LIT() antlr.TerminalNode {$/;"	f	struct:parser.BasicLitContext	typeref:typename:antlr.TerminalNode	signature:()
Fallthrough	parser/golang_parser.go	/^func (s *FallthroughStmtContext) Fallthrough() antlr.TerminalNode {$/;"	f	struct:parser.FallthroughStmtContext	typeref:typename:antlr.TerminalNode	signature:()
FallthroughStmt	parser/golang_parser.go	/^func (p *GolangParser) FallthroughStmt() (localctx IFallthroughStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IFallthroughStmtContext)	signature:()
FallthroughStmt	parser/golang_parser.go	/^func (s *StatementContext) FallthroughStmt() IFallthroughStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:IFallthroughStmtContext	signature:()
FallthroughStmtContext	parser/golang_parser.go	/^type FallthroughStmtContext struct {$/;"	s	package:parser
FieldDecl	parser/golang_parser.go	/^func (p *GolangParser) FieldDecl() (localctx IFieldDeclContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IFieldDeclContext)	signature:()
FieldDecl	parser/golang_parser.go	/^func (s *StructTypeContext) FieldDecl(i int) IFieldDeclContext {$/;"	f	struct:parser.StructTypeContext	typeref:typename:IFieldDeclContext	signature:(i int)
FieldDeclContext	parser/golang_parser.go	/^type FieldDeclContext struct {$/;"	s	package:parser
FieldDecl_Sempred	parser/golang_parser.go	/^func (p *GolangParser) FieldDecl_Sempred(localctx antlr.RuleContext, predIndex int) bool {$/;"	f	struct:parser.GolangParser	typeref:typename:bool	signature:(localctx antlr.RuleContext, predIndex int)
For	parser/golang_parser.go	/^func (s *ForStmtContext) For() antlr.TerminalNode {$/;"	f	struct:parser.ForStmtContext	typeref:typename:antlr.TerminalNode	signature:()
ForClause	parser/golang_parser.go	/^func (p *GolangParser) ForClause() (localctx IForClauseContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IForClauseContext)	signature:()
ForClause	parser/golang_parser.go	/^func (s *ForStmtContext) ForClause() IForClauseContext {$/;"	f	struct:parser.ForStmtContext	typeref:typename:IForClauseContext	signature:()
ForClauseContext	parser/golang_parser.go	/^type ForClauseContext struct {$/;"	s	package:parser
ForStmt	parser/golang_parser.go	/^func (p *GolangParser) ForStmt() (localctx IForStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IForStmtContext)	signature:()
ForStmt	parser/golang_parser.go	/^func (s *StatementContext) ForStmt() IForStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:IForStmtContext	signature:()
ForStmtContext	parser/golang_parser.go	/^type ForStmtContext struct {$/;"	s	package:parser
Func	parser/golang_parser.go	/^func (s *FunctionDeclContext) Func() antlr.TerminalNode {$/;"	f	struct:parser.FunctionDeclContext	typeref:typename:antlr.TerminalNode	signature:()
Func	parser/golang_parser.go	/^func (s *FunctionLitContext) Func() antlr.TerminalNode {$/;"	f	struct:parser.FunctionLitContext	typeref:typename:antlr.TerminalNode	signature:()
Func	parser/golang_parser.go	/^func (s *FunctionTypeContext) Func() antlr.TerminalNode {$/;"	f	struct:parser.FunctionTypeContext	typeref:typename:antlr.TerminalNode	signature:()
Func	parser/golang_parser.go	/^func (s *MethodDeclContext) Func() antlr.TerminalNode {$/;"	f	struct:parser.MethodDeclContext	typeref:typename:antlr.TerminalNode	signature:()
Function	parser/golang_parser.go	/^func (p *GolangParser) Function() (localctx IFunctionContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IFunctionContext)	signature:()
Function	parser/golang_parser.go	/^func (s *FunctionDeclContext) Function() IFunctionContext {$/;"	f	struct:parser.FunctionDeclContext	typeref:typename:IFunctionContext	signature:()
Function	parser/golang_parser.go	/^func (s *FunctionLitContext) Function() IFunctionContext {$/;"	f	struct:parser.FunctionLitContext	typeref:typename:IFunctionContext	signature:()
Function	parser/golang_parser.go	/^func (s *MethodDeclContext) Function() IFunctionContext {$/;"	f	struct:parser.MethodDeclContext	typeref:typename:IFunctionContext	signature:()
FunctionContext	parser/golang_parser.go	/^type FunctionContext struct {$/;"	s	package:parser
FunctionDecl	parser/golang_parser.go	/^func (p *GolangParser) FunctionDecl() (localctx IFunctionDeclContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IFunctionDeclContext)	signature:()
FunctionDecl	parser/golang_parser.go	/^func (s *TopLevelDeclContext) FunctionDecl() IFunctionDeclContext {$/;"	f	struct:parser.TopLevelDeclContext	typeref:typename:IFunctionDeclContext	signature:()
FunctionDeclContext	parser/golang_parser.go	/^type FunctionDeclContext struct {$/;"	s	package:parser
FunctionLit	parser/golang_parser.go	/^func (p *GolangParser) FunctionLit() (localctx IFunctionLitContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IFunctionLitContext)	signature:()
FunctionLit	parser/golang_parser.go	/^func (s *LiteralContext) FunctionLit() IFunctionLitContext {$/;"	f	struct:parser.LiteralContext	typeref:typename:IFunctionLitContext	signature:()
FunctionLitContext	parser/golang_parser.go	/^type FunctionLitContext struct {$/;"	s	package:parser
FunctionType	parser/golang_parser.go	/^func (p *GolangParser) FunctionType() (localctx IFunctionTypeContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IFunctionTypeContext)	signature:()
FunctionType	parser/golang_parser.go	/^func (s *TypeLitContext) FunctionType() IFunctionTypeContext {$/;"	f	struct:parser.TypeLitContext	typeref:typename:IFunctionTypeContext	signature:()
FunctionTypeContext	parser/golang_parser.go	/^type FunctionTypeContext struct {$/;"	s	package:parser
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IAnonymousFieldContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IArgumentsContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IArrayLengthContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IArrayTypeContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IAssign_opContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IAssignmentContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IBasicLitContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IBlockContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IBreakStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IChannelTypeContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ICommCaseContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ICommClauseContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ICompositeLitContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IConstDeclContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IConstSpecContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IContinueStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IConversionContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IDeclarationContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IDeferStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IElementContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IElementListContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IElementTypeContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IEmptyStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IEosContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IExprCaseClauseContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IExprSwitchCaseContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IExprSwitchStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IExpressionContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IExpressionListContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IExpressionStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IFallthroughStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IFieldDeclContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IForClauseContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IForStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IFunctionContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IFunctionDeclContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IFunctionLitContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IFunctionTypeContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IGoStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IGotoStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IIdentifierListContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IIfStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IImportDeclContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IImportPathContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IImportSpecContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IIncDecStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IIndexContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IInterfaceTypeContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IKeyContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IKeyedElementContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ILabeledStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ILiteralContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ILiteralTypeContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ILiteralValueContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IMapTypeContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IMethodDeclContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IMethodExprContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IMethodSpecContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IOperandContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IOperandNameContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IPackageClauseContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IParameterDeclContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IParameterListContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IParametersContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IPointerTypeContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IPrimaryExprContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IQualifiedIdentContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IRangeClauseContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IReceiverContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IReceiverTypeContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IRecvStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IResultContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IReturnStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ISelectStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ISelectorContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ISendStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IShortVarDeclContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ISignatureContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ISimpleStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ISliceContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ISliceTypeContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ISourceFileContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IStatementContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IStatementListContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IStructTypeContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ISwitchStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ITopLevelDeclContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ITypeAssertionContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ITypeCaseClauseContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ITypeDeclContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ITypeListContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ITypeLitContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ITypeNameContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ITypeSpecContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ITypeSwitchCaseContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ITypeSwitchGuardContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ITypeSwitchStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IType_Context	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IUnaryExprContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IVarDeclContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IVarSpecContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *AnonymousFieldContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.AnonymousFieldContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ArgumentsContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ArgumentsContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ArrayLengthContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ArrayLengthContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ArrayTypeContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ArrayTypeContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *Assign_opContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *AssignmentContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.AssignmentContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *BasicLitContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.BasicLitContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *BlockContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.BlockContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *BreakStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.BreakStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ChannelTypeContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ChannelTypeContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *CommCaseContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.CommCaseContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *CommClauseContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.CommClauseContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *CompositeLitContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.CompositeLitContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ConstDeclContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ConstDeclContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ConstSpecContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ConstSpecContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ContinueStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ContinueStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ConversionContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ConversionContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *DeclarationContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.DeclarationContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *DeferStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.DeferStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ElementContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ElementContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ElementListContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ElementListContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ElementTypeContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ElementTypeContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *EmptyStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.EmptyStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *EosContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.EosContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ExprCaseClauseContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ExprCaseClauseContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ExprSwitchCaseContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ExprSwitchCaseContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ExprSwitchStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ExprSwitchStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ExpressionListContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ExpressionListContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ExpressionStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ExpressionStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *FallthroughStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.FallthroughStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *FieldDeclContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.FieldDeclContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ForClauseContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ForClauseContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ForStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ForStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *FunctionContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.FunctionContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *FunctionDeclContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.FunctionDeclContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *FunctionLitContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.FunctionLitContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *FunctionTypeContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.FunctionTypeContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *GoStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.GoStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *GotoStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.GotoStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *IdentifierListContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.IdentifierListContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *IfStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.IfStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ImportDeclContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ImportDeclContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ImportPathContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ImportPathContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ImportSpecContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ImportSpecContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *IncDecStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.IncDecStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *IndexContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.IndexContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *InterfaceTypeContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.InterfaceTypeContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *KeyContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.KeyContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *KeyedElementContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.KeyedElementContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *LabeledStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.LabeledStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.LiteralContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *LiteralTypeContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.LiteralTypeContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *LiteralValueContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.LiteralValueContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *MapTypeContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.MapTypeContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *MethodDeclContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.MethodDeclContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *MethodExprContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.MethodExprContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *MethodSpecContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.MethodSpecContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *OperandContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.OperandContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *OperandNameContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.OperandNameContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *PackageClauseContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.PackageClauseContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ParameterDeclContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ParameterDeclContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ParameterListContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ParameterListContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ParametersContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ParametersContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *PointerTypeContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.PointerTypeContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *PrimaryExprContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.PrimaryExprContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *QualifiedIdentContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.QualifiedIdentContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *RangeClauseContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.RangeClauseContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ReceiverContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ReceiverContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ReceiverTypeContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ReceiverTypeContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *RecvStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.RecvStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ResultContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ResultContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ReturnStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ReturnStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *SelectStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.SelectStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *SelectorContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.SelectorContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *SendStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.SendStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *ShortVarDeclContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ShortVarDeclContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *SignatureContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.SignatureContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *SimpleStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.SimpleStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *SliceContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.SliceContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *SliceTypeContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.SliceTypeContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *SourceFileContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.SourceFileContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *StatementContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.StatementContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *StatementListContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.StatementListContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *StructTypeContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.StructTypeContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *SwitchStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.SwitchStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *TopLevelDeclContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.TopLevelDeclContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *TypeAssertionContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.TypeAssertionContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *TypeCaseClauseContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.TypeCaseClauseContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *TypeDeclContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.TypeDeclContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *TypeListContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.TypeListContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *TypeLitContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.TypeLitContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *TypeNameContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.TypeNameContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *TypeSpecContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.TypeSpecContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *TypeSwitchCaseContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.TypeSwitchCaseContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *TypeSwitchGuardContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.TypeSwitchGuardContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *TypeSwitchStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.TypeSwitchStmtContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *Type_Context) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.Type_Context	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *UnaryExprContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.UnaryExprContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *VarDeclContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.VarDeclContext	typeref:typename:antlr.Parser	signature:()
GetParser	parser/golang_parser.go	/^func (s *VarSpecContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.VarSpecContext	typeref:typename:antlr.Parser	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *AnonymousFieldContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.AnonymousFieldContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ArgumentsContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ArgumentsContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ArrayLengthContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ArrayLengthContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ArrayTypeContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ArrayTypeContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *Assign_opContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *AssignmentContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.AssignmentContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *BasicLitContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.BasicLitContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *BlockContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.BlockContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *BreakStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.BreakStmtContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ChannelTypeContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ChannelTypeContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *CommCaseContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.CommCaseContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *CommClauseContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.CommClauseContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *CompositeLitContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.CompositeLitContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ConstDeclContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ConstDeclContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ConstSpecContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ConstSpecContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ContinueStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ContinueStmtContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ConversionContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ConversionContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *DeclarationContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.DeclarationContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *DeferStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.DeferStmtContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ElementContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ElementContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ElementListContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ElementListContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ElementTypeContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ElementTypeContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *EmptyStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.EmptyStmtContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *EosContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.EosContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ExprCaseClauseContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ExprCaseClauseContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ExprSwitchCaseContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ExprSwitchCaseContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ExprSwitchStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ExprSwitchStmtContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ExpressionListContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ExpressionListContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ExpressionStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ExpressionStmtContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *FallthroughStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.FallthroughStmtContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *FieldDeclContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.FieldDeclContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ForClauseContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ForClauseContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ForStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ForStmtContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *FunctionContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.FunctionContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *FunctionDeclContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.FunctionDeclContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *FunctionLitContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.FunctionLitContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *FunctionTypeContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.FunctionTypeContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *GoStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.GoStmtContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *GotoStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.GotoStmtContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *IdentifierListContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.IdentifierListContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *IfStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.IfStmtContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ImportDeclContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ImportDeclContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ImportPathContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ImportPathContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ImportSpecContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ImportSpecContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *IncDecStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.IncDecStmtContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *IndexContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.IndexContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *InterfaceTypeContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.InterfaceTypeContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *KeyContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.KeyContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *KeyedElementContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.KeyedElementContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *LabeledStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.LabeledStmtContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *LiteralContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.LiteralContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *LiteralTypeContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.LiteralTypeContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *LiteralValueContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.LiteralValueContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *MapTypeContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.MapTypeContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *MethodDeclContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.MethodDeclContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *MethodExprContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.MethodExprContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *MethodSpecContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.MethodSpecContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *OperandContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.OperandContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *OperandNameContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.OperandNameContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *PackageClauseContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.PackageClauseContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ParameterDeclContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ParameterDeclContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ParameterListContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ParameterListContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ParametersContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ParametersContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *PointerTypeContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.PointerTypeContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *PrimaryExprContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.PrimaryExprContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *QualifiedIdentContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.QualifiedIdentContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *RangeClauseContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.RangeClauseContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ReceiverContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ReceiverContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ReceiverTypeContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ReceiverTypeContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *RecvStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.RecvStmtContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ResultContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ResultContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ReturnStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ReturnStmtContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *SelectStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.SelectStmtContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *SelectorContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.SelectorContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *SendStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.SendStmtContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *ShortVarDeclContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ShortVarDeclContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *SignatureContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.SignatureContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *SimpleStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.SimpleStmtContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *SliceContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.SliceContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *SliceTypeContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.SliceTypeContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *SourceFileContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.SourceFileContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *StatementContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.StatementContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *StatementListContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.StatementListContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *StructTypeContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.StructTypeContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *SwitchStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.SwitchStmtContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *TopLevelDeclContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.TopLevelDeclContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *TypeAssertionContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.TypeAssertionContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *TypeCaseClauseContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.TypeCaseClauseContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *TypeDeclContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.TypeDeclContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *TypeListContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.TypeListContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *TypeLitContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.TypeLitContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *TypeNameContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.TypeNameContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *TypeSpecContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.TypeSpecContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *TypeSwitchCaseContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.TypeSwitchCaseContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *TypeSwitchGuardContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.TypeSwitchGuardContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *TypeSwitchStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.TypeSwitchStmtContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *Type_Context) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.Type_Context	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *UnaryExprContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.UnaryExprContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *VarDeclContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.VarDeclContext	typeref:typename:antlr.RuleContext	signature:()
GetRuleContext	parser/golang_parser.go	/^func (s *VarSpecContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.VarSpecContext	typeref:typename:antlr.RuleContext	signature:()
Go	parser/golang_parser.go	/^func (s *GoStmtContext) Go() antlr.TerminalNode {$/;"	f	struct:parser.GoStmtContext	typeref:typename:antlr.TerminalNode	signature:()
GoBaseLexer	golang_base_lexer.go	/^type GoBaseLexer struct {$/;"	s	package:parser
GoBaseLexer	main.go	/^  parser.GoBaseLexer$/;"	M	struct:main.GolangFileParserListener	typeref:typename:parser.GoBaseLexer
GoBaseLexer	parser/golang_base_lexer.go	/^type GoBaseLexer struct {$/;"	s	package:parser
GoBaseLexer	parser/golang_lexer.go	/^	*GoBaseLexer$/;"	M	struct:parser.GolangLexer	typeref:typename:*GoBaseLexer
GoBaseParser	golang_base_parser.go	/^type GoBaseParser struct {$/;"	s	package:parser
GoBaseParser	parser/golang_base_parser.go	/^type GoBaseParser struct {$/;"	s	package:parser
GoBaseParser	parser/golang_parser.go	/^	GoBaseParser$/;"	M	struct:parser.GolangParser	typeref:typename:GoBaseParser
GoStmt	parser/golang_parser.go	/^func (p *GolangParser) GoStmt() (localctx IGoStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IGoStmtContext)	signature:()
GoStmt	parser/golang_parser.go	/^func (s *StatementContext) GoStmt() IGoStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:IGoStmtContext	signature:()
GoStmtContext	parser/golang_parser.go	/^type GoStmtContext struct {$/;"	s	package:parser
GolangFileParserListener	main.go	/^type GolangFileParserListener struct {$/;"	s	package:main
GolangLexer	parser/golang_lexer.go	/^type GolangLexer struct {$/;"	s	package:parser
GolangLexerAnd	parser/golang_lexer.go	/^	GolangLexerAnd                  = 27$/;"	c	package:parser
GolangLexerAssign	parser/golang_lexer.go	/^	GolangLexerAssign               = 56$/;"	c	package:parser
GolangLexerBIG_U_VALUE	parser/golang_lexer.go	/^	GolangLexerBIG_U_VALUE          = 69$/;"	c	package:parser
GolangLexerBINARY_OP	parser/golang_lexer.go	/^	GolangLexerBINARY_OP            = 63$/;"	c	package:parser
GolangLexerBitAnd	parser/golang_lexer.go	/^	GolangLexerBitAnd               = 43$/;"	c	package:parser
GolangLexerBitClear	parser/golang_lexer.go	/^	GolangLexerBitClear             = 44$/;"	c	package:parser
GolangLexerBitOr	parser/golang_lexer.go	/^	GolangLexerBitOr                = 36$/;"	c	package:parser
GolangLexerBitXor	parser/golang_lexer.go	/^	GolangLexerBitXor               = 37$/;"	c	package:parser
GolangLexerBreak	parser/golang_lexer.go	/^	GolangLexerBreak                = 1$/;"	c	package:parser
GolangLexerCOMMENT	parser/golang_lexer.go	/^	GolangLexerCOMMENT              = 72$/;"	c	package:parser
GolangLexerCase	parser/golang_lexer.go	/^	GolangLexerCase                 = 6$/;"	c	package:parser
GolangLexerChan	parser/golang_lexer.go	/^	GolangLexerChan                 = 11$/;"	c	package:parser
GolangLexerChanOp	parser/golang_lexer.go	/^	GolangLexerChanOp               = 46$/;"	c	package:parser
GolangLexerCloseBrace	parser/golang_lexer.go	/^	GolangLexerCloseBrace           = 50$/;"	c	package:parser
GolangLexerCloseBracket	parser/golang_lexer.go	/^	GolangLexerCloseBracket         = 52$/;"	c	package:parser
GolangLexerCloseParen	parser/golang_lexer.go	/^	GolangLexerCloseParen           = 48$/;"	c	package:parser
GolangLexerColon	parser/golang_lexer.go	/^	GolangLexerColon                = 53$/;"	c	package:parser
GolangLexerComma	parser/golang_lexer.go	/^	GolangLexerComma                = 55$/;"	c	package:parser
GolangLexerConst	parser/golang_lexer.go	/^	GolangLexerConst                = 16$/;"	c	package:parser
GolangLexerContinue	parser/golang_lexer.go	/^	GolangLexerContinue             = 21$/;"	c	package:parser
GolangLexerDeclareAndAssign	parser/golang_lexer.go	/^	GolangLexerDeclareAndAssign     = 57$/;"	c	package:parser
GolangLexerDefault	parser/golang_lexer.go	/^	GolangLexerDefault              = 2$/;"	c	package:parser
GolangLexerDefer	parser/golang_lexer.go	/^	GolangLexerDefer                = 7$/;"	c	package:parser
GolangLexerDivide	parser/golang_lexer.go	/^	GolangLexerDivide               = 39$/;"	c	package:parser
GolangLexerDot	parser/golang_lexer.go	/^	GolangLexerDot                  = 58$/;"	c	package:parser
GolangLexerEllipsis	parser/golang_lexer.go	/^	GolangLexerEllipsis             = 59$/;"	c	package:parser
GolangLexerElse	parser/golang_lexer.go	/^	GolangLexerElse                 = 12$/;"	c	package:parser
GolangLexerEquals_	parser/golang_lexer.go	/^	GolangLexerEquals_              = 28$/;"	c	package:parser
GolangLexerFLOAT_LIT	parser/golang_lexer.go	/^	GolangLexerFLOAT_LIT            = 65$/;"	c	package:parser
GolangLexerFallthrough	parser/golang_lexer.go	/^	GolangLexerFallthrough          = 17$/;"	c	package:parser
GolangLexerFor	parser/golang_lexer.go	/^	GolangLexerFor                  = 22$/;"	c	package:parser
GolangLexerFunc	parser/golang_lexer.go	/^	GolangLexerFunc                 = 3$/;"	c	package:parser
GolangLexerGo	parser/golang_lexer.go	/^	GolangLexerGo                   = 8$/;"	c	package:parser
GolangLexerGoto	parser/golang_lexer.go	/^	GolangLexerGoto                 = 13$/;"	c	package:parser
GolangLexerGreaterThan	parser/golang_lexer.go	/^	GolangLexerGreaterThan          = 32$/;"	c	package:parser
GolangLexerGreaterThanEquals	parser/golang_lexer.go	/^	GolangLexerGreaterThanEquals    = 33$/;"	c	package:parser
GolangLexerIDENTIFIER	parser/golang_lexer.go	/^	GolangLexerIDENTIFIER           = 62$/;"	c	package:parser
GolangLexerIMAGINARY_LIT	parser/golang_lexer.go	/^	GolangLexerIMAGINARY_LIT        = 66$/;"	c	package:parser
GolangLexerINT_LIT	parser/golang_lexer.go	/^	GolangLexerINT_LIT              = 64$/;"	c	package:parser
GolangLexerIf	parser/golang_lexer.go	/^	GolangLexerIf                   = 18$/;"	c	package:parser
GolangLexerImport	parser/golang_lexer.go	/^	GolangLexerImport               = 23$/;"	c	package:parser
GolangLexerInterface	parser/golang_lexer.go	/^	GolangLexerInterface            = 4$/;"	c	package:parser
GolangLexerLINE_COMMENT	parser/golang_lexer.go	/^	GolangLexerLINE_COMMENT         = 74$/;"	c	package:parser
GolangLexerLITTLE_U_VALUE	parser/golang_lexer.go	/^	GolangLexerLITTLE_U_VALUE       = 68$/;"	c	package:parser
GolangLexerLeftShiftArithmetic	parser/golang_lexer.go	/^	GolangLexerLeftShiftArithmetic  = 41$/;"	c	package:parser
GolangLexerLessThan	parser/golang_lexer.go	/^	GolangLexerLessThan             = 30$/;"	c	package:parser
GolangLexerLessThanEquals	parser/golang_lexer.go	/^	GolangLexerLessThanEquals       = 31$/;"	c	package:parser
GolangLexerMap	parser/golang_lexer.go	/^	GolangLexerMap                  = 9$/;"	c	package:parser
GolangLexerMinus	parser/golang_lexer.go	/^	GolangLexerMinus                = 35$/;"	c	package:parser
GolangLexerMinusMinus	parser/golang_lexer.go	/^	GolangLexerMinusMinus           = 61$/;"	c	package:parser
GolangLexerModulus	parser/golang_lexer.go	/^	GolangLexerModulus              = 40$/;"	c	package:parser
GolangLexerMultiply	parser/golang_lexer.go	/^	GolangLexerMultiply             = 38$/;"	c	package:parser
GolangLexerNot	parser/golang_lexer.go	/^	GolangLexerNot                  = 45$/;"	c	package:parser
GolangLexerNotEquals	parser/golang_lexer.go	/^	GolangLexerNotEquals            = 29$/;"	c	package:parser
GolangLexerOpenBrace	parser/golang_lexer.go	/^	GolangLexerOpenBrace            = 49$/;"	c	package:parser
GolangLexerOpenBracket	parser/golang_lexer.go	/^	GolangLexerOpenBracket          = 51$/;"	c	package:parser
GolangLexerOpenParen	parser/golang_lexer.go	/^	GolangLexerOpenParen            = 47$/;"	c	package:parser
GolangLexerOr	parser/golang_lexer.go	/^	GolangLexerOr                   = 26$/;"	c	package:parser
GolangLexerPackage	parser/golang_lexer.go	/^	GolangLexerPackage              = 14$/;"	c	package:parser
GolangLexerPlus	parser/golang_lexer.go	/^	GolangLexerPlus                 = 34$/;"	c	package:parser
GolangLexerPlusPlus	parser/golang_lexer.go	/^	GolangLexerPlusPlus             = 60$/;"	c	package:parser
GolangLexerRUNE_LIT	parser/golang_lexer.go	/^	GolangLexerRUNE_LIT             = 67$/;"	c	package:parser
GolangLexerRange	parser/golang_lexer.go	/^	GolangLexerRange                = 19$/;"	c	package:parser
GolangLexerReturn	parser/golang_lexer.go	/^	GolangLexerReturn               = 24$/;"	c	package:parser
GolangLexerRightShiftArithmetic	parser/golang_lexer.go	/^	GolangLexerRightShiftArithmetic = 42$/;"	c	package:parser
GolangLexerSTRING_LIT	parser/golang_lexer.go	/^	GolangLexerSTRING_LIT           = 70$/;"	c	package:parser
GolangLexerSelect	parser/golang_lexer.go	/^	GolangLexerSelect               = 5$/;"	c	package:parser
GolangLexerSemiColon	parser/golang_lexer.go	/^	GolangLexerSemiColon            = 54$/;"	c	package:parser
GolangLexerStruct	parser/golang_lexer.go	/^	GolangLexerStruct               = 10$/;"	c	package:parser
GolangLexerSwitch	parser/golang_lexer.go	/^	GolangLexerSwitch               = 15$/;"	c	package:parser
GolangLexerTERMINATOR	parser/golang_lexer.go	/^	GolangLexerTERMINATOR           = 73$/;"	c	package:parser
GolangLexerType	parser/golang_lexer.go	/^	GolangLexerType                 = 20$/;"	c	package:parser
GolangLexerVar	parser/golang_lexer.go	/^	GolangLexerVar                  = 25$/;"	c	package:parser
GolangLexerWS	parser/golang_lexer.go	/^	GolangLexerWS                   = 71$/;"	c	package:parser
GolangParser	parser/golang_parser.go	/^type GolangParser struct {$/;"	s	package:parser
GolangParserAnd	parser/golang_parser.go	/^	GolangParserAnd                  = 27$/;"	c	package:parser
GolangParserAssign	parser/golang_parser.go	/^	GolangParserAssign               = 56$/;"	c	package:parser
GolangParserBIG_U_VALUE	parser/golang_parser.go	/^	GolangParserBIG_U_VALUE          = 69$/;"	c	package:parser
GolangParserBINARY_OP	parser/golang_parser.go	/^	GolangParserBINARY_OP            = 63$/;"	c	package:parser
GolangParserBitAnd	parser/golang_parser.go	/^	GolangParserBitAnd               = 43$/;"	c	package:parser
GolangParserBitClear	parser/golang_parser.go	/^	GolangParserBitClear             = 44$/;"	c	package:parser
GolangParserBitOr	parser/golang_parser.go	/^	GolangParserBitOr                = 36$/;"	c	package:parser
GolangParserBitXor	parser/golang_parser.go	/^	GolangParserBitXor               = 37$/;"	c	package:parser
GolangParserBreak	parser/golang_parser.go	/^	GolangParserBreak                = 1$/;"	c	package:parser
GolangParserCOMMENT	parser/golang_parser.go	/^	GolangParserCOMMENT              = 72$/;"	c	package:parser
GolangParserCase	parser/golang_parser.go	/^	GolangParserCase                 = 6$/;"	c	package:parser
GolangParserChan	parser/golang_parser.go	/^	GolangParserChan                 = 11$/;"	c	package:parser
GolangParserChanOp	parser/golang_parser.go	/^	GolangParserChanOp               = 46$/;"	c	package:parser
GolangParserCloseBrace	parser/golang_parser.go	/^	GolangParserCloseBrace           = 50$/;"	c	package:parser
GolangParserCloseBracket	parser/golang_parser.go	/^	GolangParserCloseBracket         = 52$/;"	c	package:parser
GolangParserCloseParen	parser/golang_parser.go	/^	GolangParserCloseParen           = 48$/;"	c	package:parser
GolangParserColon	parser/golang_parser.go	/^	GolangParserColon                = 53$/;"	c	package:parser
GolangParserComma	parser/golang_parser.go	/^	GolangParserComma                = 55$/;"	c	package:parser
GolangParserConst	parser/golang_parser.go	/^	GolangParserConst                = 16$/;"	c	package:parser
GolangParserContinue	parser/golang_parser.go	/^	GolangParserContinue             = 21$/;"	c	package:parser
GolangParserDeclareAndAssign	parser/golang_parser.go	/^	GolangParserDeclareAndAssign     = 57$/;"	c	package:parser
GolangParserDefault	parser/golang_parser.go	/^	GolangParserDefault              = 2$/;"	c	package:parser
GolangParserDefer	parser/golang_parser.go	/^	GolangParserDefer                = 7$/;"	c	package:parser
GolangParserDivide	parser/golang_parser.go	/^	GolangParserDivide               = 39$/;"	c	package:parser
GolangParserDot	parser/golang_parser.go	/^	GolangParserDot                  = 58$/;"	c	package:parser
GolangParserEOF	parser/golang_parser.go	/^	GolangParserEOF                  = antlr.TokenEOF$/;"	c	package:parser
GolangParserEllipsis	parser/golang_parser.go	/^	GolangParserEllipsis             = 59$/;"	c	package:parser
GolangParserElse	parser/golang_parser.go	/^	GolangParserElse                 = 12$/;"	c	package:parser
GolangParserEquals_	parser/golang_parser.go	/^	GolangParserEquals_              = 28$/;"	c	package:parser
GolangParserFLOAT_LIT	parser/golang_parser.go	/^	GolangParserFLOAT_LIT            = 65$/;"	c	package:parser
GolangParserFallthrough	parser/golang_parser.go	/^	GolangParserFallthrough          = 17$/;"	c	package:parser
GolangParserFor	parser/golang_parser.go	/^	GolangParserFor                  = 22$/;"	c	package:parser
GolangParserFunc	parser/golang_parser.go	/^	GolangParserFunc                 = 3$/;"	c	package:parser
GolangParserGo	parser/golang_parser.go	/^	GolangParserGo                   = 8$/;"	c	package:parser
GolangParserGoto	parser/golang_parser.go	/^	GolangParserGoto                 = 13$/;"	c	package:parser
GolangParserGreaterThan	parser/golang_parser.go	/^	GolangParserGreaterThan          = 32$/;"	c	package:parser
GolangParserGreaterThanEquals	parser/golang_parser.go	/^	GolangParserGreaterThanEquals    = 33$/;"	c	package:parser
GolangParserIDENTIFIER	parser/golang_parser.go	/^	GolangParserIDENTIFIER           = 62$/;"	c	package:parser
GolangParserIMAGINARY_LIT	parser/golang_parser.go	/^	GolangParserIMAGINARY_LIT        = 66$/;"	c	package:parser
GolangParserINT_LIT	parser/golang_parser.go	/^	GolangParserINT_LIT              = 64$/;"	c	package:parser
GolangParserIf	parser/golang_parser.go	/^	GolangParserIf                   = 18$/;"	c	package:parser
GolangParserImport	parser/golang_parser.go	/^	GolangParserImport               = 23$/;"	c	package:parser
GolangParserInterface	parser/golang_parser.go	/^	GolangParserInterface            = 4$/;"	c	package:parser
GolangParserLINE_COMMENT	parser/golang_parser.go	/^	GolangParserLINE_COMMENT         = 74$/;"	c	package:parser
GolangParserLITTLE_U_VALUE	parser/golang_parser.go	/^	GolangParserLITTLE_U_VALUE       = 68$/;"	c	package:parser
GolangParserLeftShiftArithmetic	parser/golang_parser.go	/^	GolangParserLeftShiftArithmetic  = 41$/;"	c	package:parser
GolangParserLessThan	parser/golang_parser.go	/^	GolangParserLessThan             = 30$/;"	c	package:parser
GolangParserLessThanEquals	parser/golang_parser.go	/^	GolangParserLessThanEquals       = 31$/;"	c	package:parser
GolangParserListener	parser/golangparser_listener.go	/^type GolangParserListener interface {$/;"	i	package:parser	inherits:antlr.ParseTreeListener
GolangParserMap	parser/golang_parser.go	/^	GolangParserMap                  = 9$/;"	c	package:parser
GolangParserMinus	parser/golang_parser.go	/^	GolangParserMinus                = 35$/;"	c	package:parser
GolangParserMinusMinus	parser/golang_parser.go	/^	GolangParserMinusMinus           = 61$/;"	c	package:parser
GolangParserModulus	parser/golang_parser.go	/^	GolangParserModulus              = 40$/;"	c	package:parser
GolangParserMultiply	parser/golang_parser.go	/^	GolangParserMultiply             = 38$/;"	c	package:parser
GolangParserNot	parser/golang_parser.go	/^	GolangParserNot                  = 45$/;"	c	package:parser
GolangParserNotEquals	parser/golang_parser.go	/^	GolangParserNotEquals            = 29$/;"	c	package:parser
GolangParserOpenBrace	parser/golang_parser.go	/^	GolangParserOpenBrace            = 49$/;"	c	package:parser
GolangParserOpenBracket	parser/golang_parser.go	/^	GolangParserOpenBracket          = 51$/;"	c	package:parser
GolangParserOpenParen	parser/golang_parser.go	/^	GolangParserOpenParen            = 47$/;"	c	package:parser
GolangParserOr	parser/golang_parser.go	/^	GolangParserOr                   = 26$/;"	c	package:parser
GolangParserPackage	parser/golang_parser.go	/^	GolangParserPackage              = 14$/;"	c	package:parser
GolangParserPlus	parser/golang_parser.go	/^	GolangParserPlus                 = 34$/;"	c	package:parser
GolangParserPlusPlus	parser/golang_parser.go	/^	GolangParserPlusPlus             = 60$/;"	c	package:parser
GolangParserRULE_anonymousField	parser/golang_parser.go	/^	GolangParserRULE_anonymousField  = 87$/;"	c	package:parser
GolangParserRULE_arguments	parser/golang_parser.go	/^	GolangParserRULE_arguments       = 94$/;"	c	package:parser
GolangParserRULE_arrayLength	parser/golang_parser.go	/^	GolangParserRULE_arrayLength     = 59$/;"	c	package:parser
GolangParserRULE_arrayType	parser/golang_parser.go	/^	GolangParserRULE_arrayType       = 58$/;"	c	package:parser
GolangParserRULE_assign_op	parser/golang_parser.go	/^	GolangParserRULE_assign_op       = 27$/;"	c	package:parser
GolangParserRULE_assignment	parser/golang_parser.go	/^	GolangParserRULE_assignment      = 26$/;"	c	package:parser
GolangParserRULE_basicLit	parser/golang_parser.go	/^	GolangParserRULE_basicLit        = 75$/;"	c	package:parser
GolangParserRULE_block	parser/golang_parser.go	/^	GolangParserRULE_block           = 19$/;"	c	package:parser
GolangParserRULE_breakStmt	parser/golang_parser.go	/^	GolangParserRULE_breakStmt       = 32$/;"	c	package:parser
GolangParserRULE_channelType	parser/golang_parser.go	/^	GolangParserRULE_channelType     = 65$/;"	c	package:parser
GolangParserRULE_commCase	parser/golang_parser.go	/^	GolangParserRULE_commCase        = 49$/;"	c	package:parser
GolangParserRULE_commClause	parser/golang_parser.go	/^	GolangParserRULE_commClause      = 48$/;"	c	package:parser
GolangParserRULE_compositeLit	parser/golang_parser.go	/^	GolangParserRULE_compositeLit    = 78$/;"	c	package:parser
GolangParserRULE_constDecl	parser/golang_parser.go	/^	GolangParserRULE_constDecl       = 7$/;"	c	package:parser
GolangParserRULE_constSpec	parser/golang_parser.go	/^	GolangParserRULE_constSpec       = 8$/;"	c	package:parser
GolangParserRULE_continueStmt	parser/golang_parser.go	/^	GolangParserRULE_continueStmt    = 33$/;"	c	package:parser
GolangParserRULE_conversion	parser/golang_parser.go	/^	GolangParserRULE_conversion      = 99$/;"	c	package:parser
GolangParserRULE_declaration	parser/golang_parser.go	/^	GolangParserRULE_declaration     = 6$/;"	c	package:parser
GolangParserRULE_deferStmt	parser/golang_parser.go	/^	GolangParserRULE_deferStmt       = 36$/;"	c	package:parser
GolangParserRULE_element	parser/golang_parser.go	/^	GolangParserRULE_element         = 84$/;"	c	package:parser
GolangParserRULE_elementList	parser/golang_parser.go	/^	GolangParserRULE_elementList     = 81$/;"	c	package:parser
GolangParserRULE_elementType	parser/golang_parser.go	/^	GolangParserRULE_elementType     = 60$/;"	c	package:parser
GolangParserRULE_emptyStmt	parser/golang_parser.go	/^	GolangParserRULE_emptyStmt       = 29$/;"	c	package:parser
GolangParserRULE_eos	parser/golang_parser.go	/^	GolangParserRULE_eos             = 100$/;"	c	package:parser
GolangParserRULE_exprCaseClause	parser/golang_parser.go	/^	GolangParserRULE_exprCaseClause  = 40$/;"	c	package:parser
GolangParserRULE_exprSwitchCase	parser/golang_parser.go	/^	GolangParserRULE_exprSwitchCase  = 41$/;"	c	package:parser
GolangParserRULE_exprSwitchStmt	parser/golang_parser.go	/^	GolangParserRULE_exprSwitchStmt  = 39$/;"	c	package:parser
GolangParserRULE_expression	parser/golang_parser.go	/^	GolangParserRULE_expression      = 97$/;"	c	package:parser
GolangParserRULE_expressionList	parser/golang_parser.go	/^	GolangParserRULE_expressionList  = 10$/;"	c	package:parser
GolangParserRULE_expressionStmt	parser/golang_parser.go	/^	GolangParserRULE_expressionStmt  = 23$/;"	c	package:parser
GolangParserRULE_fallthroughStmt	parser/golang_parser.go	/^	GolangParserRULE_fallthroughStmt = 35$/;"	c	package:parser
GolangParserRULE_fieldDecl	parser/golang_parser.go	/^	GolangParserRULE_fieldDecl       = 86$/;"	c	package:parser
GolangParserRULE_forClause	parser/golang_parser.go	/^	GolangParserRULE_forClause       = 52$/;"	c	package:parser
GolangParserRULE_forStmt	parser/golang_parser.go	/^	GolangParserRULE_forStmt         = 51$/;"	c	package:parser
GolangParserRULE_function	parser/golang_parser.go	/^	GolangParserRULE_function        = 14$/;"	c	package:parser
GolangParserRULE_functionDecl	parser/golang_parser.go	/^	GolangParserRULE_functionDecl    = 13$/;"	c	package:parser
GolangParserRULE_functionLit	parser/golang_parser.go	/^	GolangParserRULE_functionLit     = 88$/;"	c	package:parser
GolangParserRULE_functionType	parser/golang_parser.go	/^	GolangParserRULE_functionType    = 67$/;"	c	package:parser
GolangParserRULE_goStmt	parser/golang_parser.go	/^	GolangParserRULE_goStmt          = 54$/;"	c	package:parser
GolangParserRULE_gotoStmt	parser/golang_parser.go	/^	GolangParserRULE_gotoStmt        = 34$/;"	c	package:parser
GolangParserRULE_identifierList	parser/golang_parser.go	/^	GolangParserRULE_identifierList  = 9$/;"	c	package:parser
GolangParserRULE_ifStmt	parser/golang_parser.go	/^	GolangParserRULE_ifStmt          = 37$/;"	c	package:parser
GolangParserRULE_importDecl	parser/golang_parser.go	/^	GolangParserRULE_importDecl      = 2$/;"	c	package:parser
GolangParserRULE_importPath	parser/golang_parser.go	/^	GolangParserRULE_importPath      = 4$/;"	c	package:parser
GolangParserRULE_importSpec	parser/golang_parser.go	/^	GolangParserRULE_importSpec      = 3$/;"	c	package:parser
GolangParserRULE_incDecStmt	parser/golang_parser.go	/^	GolangParserRULE_incDecStmt      = 25$/;"	c	package:parser
GolangParserRULE_index	parser/golang_parser.go	/^	GolangParserRULE_index           = 91$/;"	c	package:parser
GolangParserRULE_interfaceType	parser/golang_parser.go	/^	GolangParserRULE_interfaceType   = 62$/;"	c	package:parser
GolangParserRULE_key	parser/golang_parser.go	/^	GolangParserRULE_key             = 83$/;"	c	package:parser
GolangParserRULE_keyedElement	parser/golang_parser.go	/^	GolangParserRULE_keyedElement    = 82$/;"	c	package:parser
GolangParserRULE_labeledStmt	parser/golang_parser.go	/^	GolangParserRULE_labeledStmt     = 30$/;"	c	package:parser
GolangParserRULE_literal	parser/golang_parser.go	/^	GolangParserRULE_literal         = 74$/;"	c	package:parser
GolangParserRULE_literalType	parser/golang_parser.go	/^	GolangParserRULE_literalType     = 79$/;"	c	package:parser
GolangParserRULE_literalValue	parser/golang_parser.go	/^	GolangParserRULE_literalValue    = 80$/;"	c	package:parser
GolangParserRULE_mapType	parser/golang_parser.go	/^	GolangParserRULE_mapType         = 64$/;"	c	package:parser
GolangParserRULE_methodDecl	parser/golang_parser.go	/^	GolangParserRULE_methodDecl      = 15$/;"	c	package:parser
GolangParserRULE_methodExpr	parser/golang_parser.go	/^	GolangParserRULE_methodExpr      = 95$/;"	c	package:parser
GolangParserRULE_methodSpec	parser/golang_parser.go	/^	GolangParserRULE_methodSpec      = 66$/;"	c	package:parser
GolangParserRULE_operand	parser/golang_parser.go	/^	GolangParserRULE_operand         = 73$/;"	c	package:parser
GolangParserRULE_operandName	parser/golang_parser.go	/^	GolangParserRULE_operandName     = 76$/;"	c	package:parser
GolangParserRULE_packageClause	parser/golang_parser.go	/^	GolangParserRULE_packageClause   = 1$/;"	c	package:parser
GolangParserRULE_parameterDecl	parser/golang_parser.go	/^	GolangParserRULE_parameterDecl   = 72$/;"	c	package:parser
GolangParserRULE_parameterList	parser/golang_parser.go	/^	GolangParserRULE_parameterList   = 71$/;"	c	package:parser
GolangParserRULE_parameters	parser/golang_parser.go	/^	GolangParserRULE_parameters      = 70$/;"	c	package:parser
GolangParserRULE_pointerType	parser/golang_parser.go	/^	GolangParserRULE_pointerType     = 61$/;"	c	package:parser
GolangParserRULE_primaryExpr	parser/golang_parser.go	/^	GolangParserRULE_primaryExpr     = 89$/;"	c	package:parser
GolangParserRULE_qualifiedIdent	parser/golang_parser.go	/^	GolangParserRULE_qualifiedIdent  = 77$/;"	c	package:parser
GolangParserRULE_rangeClause	parser/golang_parser.go	/^	GolangParserRULE_rangeClause     = 53$/;"	c	package:parser
GolangParserRULE_receiver	parser/golang_parser.go	/^	GolangParserRULE_receiver        = 16$/;"	c	package:parser
GolangParserRULE_receiverType	parser/golang_parser.go	/^	GolangParserRULE_receiverType    = 96$/;"	c	package:parser
GolangParserRULE_recvStmt	parser/golang_parser.go	/^	GolangParserRULE_recvStmt        = 50$/;"	c	package:parser
GolangParserRULE_result	parser/golang_parser.go	/^	GolangParserRULE_result          = 69$/;"	c	package:parser
GolangParserRULE_returnStmt	parser/golang_parser.go	/^	GolangParserRULE_returnStmt      = 31$/;"	c	package:parser
GolangParserRULE_selectStmt	parser/golang_parser.go	/^	GolangParserRULE_selectStmt      = 47$/;"	c	package:parser
GolangParserRULE_selector	parser/golang_parser.go	/^	GolangParserRULE_selector        = 90$/;"	c	package:parser
GolangParserRULE_sendStmt	parser/golang_parser.go	/^	GolangParserRULE_sendStmt        = 24$/;"	c	package:parser
GolangParserRULE_shortVarDecl	parser/golang_parser.go	/^	GolangParserRULE_shortVarDecl    = 28$/;"	c	package:parser
GolangParserRULE_signature	parser/golang_parser.go	/^	GolangParserRULE_signature       = 68$/;"	c	package:parser
GolangParserRULE_simpleStmt	parser/golang_parser.go	/^	GolangParserRULE_simpleStmt      = 22$/;"	c	package:parser
GolangParserRULE_slice	parser/golang_parser.go	/^	GolangParserRULE_slice           = 92$/;"	c	package:parser
GolangParserRULE_sliceType	parser/golang_parser.go	/^	GolangParserRULE_sliceType       = 63$/;"	c	package:parser
GolangParserRULE_sourceFile	parser/golang_parser.go	/^	GolangParserRULE_sourceFile      = 0$/;"	c	package:parser
GolangParserRULE_statement	parser/golang_parser.go	/^	GolangParserRULE_statement       = 21$/;"	c	package:parser
GolangParserRULE_statementList	parser/golang_parser.go	/^	GolangParserRULE_statementList   = 20$/;"	c	package:parser
GolangParserRULE_structType	parser/golang_parser.go	/^	GolangParserRULE_structType      = 85$/;"	c	package:parser
GolangParserRULE_switchStmt	parser/golang_parser.go	/^	GolangParserRULE_switchStmt      = 38$/;"	c	package:parser
GolangParserRULE_topLevelDecl	parser/golang_parser.go	/^	GolangParserRULE_topLevelDecl    = 5$/;"	c	package:parser
GolangParserRULE_typeAssertion	parser/golang_parser.go	/^	GolangParserRULE_typeAssertion   = 93$/;"	c	package:parser
GolangParserRULE_typeCaseClause	parser/golang_parser.go	/^	GolangParserRULE_typeCaseClause  = 44$/;"	c	package:parser
GolangParserRULE_typeDecl	parser/golang_parser.go	/^	GolangParserRULE_typeDecl        = 11$/;"	c	package:parser
GolangParserRULE_typeList	parser/golang_parser.go	/^	GolangParserRULE_typeList        = 46$/;"	c	package:parser
GolangParserRULE_typeLit	parser/golang_parser.go	/^	GolangParserRULE_typeLit         = 57$/;"	c	package:parser
GolangParserRULE_typeName	parser/golang_parser.go	/^	GolangParserRULE_typeName        = 56$/;"	c	package:parser
GolangParserRULE_typeSpec	parser/golang_parser.go	/^	GolangParserRULE_typeSpec        = 12$/;"	c	package:parser
GolangParserRULE_typeSwitchCase	parser/golang_parser.go	/^	GolangParserRULE_typeSwitchCase  = 45$/;"	c	package:parser
GolangParserRULE_typeSwitchGuard	parser/golang_parser.go	/^	GolangParserRULE_typeSwitchGuard = 43$/;"	c	package:parser
GolangParserRULE_typeSwitchStmt	parser/golang_parser.go	/^	GolangParserRULE_typeSwitchStmt  = 42$/;"	c	package:parser
GolangParserRULE_type_	parser/golang_parser.go	/^	GolangParserRULE_type_           = 55$/;"	c	package:parser
GolangParserRULE_unaryExpr	parser/golang_parser.go	/^	GolangParserRULE_unaryExpr       = 98$/;"	c	package:parser
GolangParserRULE_varDecl	parser/golang_parser.go	/^	GolangParserRULE_varDecl         = 17$/;"	c	package:parser
GolangParserRULE_varSpec	parser/golang_parser.go	/^	GolangParserRULE_varSpec         = 18$/;"	c	package:parser
GolangParserRUNE_LIT	parser/golang_parser.go	/^	GolangParserRUNE_LIT             = 67$/;"	c	package:parser
GolangParserRange	parser/golang_parser.go	/^	GolangParserRange                = 19$/;"	c	package:parser
GolangParserReturn	parser/golang_parser.go	/^	GolangParserReturn               = 24$/;"	c	package:parser
GolangParserRightShiftArithmetic	parser/golang_parser.go	/^	GolangParserRightShiftArithmetic = 42$/;"	c	package:parser
GolangParserSTRING_LIT	parser/golang_parser.go	/^	GolangParserSTRING_LIT           = 70$/;"	c	package:parser
GolangParserSelect	parser/golang_parser.go	/^	GolangParserSelect               = 5$/;"	c	package:parser
GolangParserSemiColon	parser/golang_parser.go	/^	GolangParserSemiColon            = 54$/;"	c	package:parser
GolangParserStruct	parser/golang_parser.go	/^	GolangParserStruct               = 10$/;"	c	package:parser
GolangParserSwitch	parser/golang_parser.go	/^	GolangParserSwitch               = 15$/;"	c	package:parser
GolangParserTERMINATOR	parser/golang_parser.go	/^	GolangParserTERMINATOR           = 73$/;"	c	package:parser
GolangParserType	parser/golang_parser.go	/^	GolangParserType                 = 20$/;"	c	package:parser
GolangParserVar	parser/golang_parser.go	/^	GolangParserVar                  = 25$/;"	c	package:parser
GolangParserWS	parser/golang_parser.go	/^	GolangParserWS                   = 71$/;"	c	package:parser
Goto	parser/golang_parser.go	/^func (s *GotoStmtContext) Goto() antlr.TerminalNode {$/;"	f	struct:parser.GotoStmtContext	typeref:typename:antlr.TerminalNode	signature:()
GotoStmt	parser/golang_parser.go	/^func (p *GolangParser) GotoStmt() (localctx IGotoStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IGotoStmtContext)	signature:()
GotoStmt	parser/golang_parser.go	/^func (s *StatementContext) GotoStmt() IGotoStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:IGotoStmtContext	signature:()
GotoStmtContext	parser/golang_parser.go	/^type GotoStmtContext struct {$/;"	s	package:parser
GreaterThan	parser/golang_parser.go	/^func (s *ExpressionContext) GreaterThan() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
GreaterThanEquals	parser/golang_parser.go	/^func (s *ExpressionContext) GreaterThanEquals() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
IAnonymousFieldContext	parser/golang_parser.go	/^type IAnonymousFieldContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IArgumentsContext	parser/golang_parser.go	/^type IArgumentsContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IArrayLengthContext	parser/golang_parser.go	/^type IArrayLengthContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IArrayTypeContext	parser/golang_parser.go	/^type IArrayTypeContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IAssign_opContext	parser/golang_parser.go	/^type IAssign_opContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IAssignmentContext	parser/golang_parser.go	/^type IAssignmentContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IBasicLitContext	parser/golang_parser.go	/^type IBasicLitContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IBlockContext	parser/golang_parser.go	/^type IBlockContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IBreakStmtContext	parser/golang_parser.go	/^type IBreakStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IChannelTypeContext	parser/golang_parser.go	/^type IChannelTypeContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ICommCaseContext	parser/golang_parser.go	/^type ICommCaseContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ICommClauseContext	parser/golang_parser.go	/^type ICommClauseContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ICompositeLitContext	parser/golang_parser.go	/^type ICompositeLitContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IConstDeclContext	parser/golang_parser.go	/^type IConstDeclContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IConstSpecContext	parser/golang_parser.go	/^type IConstSpecContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IContinueStmtContext	parser/golang_parser.go	/^type IContinueStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IConversionContext	parser/golang_parser.go	/^type IConversionContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IDENTIFIER	parser/golang_parser.go	/^func (s *BreakStmtContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.BreakStmtContext	typeref:typename:antlr.TerminalNode	signature:()
IDENTIFIER	parser/golang_parser.go	/^func (s *ContinueStmtContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.ContinueStmtContext	typeref:typename:antlr.TerminalNode	signature:()
IDENTIFIER	parser/golang_parser.go	/^func (s *FunctionDeclContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.FunctionDeclContext	typeref:typename:antlr.TerminalNode	signature:()
IDENTIFIER	parser/golang_parser.go	/^func (s *GotoStmtContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.GotoStmtContext	typeref:typename:antlr.TerminalNode	signature:()
IDENTIFIER	parser/golang_parser.go	/^func (s *IdentifierListContext) IDENTIFIER(i int) antlr.TerminalNode {$/;"	f	struct:parser.IdentifierListContext	typeref:typename:antlr.TerminalNode	signature:(i int)
IDENTIFIER	parser/golang_parser.go	/^func (s *ImportSpecContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.ImportSpecContext	typeref:typename:antlr.TerminalNode	signature:()
IDENTIFIER	parser/golang_parser.go	/^func (s *KeyContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.KeyContext	typeref:typename:antlr.TerminalNode	signature:()
IDENTIFIER	parser/golang_parser.go	/^func (s *LabeledStmtContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.LabeledStmtContext	typeref:typename:antlr.TerminalNode	signature:()
IDENTIFIER	parser/golang_parser.go	/^func (s *MethodDeclContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.MethodDeclContext	typeref:typename:antlr.TerminalNode	signature:()
IDENTIFIER	parser/golang_parser.go	/^func (s *MethodExprContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.MethodExprContext	typeref:typename:antlr.TerminalNode	signature:()
IDENTIFIER	parser/golang_parser.go	/^func (s *MethodSpecContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.MethodSpecContext	typeref:typename:antlr.TerminalNode	signature:()
IDENTIFIER	parser/golang_parser.go	/^func (s *OperandNameContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.OperandNameContext	typeref:typename:antlr.TerminalNode	signature:()
IDENTIFIER	parser/golang_parser.go	/^func (s *PackageClauseContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.PackageClauseContext	typeref:typename:antlr.TerminalNode	signature:()
IDENTIFIER	parser/golang_parser.go	/^func (s *QualifiedIdentContext) IDENTIFIER(i int) antlr.TerminalNode {$/;"	f	struct:parser.QualifiedIdentContext	typeref:typename:antlr.TerminalNode	signature:(i int)
IDENTIFIER	parser/golang_parser.go	/^func (s *SelectorContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.SelectorContext	typeref:typename:antlr.TerminalNode	signature:()
IDENTIFIER	parser/golang_parser.go	/^func (s *TypeNameContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.TypeNameContext	typeref:typename:antlr.TerminalNode	signature:()
IDENTIFIER	parser/golang_parser.go	/^func (s *TypeSpecContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.TypeSpecContext	typeref:typename:antlr.TerminalNode	signature:()
IDENTIFIER	parser/golang_parser.go	/^func (s *TypeSwitchGuardContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.TypeSwitchGuardContext	typeref:typename:antlr.TerminalNode	signature:()
IDeclarationContext	parser/golang_parser.go	/^type IDeclarationContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IDeferStmtContext	parser/golang_parser.go	/^type IDeferStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IElementContext	parser/golang_parser.go	/^type IElementContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IElementListContext	parser/golang_parser.go	/^type IElementListContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IElementTypeContext	parser/golang_parser.go	/^type IElementTypeContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IEmptyStmtContext	parser/golang_parser.go	/^type IEmptyStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IEosContext	parser/golang_parser.go	/^type IEosContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IExprCaseClauseContext	parser/golang_parser.go	/^type IExprCaseClauseContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IExprSwitchCaseContext	parser/golang_parser.go	/^type IExprSwitchCaseContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IExprSwitchStmtContext	parser/golang_parser.go	/^type IExprSwitchStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IExpressionContext	parser/golang_parser.go	/^type IExpressionContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IExpressionListContext	parser/golang_parser.go	/^type IExpressionListContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IExpressionStmtContext	parser/golang_parser.go	/^type IExpressionStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IFallthroughStmtContext	parser/golang_parser.go	/^type IFallthroughStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IFieldDeclContext	parser/golang_parser.go	/^type IFieldDeclContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IForClauseContext	parser/golang_parser.go	/^type IForClauseContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IForStmtContext	parser/golang_parser.go	/^type IForStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IFunctionContext	parser/golang_parser.go	/^type IFunctionContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IFunctionDeclContext	parser/golang_parser.go	/^type IFunctionDeclContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IFunctionLitContext	parser/golang_parser.go	/^type IFunctionLitContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IFunctionTypeContext	parser/golang_parser.go	/^type IFunctionTypeContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IGoStmtContext	parser/golang_parser.go	/^type IGoStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IGotoStmtContext	parser/golang_parser.go	/^type IGotoStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IIdentifierListContext	parser/golang_parser.go	/^type IIdentifierListContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IIfStmtContext	parser/golang_parser.go	/^type IIfStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IImportDeclContext	parser/golang_parser.go	/^type IImportDeclContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IImportPathContext	parser/golang_parser.go	/^type IImportPathContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IImportSpecContext	parser/golang_parser.go	/^type IImportSpecContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IIncDecStmtContext	parser/golang_parser.go	/^type IIncDecStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IIndexContext	parser/golang_parser.go	/^type IIndexContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IInterfaceTypeContext	parser/golang_parser.go	/^type IInterfaceTypeContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IKeyContext	parser/golang_parser.go	/^type IKeyContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IKeyedElementContext	parser/golang_parser.go	/^type IKeyedElementContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ILabeledStmtContext	parser/golang_parser.go	/^type ILabeledStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ILiteralContext	parser/golang_parser.go	/^type ILiteralContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ILiteralTypeContext	parser/golang_parser.go	/^type ILiteralTypeContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ILiteralValueContext	parser/golang_parser.go	/^type ILiteralValueContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IMAGINARY_LIT	parser/golang_parser.go	/^func (s *BasicLitContext) IMAGINARY_LIT() antlr.TerminalNode {$/;"	f	struct:parser.BasicLitContext	typeref:typename:antlr.TerminalNode	signature:()
IMapTypeContext	parser/golang_parser.go	/^type IMapTypeContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IMethodDeclContext	parser/golang_parser.go	/^type IMethodDeclContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IMethodExprContext	parser/golang_parser.go	/^type IMethodExprContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IMethodSpecContext	parser/golang_parser.go	/^type IMethodSpecContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
INT_LIT	parser/golang_parser.go	/^func (s *BasicLitContext) INT_LIT() antlr.TerminalNode {$/;"	f	struct:parser.BasicLitContext	typeref:typename:antlr.TerminalNode	signature:()
IOperandContext	parser/golang_parser.go	/^type IOperandContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IOperandNameContext	parser/golang_parser.go	/^type IOperandNameContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IPackageClauseContext	parser/golang_parser.go	/^type IPackageClauseContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IParameterDeclContext	parser/golang_parser.go	/^type IParameterDeclContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IParameterListContext	parser/golang_parser.go	/^type IParameterListContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IParametersContext	parser/golang_parser.go	/^type IParametersContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IPointerTypeContext	parser/golang_parser.go	/^type IPointerTypeContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IPrimaryExprContext	parser/golang_parser.go	/^type IPrimaryExprContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IQualifiedIdentContext	parser/golang_parser.go	/^type IQualifiedIdentContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IRangeClauseContext	parser/golang_parser.go	/^type IRangeClauseContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IReceiverContext	parser/golang_parser.go	/^type IReceiverContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IReceiverTypeContext	parser/golang_parser.go	/^type IReceiverTypeContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IRecvStmtContext	parser/golang_parser.go	/^type IRecvStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IResultContext	parser/golang_parser.go	/^type IResultContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IReturnStmtContext	parser/golang_parser.go	/^type IReturnStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ISelectStmtContext	parser/golang_parser.go	/^type ISelectStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ISelectorContext	parser/golang_parser.go	/^type ISelectorContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ISendStmtContext	parser/golang_parser.go	/^type ISendStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IShortVarDeclContext	parser/golang_parser.go	/^type IShortVarDeclContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ISignatureContext	parser/golang_parser.go	/^type ISignatureContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ISimpleStmtContext	parser/golang_parser.go	/^type ISimpleStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ISliceContext	parser/golang_parser.go	/^type ISliceContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ISliceTypeContext	parser/golang_parser.go	/^type ISliceTypeContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ISourceFileContext	parser/golang_parser.go	/^type ISourceFileContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IStatementContext	parser/golang_parser.go	/^type IStatementContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IStatementListContext	parser/golang_parser.go	/^type IStatementListContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IStructTypeContext	parser/golang_parser.go	/^type IStructTypeContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ISwitchStmtContext	parser/golang_parser.go	/^type ISwitchStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ITopLevelDeclContext	parser/golang_parser.go	/^type ITopLevelDeclContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ITypeAssertionContext	parser/golang_parser.go	/^type ITypeAssertionContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ITypeCaseClauseContext	parser/golang_parser.go	/^type ITypeCaseClauseContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ITypeDeclContext	parser/golang_parser.go	/^type ITypeDeclContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ITypeListContext	parser/golang_parser.go	/^type ITypeListContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ITypeLitContext	parser/golang_parser.go	/^type ITypeLitContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ITypeNameContext	parser/golang_parser.go	/^type ITypeNameContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ITypeSpecContext	parser/golang_parser.go	/^type ITypeSpecContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ITypeSwitchCaseContext	parser/golang_parser.go	/^type ITypeSwitchCaseContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ITypeSwitchGuardContext	parser/golang_parser.go	/^type ITypeSwitchGuardContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
ITypeSwitchStmtContext	parser/golang_parser.go	/^type ITypeSwitchStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IType_Context	parser/golang_parser.go	/^type IType_Context interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IUnaryExprContext	parser/golang_parser.go	/^type IUnaryExprContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IVarDeclContext	parser/golang_parser.go	/^type IVarDeclContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IVarSpecContext	parser/golang_parser.go	/^type IVarSpecContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
IdentifierList	parser/golang_parser.go	/^func (p *GolangParser) IdentifierList() (localctx IIdentifierListContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IIdentifierListContext)	signature:()
IdentifierList	parser/golang_parser.go	/^func (s *ConstSpecContext) IdentifierList() IIdentifierListContext {$/;"	f	struct:parser.ConstSpecContext	typeref:typename:IIdentifierListContext	signature:()
IdentifierList	parser/golang_parser.go	/^func (s *FieldDeclContext) IdentifierList() IIdentifierListContext {$/;"	f	struct:parser.FieldDeclContext	typeref:typename:IIdentifierListContext	signature:()
IdentifierList	parser/golang_parser.go	/^func (s *ParameterDeclContext) IdentifierList() IIdentifierListContext {$/;"	f	struct:parser.ParameterDeclContext	typeref:typename:IIdentifierListContext	signature:()
IdentifierList	parser/golang_parser.go	/^func (s *RangeClauseContext) IdentifierList() IIdentifierListContext {$/;"	f	struct:parser.RangeClauseContext	typeref:typename:IIdentifierListContext	signature:()
IdentifierList	parser/golang_parser.go	/^func (s *RecvStmtContext) IdentifierList() IIdentifierListContext {$/;"	f	struct:parser.RecvStmtContext	typeref:typename:IIdentifierListContext	signature:()
IdentifierList	parser/golang_parser.go	/^func (s *ShortVarDeclContext) IdentifierList() IIdentifierListContext {$/;"	f	struct:parser.ShortVarDeclContext	typeref:typename:IIdentifierListContext	signature:()
IdentifierList	parser/golang_parser.go	/^func (s *VarSpecContext) IdentifierList() IIdentifierListContext {$/;"	f	struct:parser.VarSpecContext	typeref:typename:IIdentifierListContext	signature:()
IdentifierListContext	parser/golang_parser.go	/^type IdentifierListContext struct {$/;"	s	package:parser
If	parser/golang_parser.go	/^func (s *IfStmtContext) If() antlr.TerminalNode {$/;"	f	struct:parser.IfStmtContext	typeref:typename:antlr.TerminalNode	signature:()
IfStmt	parser/golang_parser.go	/^func (p *GolangParser) IfStmt() (localctx IIfStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IIfStmtContext)	signature:()
IfStmt	parser/golang_parser.go	/^func (s *IfStmtContext) IfStmt() IIfStmtContext {$/;"	f	struct:parser.IfStmtContext	typeref:typename:IIfStmtContext	signature:()
IfStmt	parser/golang_parser.go	/^func (s *StatementContext) IfStmt() IIfStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:IIfStmtContext	signature:()
IfStmtContext	parser/golang_parser.go	/^type IfStmtContext struct {$/;"	s	package:parser
Import	parser/golang_parser.go	/^func (s *ImportDeclContext) Import() antlr.TerminalNode {$/;"	f	struct:parser.ImportDeclContext	typeref:typename:antlr.TerminalNode	signature:()
ImportDecl	parser/golang_parser.go	/^func (p *GolangParser) ImportDecl() (localctx IImportDeclContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IImportDeclContext)	signature:()
ImportDecl	parser/golang_parser.go	/^func (s *SourceFileContext) ImportDecl(i int) IImportDeclContext {$/;"	f	struct:parser.SourceFileContext	typeref:typename:IImportDeclContext	signature:(i int)
ImportDeclContext	parser/golang_parser.go	/^type ImportDeclContext struct {$/;"	s	package:parser
ImportPath	parser/golang_parser.go	/^func (p *GolangParser) ImportPath() (localctx IImportPathContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IImportPathContext)	signature:()
ImportPath	parser/golang_parser.go	/^func (s *ImportSpecContext) ImportPath() IImportPathContext {$/;"	f	struct:parser.ImportSpecContext	typeref:typename:IImportPathContext	signature:()
ImportPathContext	parser/golang_parser.go	/^type ImportPathContext struct {$/;"	s	package:parser
ImportSpec	parser/golang_parser.go	/^func (p *GolangParser) ImportSpec() (localctx IImportSpecContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IImportSpecContext)	signature:()
ImportSpec	parser/golang_parser.go	/^func (s *ImportDeclContext) ImportSpec(i int) IImportSpecContext {$/;"	f	struct:parser.ImportDeclContext	typeref:typename:IImportSpecContext	signature:(i int)
ImportSpecContext	parser/golang_parser.go	/^type ImportSpecContext struct {$/;"	s	package:parser
IncDecStmt	parser/golang_parser.go	/^func (p *GolangParser) IncDecStmt() (localctx IIncDecStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IIncDecStmtContext)	signature:()
IncDecStmt	parser/golang_parser.go	/^func (s *SimpleStmtContext) IncDecStmt() IIncDecStmtContext {$/;"	f	struct:parser.SimpleStmtContext	typeref:typename:IIncDecStmtContext	signature:()
IncDecStmtContext	parser/golang_parser.go	/^type IncDecStmtContext struct {$/;"	s	package:parser
Index	parser/golang_parser.go	/^func (p *GolangParser) Index() (localctx IIndexContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IIndexContext)	signature:()
Index	parser/golang_parser.go	/^func (s *PrimaryExprContext) Index() IIndexContext {$/;"	f	struct:parser.PrimaryExprContext	typeref:typename:IIndexContext	signature:()
IndexContext	parser/golang_parser.go	/^type IndexContext struct {$/;"	s	package:parser
Interface	parser/golang_parser.go	/^func (s *InterfaceTypeContext) Interface() antlr.TerminalNode {$/;"	f	struct:parser.InterfaceTypeContext	typeref:typename:antlr.TerminalNode	signature:()
InterfaceType	parser/golang_parser.go	/^func (p *GolangParser) InterfaceType() (localctx IInterfaceTypeContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IInterfaceTypeContext)	signature:()
InterfaceType	parser/golang_parser.go	/^func (s *TypeLitContext) InterfaceType() IInterfaceTypeContext {$/;"	f	struct:parser.TypeLitContext	typeref:typename:IInterfaceTypeContext	signature:()
InterfaceTypeContext	parser/golang_parser.go	/^type InterfaceTypeContext struct {$/;"	s	package:parser
IsAnonymousFieldContext	parser/golang_parser.go	/^	IsAnonymousFieldContext()$/;"	n	interface:parser.IAnonymousFieldContext	signature:()
IsAnonymousFieldContext	parser/golang_parser.go	/^func (*AnonymousFieldContext) IsAnonymousFieldContext() {}$/;"	f	struct:parser.AnonymousFieldContext	signature:()
IsArgumentsContext	parser/golang_parser.go	/^	IsArgumentsContext()$/;"	n	interface:parser.IArgumentsContext	signature:()
IsArgumentsContext	parser/golang_parser.go	/^func (*ArgumentsContext) IsArgumentsContext() {}$/;"	f	struct:parser.ArgumentsContext	signature:()
IsArrayLengthContext	parser/golang_parser.go	/^	IsArrayLengthContext()$/;"	n	interface:parser.IArrayLengthContext	signature:()
IsArrayLengthContext	parser/golang_parser.go	/^func (*ArrayLengthContext) IsArrayLengthContext() {}$/;"	f	struct:parser.ArrayLengthContext	signature:()
IsArrayTypeContext	parser/golang_parser.go	/^	IsArrayTypeContext()$/;"	n	interface:parser.IArrayTypeContext	signature:()
IsArrayTypeContext	parser/golang_parser.go	/^func (*ArrayTypeContext) IsArrayTypeContext() {}$/;"	f	struct:parser.ArrayTypeContext	signature:()
IsAssign_opContext	parser/golang_parser.go	/^	IsAssign_opContext()$/;"	n	interface:parser.IAssign_opContext	signature:()
IsAssign_opContext	parser/golang_parser.go	/^func (*Assign_opContext) IsAssign_opContext() {}$/;"	f	struct:parser.Assign_opContext	signature:()
IsAssignmentContext	parser/golang_parser.go	/^	IsAssignmentContext()$/;"	n	interface:parser.IAssignmentContext	signature:()
IsAssignmentContext	parser/golang_parser.go	/^func (*AssignmentContext) IsAssignmentContext() {}$/;"	f	struct:parser.AssignmentContext	signature:()
IsBasicLitContext	parser/golang_parser.go	/^	IsBasicLitContext()$/;"	n	interface:parser.IBasicLitContext	signature:()
IsBasicLitContext	parser/golang_parser.go	/^func (*BasicLitContext) IsBasicLitContext() {}$/;"	f	struct:parser.BasicLitContext	signature:()
IsBlockContext	parser/golang_parser.go	/^	IsBlockContext()$/;"	n	interface:parser.IBlockContext	signature:()
IsBlockContext	parser/golang_parser.go	/^func (*BlockContext) IsBlockContext() {}$/;"	f	struct:parser.BlockContext	signature:()
IsBreakStmtContext	parser/golang_parser.go	/^	IsBreakStmtContext()$/;"	n	interface:parser.IBreakStmtContext	signature:()
IsBreakStmtContext	parser/golang_parser.go	/^func (*BreakStmtContext) IsBreakStmtContext() {}$/;"	f	struct:parser.BreakStmtContext	signature:()
IsChannelTypeContext	parser/golang_parser.go	/^	IsChannelTypeContext()$/;"	n	interface:parser.IChannelTypeContext	signature:()
IsChannelTypeContext	parser/golang_parser.go	/^func (*ChannelTypeContext) IsChannelTypeContext() {}$/;"	f	struct:parser.ChannelTypeContext	signature:()
IsCommCaseContext	parser/golang_parser.go	/^	IsCommCaseContext()$/;"	n	interface:parser.ICommCaseContext	signature:()
IsCommCaseContext	parser/golang_parser.go	/^func (*CommCaseContext) IsCommCaseContext() {}$/;"	f	struct:parser.CommCaseContext	signature:()
IsCommClauseContext	parser/golang_parser.go	/^	IsCommClauseContext()$/;"	n	interface:parser.ICommClauseContext	signature:()
IsCommClauseContext	parser/golang_parser.go	/^func (*CommClauseContext) IsCommClauseContext() {}$/;"	f	struct:parser.CommClauseContext	signature:()
IsCompositeLitContext	parser/golang_parser.go	/^	IsCompositeLitContext()$/;"	n	interface:parser.ICompositeLitContext	signature:()
IsCompositeLitContext	parser/golang_parser.go	/^func (*CompositeLitContext) IsCompositeLitContext() {}$/;"	f	struct:parser.CompositeLitContext	signature:()
IsConstDeclContext	parser/golang_parser.go	/^	IsConstDeclContext()$/;"	n	interface:parser.IConstDeclContext	signature:()
IsConstDeclContext	parser/golang_parser.go	/^func (*ConstDeclContext) IsConstDeclContext() {}$/;"	f	struct:parser.ConstDeclContext	signature:()
IsConstSpecContext	parser/golang_parser.go	/^	IsConstSpecContext()$/;"	n	interface:parser.IConstSpecContext	signature:()
IsConstSpecContext	parser/golang_parser.go	/^func (*ConstSpecContext) IsConstSpecContext() {}$/;"	f	struct:parser.ConstSpecContext	signature:()
IsContinueStmtContext	parser/golang_parser.go	/^	IsContinueStmtContext()$/;"	n	interface:parser.IContinueStmtContext	signature:()
IsContinueStmtContext	parser/golang_parser.go	/^func (*ContinueStmtContext) IsContinueStmtContext() {}$/;"	f	struct:parser.ContinueStmtContext	signature:()
IsConversionContext	parser/golang_parser.go	/^	IsConversionContext()$/;"	n	interface:parser.IConversionContext	signature:()
IsConversionContext	parser/golang_parser.go	/^func (*ConversionContext) IsConversionContext() {}$/;"	f	struct:parser.ConversionContext	signature:()
IsDeclarationContext	parser/golang_parser.go	/^	IsDeclarationContext()$/;"	n	interface:parser.IDeclarationContext	signature:()
IsDeclarationContext	parser/golang_parser.go	/^func (*DeclarationContext) IsDeclarationContext() {}$/;"	f	struct:parser.DeclarationContext	signature:()
IsDeferStmtContext	parser/golang_parser.go	/^	IsDeferStmtContext()$/;"	n	interface:parser.IDeferStmtContext	signature:()
IsDeferStmtContext	parser/golang_parser.go	/^func (*DeferStmtContext) IsDeferStmtContext() {}$/;"	f	struct:parser.DeferStmtContext	signature:()
IsElementContext	parser/golang_parser.go	/^	IsElementContext()$/;"	n	interface:parser.IElementContext	signature:()
IsElementContext	parser/golang_parser.go	/^func (*ElementContext) IsElementContext() {}$/;"	f	struct:parser.ElementContext	signature:()
IsElementListContext	parser/golang_parser.go	/^	IsElementListContext()$/;"	n	interface:parser.IElementListContext	signature:()
IsElementListContext	parser/golang_parser.go	/^func (*ElementListContext) IsElementListContext() {}$/;"	f	struct:parser.ElementListContext	signature:()
IsElementTypeContext	parser/golang_parser.go	/^	IsElementTypeContext()$/;"	n	interface:parser.IElementTypeContext	signature:()
IsElementTypeContext	parser/golang_parser.go	/^func (*ElementTypeContext) IsElementTypeContext() {}$/;"	f	struct:parser.ElementTypeContext	signature:()
IsEmptyStmtContext	parser/golang_parser.go	/^	IsEmptyStmtContext()$/;"	n	interface:parser.IEmptyStmtContext	signature:()
IsEmptyStmtContext	parser/golang_parser.go	/^func (*EmptyStmtContext) IsEmptyStmtContext() {}$/;"	f	struct:parser.EmptyStmtContext	signature:()
IsEosContext	parser/golang_parser.go	/^	IsEosContext()$/;"	n	interface:parser.IEosContext	signature:()
IsEosContext	parser/golang_parser.go	/^func (*EosContext) IsEosContext() {}$/;"	f	struct:parser.EosContext	signature:()
IsExprCaseClauseContext	parser/golang_parser.go	/^	IsExprCaseClauseContext()$/;"	n	interface:parser.IExprCaseClauseContext	signature:()
IsExprCaseClauseContext	parser/golang_parser.go	/^func (*ExprCaseClauseContext) IsExprCaseClauseContext() {}$/;"	f	struct:parser.ExprCaseClauseContext	signature:()
IsExprSwitchCaseContext	parser/golang_parser.go	/^	IsExprSwitchCaseContext()$/;"	n	interface:parser.IExprSwitchCaseContext	signature:()
IsExprSwitchCaseContext	parser/golang_parser.go	/^func (*ExprSwitchCaseContext) IsExprSwitchCaseContext() {}$/;"	f	struct:parser.ExprSwitchCaseContext	signature:()
IsExprSwitchStmtContext	parser/golang_parser.go	/^	IsExprSwitchStmtContext()$/;"	n	interface:parser.IExprSwitchStmtContext	signature:()
IsExprSwitchStmtContext	parser/golang_parser.go	/^func (*ExprSwitchStmtContext) IsExprSwitchStmtContext() {}$/;"	f	struct:parser.ExprSwitchStmtContext	signature:()
IsExpressionContext	parser/golang_parser.go	/^	IsExpressionContext()$/;"	n	interface:parser.IExpressionContext	signature:()
IsExpressionContext	parser/golang_parser.go	/^func (*ExpressionContext) IsExpressionContext() {}$/;"	f	struct:parser.ExpressionContext	signature:()
IsExpressionListContext	parser/golang_parser.go	/^	IsExpressionListContext()$/;"	n	interface:parser.IExpressionListContext	signature:()
IsExpressionListContext	parser/golang_parser.go	/^func (*ExpressionListContext) IsExpressionListContext() {}$/;"	f	struct:parser.ExpressionListContext	signature:()
IsExpressionStmtContext	parser/golang_parser.go	/^	IsExpressionStmtContext()$/;"	n	interface:parser.IExpressionStmtContext	signature:()
IsExpressionStmtContext	parser/golang_parser.go	/^func (*ExpressionStmtContext) IsExpressionStmtContext() {}$/;"	f	struct:parser.ExpressionStmtContext	signature:()
IsFallthroughStmtContext	parser/golang_parser.go	/^	IsFallthroughStmtContext()$/;"	n	interface:parser.IFallthroughStmtContext	signature:()
IsFallthroughStmtContext	parser/golang_parser.go	/^func (*FallthroughStmtContext) IsFallthroughStmtContext() {}$/;"	f	struct:parser.FallthroughStmtContext	signature:()
IsFieldDeclContext	parser/golang_parser.go	/^	IsFieldDeclContext()$/;"	n	interface:parser.IFieldDeclContext	signature:()
IsFieldDeclContext	parser/golang_parser.go	/^func (*FieldDeclContext) IsFieldDeclContext() {}$/;"	f	struct:parser.FieldDeclContext	signature:()
IsForClauseContext	parser/golang_parser.go	/^	IsForClauseContext()$/;"	n	interface:parser.IForClauseContext	signature:()
IsForClauseContext	parser/golang_parser.go	/^func (*ForClauseContext) IsForClauseContext() {}$/;"	f	struct:parser.ForClauseContext	signature:()
IsForStmtContext	parser/golang_parser.go	/^	IsForStmtContext()$/;"	n	interface:parser.IForStmtContext	signature:()
IsForStmtContext	parser/golang_parser.go	/^func (*ForStmtContext) IsForStmtContext() {}$/;"	f	struct:parser.ForStmtContext	signature:()
IsFunctionContext	parser/golang_parser.go	/^	IsFunctionContext()$/;"	n	interface:parser.IFunctionContext	signature:()
IsFunctionContext	parser/golang_parser.go	/^func (*FunctionContext) IsFunctionContext() {}$/;"	f	struct:parser.FunctionContext	signature:()
IsFunctionDeclContext	parser/golang_parser.go	/^	IsFunctionDeclContext()$/;"	n	interface:parser.IFunctionDeclContext	signature:()
IsFunctionDeclContext	parser/golang_parser.go	/^func (*FunctionDeclContext) IsFunctionDeclContext() {}$/;"	f	struct:parser.FunctionDeclContext	signature:()
IsFunctionLitContext	parser/golang_parser.go	/^	IsFunctionLitContext()$/;"	n	interface:parser.IFunctionLitContext	signature:()
IsFunctionLitContext	parser/golang_parser.go	/^func (*FunctionLitContext) IsFunctionLitContext() {}$/;"	f	struct:parser.FunctionLitContext	signature:()
IsFunctionTypeContext	parser/golang_parser.go	/^	IsFunctionTypeContext()$/;"	n	interface:parser.IFunctionTypeContext	signature:()
IsFunctionTypeContext	parser/golang_parser.go	/^func (*FunctionTypeContext) IsFunctionTypeContext() {}$/;"	f	struct:parser.FunctionTypeContext	signature:()
IsGoStmtContext	parser/golang_parser.go	/^	IsGoStmtContext()$/;"	n	interface:parser.IGoStmtContext	signature:()
IsGoStmtContext	parser/golang_parser.go	/^func (*GoStmtContext) IsGoStmtContext() {}$/;"	f	struct:parser.GoStmtContext	signature:()
IsGotoStmtContext	parser/golang_parser.go	/^	IsGotoStmtContext()$/;"	n	interface:parser.IGotoStmtContext	signature:()
IsGotoStmtContext	parser/golang_parser.go	/^func (*GotoStmtContext) IsGotoStmtContext() {}$/;"	f	struct:parser.GotoStmtContext	signature:()
IsIdentifierListContext	parser/golang_parser.go	/^	IsIdentifierListContext()$/;"	n	interface:parser.IIdentifierListContext	signature:()
IsIdentifierListContext	parser/golang_parser.go	/^func (*IdentifierListContext) IsIdentifierListContext() {}$/;"	f	struct:parser.IdentifierListContext	signature:()
IsIfStmtContext	parser/golang_parser.go	/^	IsIfStmtContext()$/;"	n	interface:parser.IIfStmtContext	signature:()
IsIfStmtContext	parser/golang_parser.go	/^func (*IfStmtContext) IsIfStmtContext() {}$/;"	f	struct:parser.IfStmtContext	signature:()
IsImportDeclContext	parser/golang_parser.go	/^	IsImportDeclContext()$/;"	n	interface:parser.IImportDeclContext	signature:()
IsImportDeclContext	parser/golang_parser.go	/^func (*ImportDeclContext) IsImportDeclContext() {}$/;"	f	struct:parser.ImportDeclContext	signature:()
IsImportPathContext	parser/golang_parser.go	/^	IsImportPathContext()$/;"	n	interface:parser.IImportPathContext	signature:()
IsImportPathContext	parser/golang_parser.go	/^func (*ImportPathContext) IsImportPathContext() {}$/;"	f	struct:parser.ImportPathContext	signature:()
IsImportSpecContext	parser/golang_parser.go	/^	IsImportSpecContext()$/;"	n	interface:parser.IImportSpecContext	signature:()
IsImportSpecContext	parser/golang_parser.go	/^func (*ImportSpecContext) IsImportSpecContext() {}$/;"	f	struct:parser.ImportSpecContext	signature:()
IsIncDecStmtContext	parser/golang_parser.go	/^	IsIncDecStmtContext()$/;"	n	interface:parser.IIncDecStmtContext	signature:()
IsIncDecStmtContext	parser/golang_parser.go	/^func (*IncDecStmtContext) IsIncDecStmtContext() {}$/;"	f	struct:parser.IncDecStmtContext	signature:()
IsIndexContext	parser/golang_parser.go	/^	IsIndexContext()$/;"	n	interface:parser.IIndexContext	signature:()
IsIndexContext	parser/golang_parser.go	/^func (*IndexContext) IsIndexContext() {}$/;"	f	struct:parser.IndexContext	signature:()
IsInterfaceTypeContext	parser/golang_parser.go	/^	IsInterfaceTypeContext()$/;"	n	interface:parser.IInterfaceTypeContext	signature:()
IsInterfaceTypeContext	parser/golang_parser.go	/^func (*InterfaceTypeContext) IsInterfaceTypeContext() {}$/;"	f	struct:parser.InterfaceTypeContext	signature:()
IsKeyContext	parser/golang_parser.go	/^	IsKeyContext()$/;"	n	interface:parser.IKeyContext	signature:()
IsKeyContext	parser/golang_parser.go	/^func (*KeyContext) IsKeyContext() {}$/;"	f	struct:parser.KeyContext	signature:()
IsKeyedElementContext	parser/golang_parser.go	/^	IsKeyedElementContext()$/;"	n	interface:parser.IKeyedElementContext	signature:()
IsKeyedElementContext	parser/golang_parser.go	/^func (*KeyedElementContext) IsKeyedElementContext() {}$/;"	f	struct:parser.KeyedElementContext	signature:()
IsLabeledStmtContext	parser/golang_parser.go	/^	IsLabeledStmtContext()$/;"	n	interface:parser.ILabeledStmtContext	signature:()
IsLabeledStmtContext	parser/golang_parser.go	/^func (*LabeledStmtContext) IsLabeledStmtContext() {}$/;"	f	struct:parser.LabeledStmtContext	signature:()
IsLiteralContext	parser/golang_parser.go	/^	IsLiteralContext()$/;"	n	interface:parser.ILiteralContext	signature:()
IsLiteralContext	parser/golang_parser.go	/^func (*LiteralContext) IsLiteralContext() {}$/;"	f	struct:parser.LiteralContext	signature:()
IsLiteralTypeContext	parser/golang_parser.go	/^	IsLiteralTypeContext()$/;"	n	interface:parser.ILiteralTypeContext	signature:()
IsLiteralTypeContext	parser/golang_parser.go	/^func (*LiteralTypeContext) IsLiteralTypeContext() {}$/;"	f	struct:parser.LiteralTypeContext	signature:()
IsLiteralValueContext	parser/golang_parser.go	/^	IsLiteralValueContext()$/;"	n	interface:parser.ILiteralValueContext	signature:()
IsLiteralValueContext	parser/golang_parser.go	/^func (*LiteralValueContext) IsLiteralValueContext() {}$/;"	f	struct:parser.LiteralValueContext	signature:()
IsMapTypeContext	parser/golang_parser.go	/^	IsMapTypeContext()$/;"	n	interface:parser.IMapTypeContext	signature:()
IsMapTypeContext	parser/golang_parser.go	/^func (*MapTypeContext) IsMapTypeContext() {}$/;"	f	struct:parser.MapTypeContext	signature:()
IsMethodDeclContext	parser/golang_parser.go	/^	IsMethodDeclContext()$/;"	n	interface:parser.IMethodDeclContext	signature:()
IsMethodDeclContext	parser/golang_parser.go	/^func (*MethodDeclContext) IsMethodDeclContext() {}$/;"	f	struct:parser.MethodDeclContext	signature:()
IsMethodExprContext	parser/golang_parser.go	/^	IsMethodExprContext()$/;"	n	interface:parser.IMethodExprContext	signature:()
IsMethodExprContext	parser/golang_parser.go	/^func (*MethodExprContext) IsMethodExprContext() {}$/;"	f	struct:parser.MethodExprContext	signature:()
IsMethodSpecContext	parser/golang_parser.go	/^	IsMethodSpecContext()$/;"	n	interface:parser.IMethodSpecContext	signature:()
IsMethodSpecContext	parser/golang_parser.go	/^func (*MethodSpecContext) IsMethodSpecContext() {}$/;"	f	struct:parser.MethodSpecContext	signature:()
IsOperandContext	parser/golang_parser.go	/^	IsOperandContext()$/;"	n	interface:parser.IOperandContext	signature:()
IsOperandContext	parser/golang_parser.go	/^func (*OperandContext) IsOperandContext() {}$/;"	f	struct:parser.OperandContext	signature:()
IsOperandNameContext	parser/golang_parser.go	/^	IsOperandNameContext()$/;"	n	interface:parser.IOperandNameContext	signature:()
IsOperandNameContext	parser/golang_parser.go	/^func (*OperandNameContext) IsOperandNameContext() {}$/;"	f	struct:parser.OperandNameContext	signature:()
IsPackageClauseContext	parser/golang_parser.go	/^	IsPackageClauseContext()$/;"	n	interface:parser.IPackageClauseContext	signature:()
IsPackageClauseContext	parser/golang_parser.go	/^func (*PackageClauseContext) IsPackageClauseContext() {}$/;"	f	struct:parser.PackageClauseContext	signature:()
IsParameterDeclContext	parser/golang_parser.go	/^	IsParameterDeclContext()$/;"	n	interface:parser.IParameterDeclContext	signature:()
IsParameterDeclContext	parser/golang_parser.go	/^func (*ParameterDeclContext) IsParameterDeclContext() {}$/;"	f	struct:parser.ParameterDeclContext	signature:()
IsParameterListContext	parser/golang_parser.go	/^	IsParameterListContext()$/;"	n	interface:parser.IParameterListContext	signature:()
IsParameterListContext	parser/golang_parser.go	/^func (*ParameterListContext) IsParameterListContext() {}$/;"	f	struct:parser.ParameterListContext	signature:()
IsParametersContext	parser/golang_parser.go	/^	IsParametersContext()$/;"	n	interface:parser.IParametersContext	signature:()
IsParametersContext	parser/golang_parser.go	/^func (*ParametersContext) IsParametersContext() {}$/;"	f	struct:parser.ParametersContext	signature:()
IsPointerTypeContext	parser/golang_parser.go	/^	IsPointerTypeContext()$/;"	n	interface:parser.IPointerTypeContext	signature:()
IsPointerTypeContext	parser/golang_parser.go	/^func (*PointerTypeContext) IsPointerTypeContext() {}$/;"	f	struct:parser.PointerTypeContext	signature:()
IsPrimaryExprContext	parser/golang_parser.go	/^	IsPrimaryExprContext()$/;"	n	interface:parser.IPrimaryExprContext	signature:()
IsPrimaryExprContext	parser/golang_parser.go	/^func (*PrimaryExprContext) IsPrimaryExprContext() {}$/;"	f	struct:parser.PrimaryExprContext	signature:()
IsQualifiedIdentContext	parser/golang_parser.go	/^	IsQualifiedIdentContext()$/;"	n	interface:parser.IQualifiedIdentContext	signature:()
IsQualifiedIdentContext	parser/golang_parser.go	/^func (*QualifiedIdentContext) IsQualifiedIdentContext() {}$/;"	f	struct:parser.QualifiedIdentContext	signature:()
IsRangeClauseContext	parser/golang_parser.go	/^	IsRangeClauseContext()$/;"	n	interface:parser.IRangeClauseContext	signature:()
IsRangeClauseContext	parser/golang_parser.go	/^func (*RangeClauseContext) IsRangeClauseContext() {}$/;"	f	struct:parser.RangeClauseContext	signature:()
IsReceiverContext	parser/golang_parser.go	/^	IsReceiverContext()$/;"	n	interface:parser.IReceiverContext	signature:()
IsReceiverContext	parser/golang_parser.go	/^func (*ReceiverContext) IsReceiverContext() {}$/;"	f	struct:parser.ReceiverContext	signature:()
IsReceiverTypeContext	parser/golang_parser.go	/^	IsReceiverTypeContext()$/;"	n	interface:parser.IReceiverTypeContext	signature:()
IsReceiverTypeContext	parser/golang_parser.go	/^func (*ReceiverTypeContext) IsReceiverTypeContext() {}$/;"	f	struct:parser.ReceiverTypeContext	signature:()
IsRecvStmtContext	parser/golang_parser.go	/^	IsRecvStmtContext()$/;"	n	interface:parser.IRecvStmtContext	signature:()
IsRecvStmtContext	parser/golang_parser.go	/^func (*RecvStmtContext) IsRecvStmtContext() {}$/;"	f	struct:parser.RecvStmtContext	signature:()
IsResultContext	parser/golang_parser.go	/^	IsResultContext()$/;"	n	interface:parser.IResultContext	signature:()
IsResultContext	parser/golang_parser.go	/^func (*ResultContext) IsResultContext() {}$/;"	f	struct:parser.ResultContext	signature:()
IsReturnStmtContext	parser/golang_parser.go	/^	IsReturnStmtContext()$/;"	n	interface:parser.IReturnStmtContext	signature:()
IsReturnStmtContext	parser/golang_parser.go	/^func (*ReturnStmtContext) IsReturnStmtContext() {}$/;"	f	struct:parser.ReturnStmtContext	signature:()
IsSelectStmtContext	parser/golang_parser.go	/^	IsSelectStmtContext()$/;"	n	interface:parser.ISelectStmtContext	signature:()
IsSelectStmtContext	parser/golang_parser.go	/^func (*SelectStmtContext) IsSelectStmtContext() {}$/;"	f	struct:parser.SelectStmtContext	signature:()
IsSelectorContext	parser/golang_parser.go	/^	IsSelectorContext()$/;"	n	interface:parser.ISelectorContext	signature:()
IsSelectorContext	parser/golang_parser.go	/^func (*SelectorContext) IsSelectorContext() {}$/;"	f	struct:parser.SelectorContext	signature:()
IsSendStmtContext	parser/golang_parser.go	/^	IsSendStmtContext()$/;"	n	interface:parser.ISendStmtContext	signature:()
IsSendStmtContext	parser/golang_parser.go	/^func (*SendStmtContext) IsSendStmtContext() {}$/;"	f	struct:parser.SendStmtContext	signature:()
IsShortVarDeclContext	parser/golang_parser.go	/^	IsShortVarDeclContext()$/;"	n	interface:parser.IShortVarDeclContext	signature:()
IsShortVarDeclContext	parser/golang_parser.go	/^func (*ShortVarDeclContext) IsShortVarDeclContext() {}$/;"	f	struct:parser.ShortVarDeclContext	signature:()
IsSignatureContext	parser/golang_parser.go	/^	IsSignatureContext()$/;"	n	interface:parser.ISignatureContext	signature:()
IsSignatureContext	parser/golang_parser.go	/^func (*SignatureContext) IsSignatureContext() {}$/;"	f	struct:parser.SignatureContext	signature:()
IsSimpleStmtContext	parser/golang_parser.go	/^	IsSimpleStmtContext()$/;"	n	interface:parser.ISimpleStmtContext	signature:()
IsSimpleStmtContext	parser/golang_parser.go	/^func (*SimpleStmtContext) IsSimpleStmtContext() {}$/;"	f	struct:parser.SimpleStmtContext	signature:()
IsSliceContext	parser/golang_parser.go	/^	IsSliceContext()$/;"	n	interface:parser.ISliceContext	signature:()
IsSliceContext	parser/golang_parser.go	/^func (*SliceContext) IsSliceContext() {}$/;"	f	struct:parser.SliceContext	signature:()
IsSliceTypeContext	parser/golang_parser.go	/^	IsSliceTypeContext()$/;"	n	interface:parser.ISliceTypeContext	signature:()
IsSliceTypeContext	parser/golang_parser.go	/^func (*SliceTypeContext) IsSliceTypeContext() {}$/;"	f	struct:parser.SliceTypeContext	signature:()
IsSourceFileContext	parser/golang_parser.go	/^	IsSourceFileContext()$/;"	n	interface:parser.ISourceFileContext	signature:()
IsSourceFileContext	parser/golang_parser.go	/^func (*SourceFileContext) IsSourceFileContext() {}$/;"	f	struct:parser.SourceFileContext	signature:()
IsStatementContext	parser/golang_parser.go	/^	IsStatementContext()$/;"	n	interface:parser.IStatementContext	signature:()
IsStatementContext	parser/golang_parser.go	/^func (*StatementContext) IsStatementContext() {}$/;"	f	struct:parser.StatementContext	signature:()
IsStatementListContext	parser/golang_parser.go	/^	IsStatementListContext()$/;"	n	interface:parser.IStatementListContext	signature:()
IsStatementListContext	parser/golang_parser.go	/^func (*StatementListContext) IsStatementListContext() {}$/;"	f	struct:parser.StatementListContext	signature:()
IsStructTypeContext	parser/golang_parser.go	/^	IsStructTypeContext()$/;"	n	interface:parser.IStructTypeContext	signature:()
IsStructTypeContext	parser/golang_parser.go	/^func (*StructTypeContext) IsStructTypeContext() {}$/;"	f	struct:parser.StructTypeContext	signature:()
IsSwitchStmtContext	parser/golang_parser.go	/^	IsSwitchStmtContext()$/;"	n	interface:parser.ISwitchStmtContext	signature:()
IsSwitchStmtContext	parser/golang_parser.go	/^func (*SwitchStmtContext) IsSwitchStmtContext() {}$/;"	f	struct:parser.SwitchStmtContext	signature:()
IsTopLevelDeclContext	parser/golang_parser.go	/^	IsTopLevelDeclContext()$/;"	n	interface:parser.ITopLevelDeclContext	signature:()
IsTopLevelDeclContext	parser/golang_parser.go	/^func (*TopLevelDeclContext) IsTopLevelDeclContext() {}$/;"	f	struct:parser.TopLevelDeclContext	signature:()
IsTypeAssertionContext	parser/golang_parser.go	/^	IsTypeAssertionContext()$/;"	n	interface:parser.ITypeAssertionContext	signature:()
IsTypeAssertionContext	parser/golang_parser.go	/^func (*TypeAssertionContext) IsTypeAssertionContext() {}$/;"	f	struct:parser.TypeAssertionContext	signature:()
IsTypeCaseClauseContext	parser/golang_parser.go	/^	IsTypeCaseClauseContext()$/;"	n	interface:parser.ITypeCaseClauseContext	signature:()
IsTypeCaseClauseContext	parser/golang_parser.go	/^func (*TypeCaseClauseContext) IsTypeCaseClauseContext() {}$/;"	f	struct:parser.TypeCaseClauseContext	signature:()
IsTypeDeclContext	parser/golang_parser.go	/^	IsTypeDeclContext()$/;"	n	interface:parser.ITypeDeclContext	signature:()
IsTypeDeclContext	parser/golang_parser.go	/^func (*TypeDeclContext) IsTypeDeclContext() {}$/;"	f	struct:parser.TypeDeclContext	signature:()
IsTypeListContext	parser/golang_parser.go	/^	IsTypeListContext()$/;"	n	interface:parser.ITypeListContext	signature:()
IsTypeListContext	parser/golang_parser.go	/^func (*TypeListContext) IsTypeListContext() {}$/;"	f	struct:parser.TypeListContext	signature:()
IsTypeLitContext	parser/golang_parser.go	/^	IsTypeLitContext()$/;"	n	interface:parser.ITypeLitContext	signature:()
IsTypeLitContext	parser/golang_parser.go	/^func (*TypeLitContext) IsTypeLitContext() {}$/;"	f	struct:parser.TypeLitContext	signature:()
IsTypeNameContext	parser/golang_parser.go	/^	IsTypeNameContext()$/;"	n	interface:parser.ITypeNameContext	signature:()
IsTypeNameContext	parser/golang_parser.go	/^func (*TypeNameContext) IsTypeNameContext() {}$/;"	f	struct:parser.TypeNameContext	signature:()
IsTypeSpecContext	parser/golang_parser.go	/^	IsTypeSpecContext()$/;"	n	interface:parser.ITypeSpecContext	signature:()
IsTypeSpecContext	parser/golang_parser.go	/^func (*TypeSpecContext) IsTypeSpecContext() {}$/;"	f	struct:parser.TypeSpecContext	signature:()
IsTypeSwitchCaseContext	parser/golang_parser.go	/^	IsTypeSwitchCaseContext()$/;"	n	interface:parser.ITypeSwitchCaseContext	signature:()
IsTypeSwitchCaseContext	parser/golang_parser.go	/^func (*TypeSwitchCaseContext) IsTypeSwitchCaseContext() {}$/;"	f	struct:parser.TypeSwitchCaseContext	signature:()
IsTypeSwitchGuardContext	parser/golang_parser.go	/^	IsTypeSwitchGuardContext()$/;"	n	interface:parser.ITypeSwitchGuardContext	signature:()
IsTypeSwitchGuardContext	parser/golang_parser.go	/^func (*TypeSwitchGuardContext) IsTypeSwitchGuardContext() {}$/;"	f	struct:parser.TypeSwitchGuardContext	signature:()
IsTypeSwitchStmtContext	parser/golang_parser.go	/^	IsTypeSwitchStmtContext()$/;"	n	interface:parser.ITypeSwitchStmtContext	signature:()
IsTypeSwitchStmtContext	parser/golang_parser.go	/^func (*TypeSwitchStmtContext) IsTypeSwitchStmtContext() {}$/;"	f	struct:parser.TypeSwitchStmtContext	signature:()
IsType_Context	parser/golang_parser.go	/^	IsType_Context()$/;"	n	interface:parser.IType_Context	signature:()
IsType_Context	parser/golang_parser.go	/^func (*Type_Context) IsType_Context() {}$/;"	f	struct:parser.Type_Context	signature:()
IsUnaryExprContext	parser/golang_parser.go	/^	IsUnaryExprContext()$/;"	n	interface:parser.IUnaryExprContext	signature:()
IsUnaryExprContext	parser/golang_parser.go	/^func (*UnaryExprContext) IsUnaryExprContext() {}$/;"	f	struct:parser.UnaryExprContext	signature:()
IsVarDeclContext	parser/golang_parser.go	/^	IsVarDeclContext()$/;"	n	interface:parser.IVarDeclContext	signature:()
IsVarDeclContext	parser/golang_parser.go	/^func (*VarDeclContext) IsVarDeclContext() {}$/;"	f	struct:parser.VarDeclContext	signature:()
IsVarSpecContext	parser/golang_parser.go	/^	IsVarSpecContext()$/;"	n	interface:parser.IVarSpecContext	signature:()
IsVarSpecContext	parser/golang_parser.go	/^func (*VarSpecContext) IsVarSpecContext() {}$/;"	f	struct:parser.VarSpecContext	signature:()
Key	parser/golang_parser.go	/^func (p *GolangParser) Key() (localctx IKeyContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IKeyContext)	signature:()
Key	parser/golang_parser.go	/^func (s *KeyedElementContext) Key() IKeyContext {$/;"	f	struct:parser.KeyedElementContext	typeref:typename:IKeyContext	signature:()
KeyContext	parser/golang_parser.go	/^type KeyContext struct {$/;"	s	package:parser
KeyedElement	parser/golang_parser.go	/^func (p *GolangParser) KeyedElement() (localctx IKeyedElementContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IKeyedElementContext)	signature:()
KeyedElement	parser/golang_parser.go	/^func (s *ElementListContext) KeyedElement(i int) IKeyedElementContext {$/;"	f	struct:parser.ElementListContext	typeref:typename:IKeyedElementContext	signature:(i int)
KeyedElementContext	parser/golang_parser.go	/^type KeyedElementContext struct {$/;"	s	package:parser
LabeledStmt	parser/golang_parser.go	/^func (p *GolangParser) LabeledStmt() (localctx ILabeledStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ILabeledStmtContext)	signature:()
LabeledStmt	parser/golang_parser.go	/^func (s *StatementContext) LabeledStmt() ILabeledStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:ILabeledStmtContext	signature:()
LabeledStmtContext	parser/golang_parser.go	/^type LabeledStmtContext struct {$/;"	s	package:parser
LeftShiftArithmetic	parser/golang_parser.go	/^func (s *Assign_opContext) LeftShiftArithmetic() antlr.TerminalNode {$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.TerminalNode	signature:()
LeftShiftArithmetic	parser/golang_parser.go	/^func (s *ExpressionContext) LeftShiftArithmetic() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
LessThan	parser/golang_parser.go	/^func (s *ExpressionContext) LessThan() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
LessThanEquals	parser/golang_parser.go	/^func (s *ExpressionContext) LessThanEquals() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
Literal	parser/golang_parser.go	/^func (p *GolangParser) Literal() (localctx ILiteralContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ILiteralContext)	signature:()
Literal	parser/golang_parser.go	/^func (s *OperandContext) Literal() ILiteralContext {$/;"	f	struct:parser.OperandContext	typeref:typename:ILiteralContext	signature:()
LiteralContext	parser/golang_parser.go	/^type LiteralContext struct {$/;"	s	package:parser
LiteralType	parser/golang_parser.go	/^func (p *GolangParser) LiteralType() (localctx ILiteralTypeContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ILiteralTypeContext)	signature:()
LiteralType	parser/golang_parser.go	/^func (s *CompositeLitContext) LiteralType() ILiteralTypeContext {$/;"	f	struct:parser.CompositeLitContext	typeref:typename:ILiteralTypeContext	signature:()
LiteralTypeContext	parser/golang_parser.go	/^type LiteralTypeContext struct {$/;"	s	package:parser
LiteralValue	parser/golang_parser.go	/^func (p *GolangParser) LiteralValue() (localctx ILiteralValueContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ILiteralValueContext)	signature:()
LiteralValue	parser/golang_parser.go	/^func (s *CompositeLitContext) LiteralValue() ILiteralValueContext {$/;"	f	struct:parser.CompositeLitContext	typeref:typename:ILiteralValueContext	signature:()
LiteralValue	parser/golang_parser.go	/^func (s *ElementContext) LiteralValue() ILiteralValueContext {$/;"	f	struct:parser.ElementContext	typeref:typename:ILiteralValueContext	signature:()
LiteralValue	parser/golang_parser.go	/^func (s *KeyContext) LiteralValue() ILiteralValueContext {$/;"	f	struct:parser.KeyContext	typeref:typename:ILiteralValueContext	signature:()
LiteralValueContext	parser/golang_parser.go	/^type LiteralValueContext struct {$/;"	s	package:parser
Map	parser/golang_parser.go	/^func (s *MapTypeContext) Map() antlr.TerminalNode {$/;"	f	struct:parser.MapTypeContext	typeref:typename:antlr.TerminalNode	signature:()
MapType	parser/golang_parser.go	/^func (p *GolangParser) MapType() (localctx IMapTypeContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IMapTypeContext)	signature:()
MapType	parser/golang_parser.go	/^func (s *LiteralTypeContext) MapType() IMapTypeContext {$/;"	f	struct:parser.LiteralTypeContext	typeref:typename:IMapTypeContext	signature:()
MapType	parser/golang_parser.go	/^func (s *TypeLitContext) MapType() IMapTypeContext {$/;"	f	struct:parser.TypeLitContext	typeref:typename:IMapTypeContext	signature:()
MapTypeContext	parser/golang_parser.go	/^type MapTypeContext struct {$/;"	s	package:parser
MethodDecl	parser/golang_parser.go	/^func (p *GolangParser) MethodDecl() (localctx IMethodDeclContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IMethodDeclContext)	signature:()
MethodDecl	parser/golang_parser.go	/^func (s *TopLevelDeclContext) MethodDecl() IMethodDeclContext {$/;"	f	struct:parser.TopLevelDeclContext	typeref:typename:IMethodDeclContext	signature:()
MethodDeclContext	parser/golang_parser.go	/^type MethodDeclContext struct {$/;"	s	package:parser
MethodExpr	parser/golang_parser.go	/^func (p *GolangParser) MethodExpr() (localctx IMethodExprContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IMethodExprContext)	signature:()
MethodExpr	parser/golang_parser.go	/^func (s *OperandContext) MethodExpr() IMethodExprContext {$/;"	f	struct:parser.OperandContext	typeref:typename:IMethodExprContext	signature:()
MethodExprContext	parser/golang_parser.go	/^type MethodExprContext struct {$/;"	s	package:parser
MethodSpec	parser/golang_parser.go	/^func (p *GolangParser) MethodSpec() (localctx IMethodSpecContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IMethodSpecContext)	signature:()
MethodSpec	parser/golang_parser.go	/^func (s *InterfaceTypeContext) MethodSpec(i int) IMethodSpecContext {$/;"	f	struct:parser.InterfaceTypeContext	typeref:typename:IMethodSpecContext	signature:(i int)
MethodSpecContext	parser/golang_parser.go	/^type MethodSpecContext struct {$/;"	s	package:parser
MethodSpec_Sempred	parser/golang_parser.go	/^func (p *GolangParser) MethodSpec_Sempred(localctx antlr.RuleContext, predIndex int) bool {$/;"	f	struct:parser.GolangParser	typeref:typename:bool	signature:(localctx antlr.RuleContext, predIndex int)
Minus	parser/golang_parser.go	/^func (s *Assign_opContext) Minus() antlr.TerminalNode {$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.TerminalNode	signature:()
Minus	parser/golang_parser.go	/^func (s *ExpressionContext) Minus() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
Minus	parser/golang_parser.go	/^func (s *UnaryExprContext) Minus() antlr.TerminalNode {$/;"	f	struct:parser.UnaryExprContext	typeref:typename:antlr.TerminalNode	signature:()
MinusMinus	parser/golang_parser.go	/^func (s *IncDecStmtContext) MinusMinus() antlr.TerminalNode {$/;"	f	struct:parser.IncDecStmtContext	typeref:typename:antlr.TerminalNode	signature:()
Modulus	parser/golang_parser.go	/^func (s *Assign_opContext) Modulus() antlr.TerminalNode {$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.TerminalNode	signature:()
Modulus	parser/golang_parser.go	/^func (s *ExpressionContext) Modulus() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
Multiply	parser/golang_parser.go	/^func (s *Assign_opContext) Multiply() antlr.TerminalNode {$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.TerminalNode	signature:()
Multiply	parser/golang_parser.go	/^func (s *ExpressionContext) Multiply() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
Multiply	parser/golang_parser.go	/^func (s *UnaryExprContext) Multiply() antlr.TerminalNode {$/;"	f	struct:parser.UnaryExprContext	typeref:typename:antlr.TerminalNode	signature:()
NewAnonymousFieldContext	parser/golang_parser.go	/^func NewAnonymousFieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState/;"	f	package:parser	typeref:typename:*AnonymousFieldContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewArgumentsContext	parser/golang_parser.go	/^func NewArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*ArgumentsContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewArrayLengthContext	parser/golang_parser.go	/^func NewArrayLengthContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState in/;"	f	package:parser	typeref:typename:*ArrayLengthContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewArrayTypeContext	parser/golang_parser.go	/^func NewArrayTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*ArrayTypeContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewAssign_opContext	parser/golang_parser.go	/^func NewAssign_opContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*Assign_opContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewAssignmentContext	parser/golang_parser.go	/^func NewAssignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*AssignmentContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewBasicLitContext	parser/golang_parser.go	/^func NewBasicLitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) /;"	f	package:parser	typeref:typename:*BasicLitContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewBlockContext	parser/golang_parser.go	/^func NewBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bl/;"	f	package:parser	typeref:typename:*BlockContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewBreakStmtContext	parser/golang_parser.go	/^func NewBreakStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*BreakStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewChannelTypeContext	parser/golang_parser.go	/^func NewChannelTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState in/;"	f	package:parser	typeref:typename:*ChannelTypeContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewCommCaseContext	parser/golang_parser.go	/^func NewCommCaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) /;"	f	package:parser	typeref:typename:*CommCaseContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewCommClauseContext	parser/golang_parser.go	/^func NewCommClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*CommClauseContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewCompositeLitContext	parser/golang_parser.go	/^func NewCompositeLitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState i/;"	f	package:parser	typeref:typename:*CompositeLitContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewConstDeclContext	parser/golang_parser.go	/^func NewConstDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*ConstDeclContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewConstSpecContext	parser/golang_parser.go	/^func NewConstSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*ConstSpecContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewContinueStmtContext	parser/golang_parser.go	/^func NewContinueStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState i/;"	f	package:parser	typeref:typename:*ContinueStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewConversionContext	parser/golang_parser.go	/^func NewConversionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*ConversionContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewDeclarationContext	parser/golang_parser.go	/^func NewDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState in/;"	f	package:parser	typeref:typename:*DeclarationContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewDeferStmtContext	parser/golang_parser.go	/^func NewDeferStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*DeferStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewElementContext	parser/golang_parser.go	/^func NewElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) */;"	f	package:parser	typeref:typename:*ElementContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewElementListContext	parser/golang_parser.go	/^func NewElementListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState in/;"	f	package:parser	typeref:typename:*ElementListContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewElementTypeContext	parser/golang_parser.go	/^func NewElementTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState in/;"	f	package:parser	typeref:typename:*ElementTypeContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewEmptyAnonymousFieldContext	parser/golang_parser.go	/^func NewEmptyAnonymousFieldContext() *AnonymousFieldContext {$/;"	f	package:parser	typeref:typename:*AnonymousFieldContext	signature:()
NewEmptyArgumentsContext	parser/golang_parser.go	/^func NewEmptyArgumentsContext() *ArgumentsContext {$/;"	f	package:parser	typeref:typename:*ArgumentsContext	signature:()
NewEmptyArrayLengthContext	parser/golang_parser.go	/^func NewEmptyArrayLengthContext() *ArrayLengthContext {$/;"	f	package:parser	typeref:typename:*ArrayLengthContext	signature:()
NewEmptyArrayTypeContext	parser/golang_parser.go	/^func NewEmptyArrayTypeContext() *ArrayTypeContext {$/;"	f	package:parser	typeref:typename:*ArrayTypeContext	signature:()
NewEmptyAssign_opContext	parser/golang_parser.go	/^func NewEmptyAssign_opContext() *Assign_opContext {$/;"	f	package:parser	typeref:typename:*Assign_opContext	signature:()
NewEmptyAssignmentContext	parser/golang_parser.go	/^func NewEmptyAssignmentContext() *AssignmentContext {$/;"	f	package:parser	typeref:typename:*AssignmentContext	signature:()
NewEmptyBasicLitContext	parser/golang_parser.go	/^func NewEmptyBasicLitContext() *BasicLitContext {$/;"	f	package:parser	typeref:typename:*BasicLitContext	signature:()
NewEmptyBlockContext	parser/golang_parser.go	/^func NewEmptyBlockContext() *BlockContext {$/;"	f	package:parser	typeref:typename:*BlockContext	signature:()
NewEmptyBreakStmtContext	parser/golang_parser.go	/^func NewEmptyBreakStmtContext() *BreakStmtContext {$/;"	f	package:parser	typeref:typename:*BreakStmtContext	signature:()
NewEmptyChannelTypeContext	parser/golang_parser.go	/^func NewEmptyChannelTypeContext() *ChannelTypeContext {$/;"	f	package:parser	typeref:typename:*ChannelTypeContext	signature:()
NewEmptyCommCaseContext	parser/golang_parser.go	/^func NewEmptyCommCaseContext() *CommCaseContext {$/;"	f	package:parser	typeref:typename:*CommCaseContext	signature:()
NewEmptyCommClauseContext	parser/golang_parser.go	/^func NewEmptyCommClauseContext() *CommClauseContext {$/;"	f	package:parser	typeref:typename:*CommClauseContext	signature:()
NewEmptyCompositeLitContext	parser/golang_parser.go	/^func NewEmptyCompositeLitContext() *CompositeLitContext {$/;"	f	package:parser	typeref:typename:*CompositeLitContext	signature:()
NewEmptyConstDeclContext	parser/golang_parser.go	/^func NewEmptyConstDeclContext() *ConstDeclContext {$/;"	f	package:parser	typeref:typename:*ConstDeclContext	signature:()
NewEmptyConstSpecContext	parser/golang_parser.go	/^func NewEmptyConstSpecContext() *ConstSpecContext {$/;"	f	package:parser	typeref:typename:*ConstSpecContext	signature:()
NewEmptyContinueStmtContext	parser/golang_parser.go	/^func NewEmptyContinueStmtContext() *ContinueStmtContext {$/;"	f	package:parser	typeref:typename:*ContinueStmtContext	signature:()
NewEmptyConversionContext	parser/golang_parser.go	/^func NewEmptyConversionContext() *ConversionContext {$/;"	f	package:parser	typeref:typename:*ConversionContext	signature:()
NewEmptyDeclarationContext	parser/golang_parser.go	/^func NewEmptyDeclarationContext() *DeclarationContext {$/;"	f	package:parser	typeref:typename:*DeclarationContext	signature:()
NewEmptyDeferStmtContext	parser/golang_parser.go	/^func NewEmptyDeferStmtContext() *DeferStmtContext {$/;"	f	package:parser	typeref:typename:*DeferStmtContext	signature:()
NewEmptyElementContext	parser/golang_parser.go	/^func NewEmptyElementContext() *ElementContext {$/;"	f	package:parser	typeref:typename:*ElementContext	signature:()
NewEmptyElementListContext	parser/golang_parser.go	/^func NewEmptyElementListContext() *ElementListContext {$/;"	f	package:parser	typeref:typename:*ElementListContext	signature:()
NewEmptyElementTypeContext	parser/golang_parser.go	/^func NewEmptyElementTypeContext() *ElementTypeContext {$/;"	f	package:parser	typeref:typename:*ElementTypeContext	signature:()
NewEmptyEmptyStmtContext	parser/golang_parser.go	/^func NewEmptyEmptyStmtContext() *EmptyStmtContext {$/;"	f	package:parser	typeref:typename:*EmptyStmtContext	signature:()
NewEmptyEosContext	parser/golang_parser.go	/^func NewEmptyEosContext() *EosContext {$/;"	f	package:parser	typeref:typename:*EosContext	signature:()
NewEmptyExprCaseClauseContext	parser/golang_parser.go	/^func NewEmptyExprCaseClauseContext() *ExprCaseClauseContext {$/;"	f	package:parser	typeref:typename:*ExprCaseClauseContext	signature:()
NewEmptyExprSwitchCaseContext	parser/golang_parser.go	/^func NewEmptyExprSwitchCaseContext() *ExprSwitchCaseContext {$/;"	f	package:parser	typeref:typename:*ExprSwitchCaseContext	signature:()
NewEmptyExprSwitchStmtContext	parser/golang_parser.go	/^func NewEmptyExprSwitchStmtContext() *ExprSwitchStmtContext {$/;"	f	package:parser	typeref:typename:*ExprSwitchStmtContext	signature:()
NewEmptyExpressionContext	parser/golang_parser.go	/^func NewEmptyExpressionContext() *ExpressionContext {$/;"	f	package:parser	typeref:typename:*ExpressionContext	signature:()
NewEmptyExpressionListContext	parser/golang_parser.go	/^func NewEmptyExpressionListContext() *ExpressionListContext {$/;"	f	package:parser	typeref:typename:*ExpressionListContext	signature:()
NewEmptyExpressionStmtContext	parser/golang_parser.go	/^func NewEmptyExpressionStmtContext() *ExpressionStmtContext {$/;"	f	package:parser	typeref:typename:*ExpressionStmtContext	signature:()
NewEmptyFallthroughStmtContext	parser/golang_parser.go	/^func NewEmptyFallthroughStmtContext() *FallthroughStmtContext {$/;"	f	package:parser	typeref:typename:*FallthroughStmtContext	signature:()
NewEmptyFieldDeclContext	parser/golang_parser.go	/^func NewEmptyFieldDeclContext() *FieldDeclContext {$/;"	f	package:parser	typeref:typename:*FieldDeclContext	signature:()
NewEmptyForClauseContext	parser/golang_parser.go	/^func NewEmptyForClauseContext() *ForClauseContext {$/;"	f	package:parser	typeref:typename:*ForClauseContext	signature:()
NewEmptyForStmtContext	parser/golang_parser.go	/^func NewEmptyForStmtContext() *ForStmtContext {$/;"	f	package:parser	typeref:typename:*ForStmtContext	signature:()
NewEmptyFunctionContext	parser/golang_parser.go	/^func NewEmptyFunctionContext() *FunctionContext {$/;"	f	package:parser	typeref:typename:*FunctionContext	signature:()
NewEmptyFunctionDeclContext	parser/golang_parser.go	/^func NewEmptyFunctionDeclContext() *FunctionDeclContext {$/;"	f	package:parser	typeref:typename:*FunctionDeclContext	signature:()
NewEmptyFunctionLitContext	parser/golang_parser.go	/^func NewEmptyFunctionLitContext() *FunctionLitContext {$/;"	f	package:parser	typeref:typename:*FunctionLitContext	signature:()
NewEmptyFunctionTypeContext	parser/golang_parser.go	/^func NewEmptyFunctionTypeContext() *FunctionTypeContext {$/;"	f	package:parser	typeref:typename:*FunctionTypeContext	signature:()
NewEmptyGoStmtContext	parser/golang_parser.go	/^func NewEmptyGoStmtContext() *GoStmtContext {$/;"	f	package:parser	typeref:typename:*GoStmtContext	signature:()
NewEmptyGotoStmtContext	parser/golang_parser.go	/^func NewEmptyGotoStmtContext() *GotoStmtContext {$/;"	f	package:parser	typeref:typename:*GotoStmtContext	signature:()
NewEmptyIdentifierListContext	parser/golang_parser.go	/^func NewEmptyIdentifierListContext() *IdentifierListContext {$/;"	f	package:parser	typeref:typename:*IdentifierListContext	signature:()
NewEmptyIfStmtContext	parser/golang_parser.go	/^func NewEmptyIfStmtContext() *IfStmtContext {$/;"	f	package:parser	typeref:typename:*IfStmtContext	signature:()
NewEmptyImportDeclContext	parser/golang_parser.go	/^func NewEmptyImportDeclContext() *ImportDeclContext {$/;"	f	package:parser	typeref:typename:*ImportDeclContext	signature:()
NewEmptyImportPathContext	parser/golang_parser.go	/^func NewEmptyImportPathContext() *ImportPathContext {$/;"	f	package:parser	typeref:typename:*ImportPathContext	signature:()
NewEmptyImportSpecContext	parser/golang_parser.go	/^func NewEmptyImportSpecContext() *ImportSpecContext {$/;"	f	package:parser	typeref:typename:*ImportSpecContext	signature:()
NewEmptyIncDecStmtContext	parser/golang_parser.go	/^func NewEmptyIncDecStmtContext() *IncDecStmtContext {$/;"	f	package:parser	typeref:typename:*IncDecStmtContext	signature:()
NewEmptyIndexContext	parser/golang_parser.go	/^func NewEmptyIndexContext() *IndexContext {$/;"	f	package:parser	typeref:typename:*IndexContext	signature:()
NewEmptyInterfaceTypeContext	parser/golang_parser.go	/^func NewEmptyInterfaceTypeContext() *InterfaceTypeContext {$/;"	f	package:parser	typeref:typename:*InterfaceTypeContext	signature:()
NewEmptyKeyContext	parser/golang_parser.go	/^func NewEmptyKeyContext() *KeyContext {$/;"	f	package:parser	typeref:typename:*KeyContext	signature:()
NewEmptyKeyedElementContext	parser/golang_parser.go	/^func NewEmptyKeyedElementContext() *KeyedElementContext {$/;"	f	package:parser	typeref:typename:*KeyedElementContext	signature:()
NewEmptyLabeledStmtContext	parser/golang_parser.go	/^func NewEmptyLabeledStmtContext() *LabeledStmtContext {$/;"	f	package:parser	typeref:typename:*LabeledStmtContext	signature:()
NewEmptyLiteralContext	parser/golang_parser.go	/^func NewEmptyLiteralContext() *LiteralContext {$/;"	f	package:parser	typeref:typename:*LiteralContext	signature:()
NewEmptyLiteralTypeContext	parser/golang_parser.go	/^func NewEmptyLiteralTypeContext() *LiteralTypeContext {$/;"	f	package:parser	typeref:typename:*LiteralTypeContext	signature:()
NewEmptyLiteralValueContext	parser/golang_parser.go	/^func NewEmptyLiteralValueContext() *LiteralValueContext {$/;"	f	package:parser	typeref:typename:*LiteralValueContext	signature:()
NewEmptyMapTypeContext	parser/golang_parser.go	/^func NewEmptyMapTypeContext() *MapTypeContext {$/;"	f	package:parser	typeref:typename:*MapTypeContext	signature:()
NewEmptyMethodDeclContext	parser/golang_parser.go	/^func NewEmptyMethodDeclContext() *MethodDeclContext {$/;"	f	package:parser	typeref:typename:*MethodDeclContext	signature:()
NewEmptyMethodExprContext	parser/golang_parser.go	/^func NewEmptyMethodExprContext() *MethodExprContext {$/;"	f	package:parser	typeref:typename:*MethodExprContext	signature:()
NewEmptyMethodSpecContext	parser/golang_parser.go	/^func NewEmptyMethodSpecContext() *MethodSpecContext {$/;"	f	package:parser	typeref:typename:*MethodSpecContext	signature:()
NewEmptyOperandContext	parser/golang_parser.go	/^func NewEmptyOperandContext() *OperandContext {$/;"	f	package:parser	typeref:typename:*OperandContext	signature:()
NewEmptyOperandNameContext	parser/golang_parser.go	/^func NewEmptyOperandNameContext() *OperandNameContext {$/;"	f	package:parser	typeref:typename:*OperandNameContext	signature:()
NewEmptyPackageClauseContext	parser/golang_parser.go	/^func NewEmptyPackageClauseContext() *PackageClauseContext {$/;"	f	package:parser	typeref:typename:*PackageClauseContext	signature:()
NewEmptyParameterDeclContext	parser/golang_parser.go	/^func NewEmptyParameterDeclContext() *ParameterDeclContext {$/;"	f	package:parser	typeref:typename:*ParameterDeclContext	signature:()
NewEmptyParameterListContext	parser/golang_parser.go	/^func NewEmptyParameterListContext() *ParameterListContext {$/;"	f	package:parser	typeref:typename:*ParameterListContext	signature:()
NewEmptyParametersContext	parser/golang_parser.go	/^func NewEmptyParametersContext() *ParametersContext {$/;"	f	package:parser	typeref:typename:*ParametersContext	signature:()
NewEmptyPointerTypeContext	parser/golang_parser.go	/^func NewEmptyPointerTypeContext() *PointerTypeContext {$/;"	f	package:parser	typeref:typename:*PointerTypeContext	signature:()
NewEmptyPrimaryExprContext	parser/golang_parser.go	/^func NewEmptyPrimaryExprContext() *PrimaryExprContext {$/;"	f	package:parser	typeref:typename:*PrimaryExprContext	signature:()
NewEmptyQualifiedIdentContext	parser/golang_parser.go	/^func NewEmptyQualifiedIdentContext() *QualifiedIdentContext {$/;"	f	package:parser	typeref:typename:*QualifiedIdentContext	signature:()
NewEmptyRangeClauseContext	parser/golang_parser.go	/^func NewEmptyRangeClauseContext() *RangeClauseContext {$/;"	f	package:parser	typeref:typename:*RangeClauseContext	signature:()
NewEmptyReceiverContext	parser/golang_parser.go	/^func NewEmptyReceiverContext() *ReceiverContext {$/;"	f	package:parser	typeref:typename:*ReceiverContext	signature:()
NewEmptyReceiverTypeContext	parser/golang_parser.go	/^func NewEmptyReceiverTypeContext() *ReceiverTypeContext {$/;"	f	package:parser	typeref:typename:*ReceiverTypeContext	signature:()
NewEmptyRecvStmtContext	parser/golang_parser.go	/^func NewEmptyRecvStmtContext() *RecvStmtContext {$/;"	f	package:parser	typeref:typename:*RecvStmtContext	signature:()
NewEmptyResultContext	parser/golang_parser.go	/^func NewEmptyResultContext() *ResultContext {$/;"	f	package:parser	typeref:typename:*ResultContext	signature:()
NewEmptyReturnStmtContext	parser/golang_parser.go	/^func NewEmptyReturnStmtContext() *ReturnStmtContext {$/;"	f	package:parser	typeref:typename:*ReturnStmtContext	signature:()
NewEmptySelectStmtContext	parser/golang_parser.go	/^func NewEmptySelectStmtContext() *SelectStmtContext {$/;"	f	package:parser	typeref:typename:*SelectStmtContext	signature:()
NewEmptySelectorContext	parser/golang_parser.go	/^func NewEmptySelectorContext() *SelectorContext {$/;"	f	package:parser	typeref:typename:*SelectorContext	signature:()
NewEmptySendStmtContext	parser/golang_parser.go	/^func NewEmptySendStmtContext() *SendStmtContext {$/;"	f	package:parser	typeref:typename:*SendStmtContext	signature:()
NewEmptyShortVarDeclContext	parser/golang_parser.go	/^func NewEmptyShortVarDeclContext() *ShortVarDeclContext {$/;"	f	package:parser	typeref:typename:*ShortVarDeclContext	signature:()
NewEmptySignatureContext	parser/golang_parser.go	/^func NewEmptySignatureContext() *SignatureContext {$/;"	f	package:parser	typeref:typename:*SignatureContext	signature:()
NewEmptySimpleStmtContext	parser/golang_parser.go	/^func NewEmptySimpleStmtContext() *SimpleStmtContext {$/;"	f	package:parser	typeref:typename:*SimpleStmtContext	signature:()
NewEmptySliceContext	parser/golang_parser.go	/^func NewEmptySliceContext() *SliceContext {$/;"	f	package:parser	typeref:typename:*SliceContext	signature:()
NewEmptySliceTypeContext	parser/golang_parser.go	/^func NewEmptySliceTypeContext() *SliceTypeContext {$/;"	f	package:parser	typeref:typename:*SliceTypeContext	signature:()
NewEmptySourceFileContext	parser/golang_parser.go	/^func NewEmptySourceFileContext() *SourceFileContext {$/;"	f	package:parser	typeref:typename:*SourceFileContext	signature:()
NewEmptyStatementContext	parser/golang_parser.go	/^func NewEmptyStatementContext() *StatementContext {$/;"	f	package:parser	typeref:typename:*StatementContext	signature:()
NewEmptyStatementListContext	parser/golang_parser.go	/^func NewEmptyStatementListContext() *StatementListContext {$/;"	f	package:parser	typeref:typename:*StatementListContext	signature:()
NewEmptyStmtContext	parser/golang_parser.go	/^func NewEmptyStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*EmptyStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewEmptyStructTypeContext	parser/golang_parser.go	/^func NewEmptyStructTypeContext() *StructTypeContext {$/;"	f	package:parser	typeref:typename:*StructTypeContext	signature:()
NewEmptySwitchStmtContext	parser/golang_parser.go	/^func NewEmptySwitchStmtContext() *SwitchStmtContext {$/;"	f	package:parser	typeref:typename:*SwitchStmtContext	signature:()
NewEmptyTopLevelDeclContext	parser/golang_parser.go	/^func NewEmptyTopLevelDeclContext() *TopLevelDeclContext {$/;"	f	package:parser	typeref:typename:*TopLevelDeclContext	signature:()
NewEmptyTypeAssertionContext	parser/golang_parser.go	/^func NewEmptyTypeAssertionContext() *TypeAssertionContext {$/;"	f	package:parser	typeref:typename:*TypeAssertionContext	signature:()
NewEmptyTypeCaseClauseContext	parser/golang_parser.go	/^func NewEmptyTypeCaseClauseContext() *TypeCaseClauseContext {$/;"	f	package:parser	typeref:typename:*TypeCaseClauseContext	signature:()
NewEmptyTypeDeclContext	parser/golang_parser.go	/^func NewEmptyTypeDeclContext() *TypeDeclContext {$/;"	f	package:parser	typeref:typename:*TypeDeclContext	signature:()
NewEmptyTypeListContext	parser/golang_parser.go	/^func NewEmptyTypeListContext() *TypeListContext {$/;"	f	package:parser	typeref:typename:*TypeListContext	signature:()
NewEmptyTypeLitContext	parser/golang_parser.go	/^func NewEmptyTypeLitContext() *TypeLitContext {$/;"	f	package:parser	typeref:typename:*TypeLitContext	signature:()
NewEmptyTypeNameContext	parser/golang_parser.go	/^func NewEmptyTypeNameContext() *TypeNameContext {$/;"	f	package:parser	typeref:typename:*TypeNameContext	signature:()
NewEmptyTypeSpecContext	parser/golang_parser.go	/^func NewEmptyTypeSpecContext() *TypeSpecContext {$/;"	f	package:parser	typeref:typename:*TypeSpecContext	signature:()
NewEmptyTypeSwitchCaseContext	parser/golang_parser.go	/^func NewEmptyTypeSwitchCaseContext() *TypeSwitchCaseContext {$/;"	f	package:parser	typeref:typename:*TypeSwitchCaseContext	signature:()
NewEmptyTypeSwitchGuardContext	parser/golang_parser.go	/^func NewEmptyTypeSwitchGuardContext() *TypeSwitchGuardContext {$/;"	f	package:parser	typeref:typename:*TypeSwitchGuardContext	signature:()
NewEmptyTypeSwitchStmtContext	parser/golang_parser.go	/^func NewEmptyTypeSwitchStmtContext() *TypeSwitchStmtContext {$/;"	f	package:parser	typeref:typename:*TypeSwitchStmtContext	signature:()
NewEmptyType_Context	parser/golang_parser.go	/^func NewEmptyType_Context() *Type_Context {$/;"	f	package:parser	typeref:typename:*Type_Context	signature:()
NewEmptyUnaryExprContext	parser/golang_parser.go	/^func NewEmptyUnaryExprContext() *UnaryExprContext {$/;"	f	package:parser	typeref:typename:*UnaryExprContext	signature:()
NewEmptyVarDeclContext	parser/golang_parser.go	/^func NewEmptyVarDeclContext() *VarDeclContext {$/;"	f	package:parser	typeref:typename:*VarDeclContext	signature:()
NewEmptyVarSpecContext	parser/golang_parser.go	/^func NewEmptyVarSpecContext() *VarSpecContext {$/;"	f	package:parser	typeref:typename:*VarSpecContext	signature:()
NewEosContext	parser/golang_parser.go	/^func NewEosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EosC/;"	f	package:parser	typeref:typename:*EosContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewExprCaseClauseContext	parser/golang_parser.go	/^func NewExprCaseClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState/;"	f	package:parser	typeref:typename:*ExprCaseClauseContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewExprSwitchCaseContext	parser/golang_parser.go	/^func NewExprSwitchCaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState/;"	f	package:parser	typeref:typename:*ExprSwitchCaseContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewExprSwitchStmtContext	parser/golang_parser.go	/^func NewExprSwitchStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState/;"	f	package:parser	typeref:typename:*ExprSwitchStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewExpressionContext	parser/golang_parser.go	/^func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*ExpressionContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewExpressionListContext	parser/golang_parser.go	/^func NewExpressionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState/;"	f	package:parser	typeref:typename:*ExpressionListContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewExpressionStmtContext	parser/golang_parser.go	/^func NewExpressionStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState/;"	f	package:parser	typeref:typename:*ExpressionStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewFallthroughStmtContext	parser/golang_parser.go	/^func NewFallthroughStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingStat/;"	f	package:parser	typeref:typename:*FallthroughStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewFieldDeclContext	parser/golang_parser.go	/^func NewFieldDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*FieldDeclContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewForClauseContext	parser/golang_parser.go	/^func NewForClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*ForClauseContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewForStmtContext	parser/golang_parser.go	/^func NewForStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) */;"	f	package:parser	typeref:typename:*ForStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewFunctionContext	parser/golang_parser.go	/^func NewFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) /;"	f	package:parser	typeref:typename:*FunctionContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewFunctionDeclContext	parser/golang_parser.go	/^func NewFunctionDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState i/;"	f	package:parser	typeref:typename:*FunctionDeclContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewFunctionLitContext	parser/golang_parser.go	/^func NewFunctionLitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState in/;"	f	package:parser	typeref:typename:*FunctionLitContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewFunctionTypeContext	parser/golang_parser.go	/^func NewFunctionTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState i/;"	f	package:parser	typeref:typename:*FunctionTypeContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewGoStmtContext	parser/golang_parser.go	/^func NewGoStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *G/;"	f	package:parser	typeref:typename:*GoStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewGolangLexer	parser/golang_lexer.go	/^func NewGolangLexer(input antlr.CharStream) *GolangLexer {$/;"	f	package:parser	typeref:typename:*GolangLexer	signature:(input antlr.CharStream)
NewGolangParser	parser/golang_parser.go	/^func NewGolangParser(input antlr.TokenStream) *GolangParser {$/;"	f	package:parser	typeref:typename:*GolangParser	signature:(input antlr.TokenStream)
NewGotoStmtContext	parser/golang_parser.go	/^func NewGotoStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) /;"	f	package:parser	typeref:typename:*GotoStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewIdentifierListContext	parser/golang_parser.go	/^func NewIdentifierListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState/;"	f	package:parser	typeref:typename:*IdentifierListContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewIfStmtContext	parser/golang_parser.go	/^func NewIfStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *I/;"	f	package:parser	typeref:typename:*IfStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewImportDeclContext	parser/golang_parser.go	/^func NewImportDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*ImportDeclContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewImportPathContext	parser/golang_parser.go	/^func NewImportPathContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*ImportPathContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewImportSpecContext	parser/golang_parser.go	/^func NewImportSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*ImportSpecContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewIncDecStmtContext	parser/golang_parser.go	/^func NewIncDecStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*IncDecStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewIndexContext	parser/golang_parser.go	/^func NewIndexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *In/;"	f	package:parser	typeref:typename:*IndexContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewInterfaceTypeContext	parser/golang_parser.go	/^func NewInterfaceTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState /;"	f	package:parser	typeref:typename:*InterfaceTypeContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewKeyContext	parser/golang_parser.go	/^func NewKeyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeyC/;"	f	package:parser	typeref:typename:*KeyContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewKeyedElementContext	parser/golang_parser.go	/^func NewKeyedElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState i/;"	f	package:parser	typeref:typename:*KeyedElementContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewLabeledStmtContext	parser/golang_parser.go	/^func NewLabeledStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState in/;"	f	package:parser	typeref:typename:*LabeledStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewLiteralContext	parser/golang_parser.go	/^func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) */;"	f	package:parser	typeref:typename:*LiteralContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewLiteralTypeContext	parser/golang_parser.go	/^func NewLiteralTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState in/;"	f	package:parser	typeref:typename:*LiteralTypeContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewLiteralValueContext	parser/golang_parser.go	/^func NewLiteralValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState i/;"	f	package:parser	typeref:typename:*LiteralValueContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewMapTypeContext	parser/golang_parser.go	/^func NewMapTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) */;"	f	package:parser	typeref:typename:*MapTypeContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewMethodDeclContext	parser/golang_parser.go	/^func NewMethodDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*MethodDeclContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewMethodExprContext	parser/golang_parser.go	/^func NewMethodExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*MethodExprContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewMethodSpecContext	parser/golang_parser.go	/^func NewMethodSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*MethodSpecContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewOperandContext	parser/golang_parser.go	/^func NewOperandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) */;"	f	package:parser	typeref:typename:*OperandContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewOperandNameContext	parser/golang_parser.go	/^func NewOperandNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState in/;"	f	package:parser	typeref:typename:*OperandNameContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewPackageClauseContext	parser/golang_parser.go	/^func NewPackageClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState /;"	f	package:parser	typeref:typename:*PackageClauseContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewParameterDeclContext	parser/golang_parser.go	/^func NewParameterDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState /;"	f	package:parser	typeref:typename:*ParameterDeclContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewParameterListContext	parser/golang_parser.go	/^func NewParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState /;"	f	package:parser	typeref:typename:*ParameterListContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewParametersContext	parser/golang_parser.go	/^func NewParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*ParametersContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewPointerTypeContext	parser/golang_parser.go	/^func NewPointerTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState in/;"	f	package:parser	typeref:typename:*PointerTypeContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewPrimaryExprContext	parser/golang_parser.go	/^func NewPrimaryExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState in/;"	f	package:parser	typeref:typename:*PrimaryExprContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewQualifiedIdentContext	parser/golang_parser.go	/^func NewQualifiedIdentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState/;"	f	package:parser	typeref:typename:*QualifiedIdentContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewRangeClauseContext	parser/golang_parser.go	/^func NewRangeClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState in/;"	f	package:parser	typeref:typename:*RangeClauseContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewReceiverContext	parser/golang_parser.go	/^func NewReceiverContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) /;"	f	package:parser	typeref:typename:*ReceiverContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewReceiverTypeContext	parser/golang_parser.go	/^func NewReceiverTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState i/;"	f	package:parser	typeref:typename:*ReceiverTypeContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewRecvStmtContext	parser/golang_parser.go	/^func NewRecvStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) /;"	f	package:parser	typeref:typename:*RecvStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewResultContext	parser/golang_parser.go	/^func NewResultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *R/;"	f	package:parser	typeref:typename:*ResultContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewReturnStmtContext	parser/golang_parser.go	/^func NewReturnStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*ReturnStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewSelectStmtContext	parser/golang_parser.go	/^func NewSelectStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*SelectStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewSelectorContext	parser/golang_parser.go	/^func NewSelectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) /;"	f	package:parser	typeref:typename:*SelectorContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewSendStmtContext	parser/golang_parser.go	/^func NewSendStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) /;"	f	package:parser	typeref:typename:*SendStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewShortVarDeclContext	parser/golang_parser.go	/^func NewShortVarDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState i/;"	f	package:parser	typeref:typename:*ShortVarDeclContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewSignatureContext	parser/golang_parser.go	/^func NewSignatureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*SignatureContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewSimpleStmtContext	parser/golang_parser.go	/^func NewSimpleStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*SimpleStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewSliceContext	parser/golang_parser.go	/^func NewSliceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sl/;"	f	package:parser	typeref:typename:*SliceContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewSliceTypeContext	parser/golang_parser.go	/^func NewSliceTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*SliceTypeContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewSourceFileContext	parser/golang_parser.go	/^func NewSourceFileContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*SourceFileContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewStatementContext	parser/golang_parser.go	/^func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*StatementContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewStatementListContext	parser/golang_parser.go	/^func NewStatementListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState /;"	f	package:parser	typeref:typename:*StatementListContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewStructTypeContext	parser/golang_parser.go	/^func NewStructTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*StructTypeContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewSwitchStmtContext	parser/golang_parser.go	/^func NewSwitchStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*SwitchStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewTopLevelDeclContext	parser/golang_parser.go	/^func NewTopLevelDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState i/;"	f	package:parser	typeref:typename:*TopLevelDeclContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewTypeAssertionContext	parser/golang_parser.go	/^func NewTypeAssertionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState /;"	f	package:parser	typeref:typename:*TypeAssertionContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewTypeCaseClauseContext	parser/golang_parser.go	/^func NewTypeCaseClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState/;"	f	package:parser	typeref:typename:*TypeCaseClauseContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewTypeDeclContext	parser/golang_parser.go	/^func NewTypeDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) /;"	f	package:parser	typeref:typename:*TypeDeclContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewTypeListContext	parser/golang_parser.go	/^func NewTypeListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) /;"	f	package:parser	typeref:typename:*TypeListContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewTypeLitContext	parser/golang_parser.go	/^func NewTypeLitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) */;"	f	package:parser	typeref:typename:*TypeLitContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewTypeNameContext	parser/golang_parser.go	/^func NewTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) /;"	f	package:parser	typeref:typename:*TypeNameContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewTypeSpecContext	parser/golang_parser.go	/^func NewTypeSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) /;"	f	package:parser	typeref:typename:*TypeSpecContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewTypeSwitchCaseContext	parser/golang_parser.go	/^func NewTypeSwitchCaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState/;"	f	package:parser	typeref:typename:*TypeSwitchCaseContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewTypeSwitchGuardContext	parser/golang_parser.go	/^func NewTypeSwitchGuardContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingStat/;"	f	package:parser	typeref:typename:*TypeSwitchGuardContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewTypeSwitchStmtContext	parser/golang_parser.go	/^func NewTypeSwitchStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState/;"	f	package:parser	typeref:typename:*TypeSwitchStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewType_Context	parser/golang_parser.go	/^func NewType_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ty/;"	f	package:parser	typeref:typename:*Type_Context	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewUnaryExprContext	parser/golang_parser.go	/^func NewUnaryExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*UnaryExprContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewVarDeclContext	parser/golang_parser.go	/^func NewVarDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) */;"	f	package:parser	typeref:typename:*VarDeclContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
NewVarSpecContext	parser/golang_parser.go	/^func NewVarSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) */;"	f	package:parser	typeref:typename:*VarSpecContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
Not	parser/golang_parser.go	/^func (s *UnaryExprContext) Not() antlr.TerminalNode {$/;"	f	struct:parser.UnaryExprContext	typeref:typename:antlr.TerminalNode	signature:()
NotEquals	parser/golang_parser.go	/^func (s *ExpressionContext) NotEquals() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
Operand	parser/golang_parser.go	/^func (p *GolangParser) Operand() (localctx IOperandContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IOperandContext)	signature:()
Operand	parser/golang_parser.go	/^func (s *PrimaryExprContext) Operand() IOperandContext {$/;"	f	struct:parser.PrimaryExprContext	typeref:typename:IOperandContext	signature:()
OperandContext	parser/golang_parser.go	/^type OperandContext struct {$/;"	s	package:parser
OperandName	parser/golang_parser.go	/^func (p *GolangParser) OperandName() (localctx IOperandNameContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IOperandNameContext)	signature:()
OperandName	parser/golang_parser.go	/^func (s *OperandContext) OperandName() IOperandNameContext {$/;"	f	struct:parser.OperandContext	typeref:typename:IOperandNameContext	signature:()
OperandNameContext	parser/golang_parser.go	/^type OperandNameContext struct {$/;"	s	package:parser
Or	parser/golang_parser.go	/^func (s *ExpressionContext) Or() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
Package	parser/golang_parser.go	/^func (s *PackageClauseContext) Package() antlr.TerminalNode {$/;"	f	struct:parser.PackageClauseContext	typeref:typename:antlr.TerminalNode	signature:()
PackageClause	parser/golang_parser.go	/^func (p *GolangParser) PackageClause() (localctx IPackageClauseContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IPackageClauseContext)	signature:()
PackageClause	parser/golang_parser.go	/^func (s *SourceFileContext) PackageClause() IPackageClauseContext {$/;"	f	struct:parser.SourceFileContext	typeref:typename:IPackageClauseContext	signature:()
PackageClauseContext	parser/golang_parser.go	/^type PackageClauseContext struct {$/;"	s	package:parser
ParameterDecl	parser/golang_parser.go	/^func (p *GolangParser) ParameterDecl() (localctx IParameterDeclContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IParameterDeclContext)	signature:()
ParameterDecl	parser/golang_parser.go	/^func (s *ParameterListContext) ParameterDecl(i int) IParameterDeclContext {$/;"	f	struct:parser.ParameterListContext	typeref:typename:IParameterDeclContext	signature:(i int)
ParameterDeclContext	parser/golang_parser.go	/^type ParameterDeclContext struct {$/;"	s	package:parser
ParameterList	parser/golang_parser.go	/^func (p *GolangParser) ParameterList() (localctx IParameterListContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IParameterListContext)	signature:()
ParameterList	parser/golang_parser.go	/^func (s *ParametersContext) ParameterList() IParameterListContext {$/;"	f	struct:parser.ParametersContext	typeref:typename:IParameterListContext	signature:()
ParameterListContext	parser/golang_parser.go	/^type ParameterListContext struct {$/;"	s	package:parser
Parameters	parser/golang_parser.go	/^func (p *GolangParser) Parameters() (localctx IParametersContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IParametersContext)	signature:()
Parameters	parser/golang_parser.go	/^func (s *MethodSpecContext) Parameters() IParametersContext {$/;"	f	struct:parser.MethodSpecContext	typeref:typename:IParametersContext	signature:()
Parameters	parser/golang_parser.go	/^func (s *ReceiverContext) Parameters() IParametersContext {$/;"	f	struct:parser.ReceiverContext	typeref:typename:IParametersContext	signature:()
Parameters	parser/golang_parser.go	/^func (s *ResultContext) Parameters() IParametersContext {$/;"	f	struct:parser.ResultContext	typeref:typename:IParametersContext	signature:()
Parameters	parser/golang_parser.go	/^func (s *SignatureContext) Parameters() IParametersContext {$/;"	f	struct:parser.SignatureContext	typeref:typename:IParametersContext	signature:()
ParametersContext	parser/golang_parser.go	/^type ParametersContext struct {$/;"	s	package:parser
Plus	parser/golang_parser.go	/^func (s *Assign_opContext) Plus() antlr.TerminalNode {$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.TerminalNode	signature:()
Plus	parser/golang_parser.go	/^func (s *ExpressionContext) Plus() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
Plus	parser/golang_parser.go	/^func (s *UnaryExprContext) Plus() antlr.TerminalNode {$/;"	f	struct:parser.UnaryExprContext	typeref:typename:antlr.TerminalNode	signature:()
PlusPlus	parser/golang_parser.go	/^func (s *IncDecStmtContext) PlusPlus() antlr.TerminalNode {$/;"	f	struct:parser.IncDecStmtContext	typeref:typename:antlr.TerminalNode	signature:()
PointerType	parser/golang_parser.go	/^func (p *GolangParser) PointerType() (localctx IPointerTypeContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IPointerTypeContext)	signature:()
PointerType	parser/golang_parser.go	/^func (s *TypeLitContext) PointerType() IPointerTypeContext {$/;"	f	struct:parser.TypeLitContext	typeref:typename:IPointerTypeContext	signature:()
PointerTypeContext	parser/golang_parser.go	/^type PointerTypeContext struct {$/;"	s	package:parser
PrimaryExpr	parser/golang_parser.go	/^func (p *GolangParser) PrimaryExpr() (localctx IPrimaryExprContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IPrimaryExprContext)	signature:()
PrimaryExpr	parser/golang_parser.go	/^func (s *PrimaryExprContext) PrimaryExpr() IPrimaryExprContext {$/;"	f	struct:parser.PrimaryExprContext	typeref:typename:IPrimaryExprContext	signature:()
PrimaryExpr	parser/golang_parser.go	/^func (s *TypeSwitchGuardContext) PrimaryExpr() IPrimaryExprContext {$/;"	f	struct:parser.TypeSwitchGuardContext	typeref:typename:IPrimaryExprContext	signature:()
PrimaryExpr	parser/golang_parser.go	/^func (s *UnaryExprContext) PrimaryExpr() IPrimaryExprContext {$/;"	f	struct:parser.UnaryExprContext	typeref:typename:IPrimaryExprContext	signature:()
PrimaryExprContext	parser/golang_parser.go	/^type PrimaryExprContext struct {$/;"	s	package:parser
PrimaryExpr_Sempred	parser/golang_parser.go	/^func (p *GolangParser) PrimaryExpr_Sempred(localctx antlr.RuleContext, predIndex int) bool {$/;"	f	struct:parser.GolangParser	typeref:typename:bool	signature:(localctx antlr.RuleContext, predIndex int)
QualifiedIdent	parser/golang_parser.go	/^func (p *GolangParser) QualifiedIdent() (localctx IQualifiedIdentContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IQualifiedIdentContext)	signature:()
QualifiedIdent	parser/golang_parser.go	/^func (s *OperandNameContext) QualifiedIdent() IQualifiedIdentContext {$/;"	f	struct:parser.OperandNameContext	typeref:typename:IQualifiedIdentContext	signature:()
QualifiedIdent	parser/golang_parser.go	/^func (s *TypeNameContext) QualifiedIdent() IQualifiedIdentContext {$/;"	f	struct:parser.TypeNameContext	typeref:typename:IQualifiedIdentContext	signature:()
QualifiedIdentContext	parser/golang_parser.go	/^type QualifiedIdentContext struct {$/;"	s	package:parser
RUNE_LIT	parser/golang_parser.go	/^func (s *BasicLitContext) RUNE_LIT() antlr.TerminalNode {$/;"	f	struct:parser.BasicLitContext	typeref:typename:antlr.TerminalNode	signature:()
Range	parser/golang_parser.go	/^func (s *RangeClauseContext) Range() antlr.TerminalNode {$/;"	f	struct:parser.RangeClauseContext	typeref:typename:antlr.TerminalNode	signature:()
RangeClause	parser/golang_parser.go	/^func (p *GolangParser) RangeClause() (localctx IRangeClauseContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IRangeClauseContext)	signature:()
RangeClause	parser/golang_parser.go	/^func (s *ForStmtContext) RangeClause() IRangeClauseContext {$/;"	f	struct:parser.ForStmtContext	typeref:typename:IRangeClauseContext	signature:()
RangeClauseContext	parser/golang_parser.go	/^type RangeClauseContext struct {$/;"	s	package:parser
Receiver	parser/golang_parser.go	/^func (p *GolangParser) Receiver() (localctx IReceiverContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IReceiverContext)	signature:()
Receiver	parser/golang_parser.go	/^func (s *MethodDeclContext) Receiver() IReceiverContext {$/;"	f	struct:parser.MethodDeclContext	typeref:typename:IReceiverContext	signature:()
ReceiverContext	parser/golang_parser.go	/^type ReceiverContext struct {$/;"	s	package:parser
ReceiverType	parser/golang_parser.go	/^func (p *GolangParser) ReceiverType() (localctx IReceiverTypeContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IReceiverTypeContext)	signature:()
ReceiverType	parser/golang_parser.go	/^func (s *MethodExprContext) ReceiverType() IReceiverTypeContext {$/;"	f	struct:parser.MethodExprContext	typeref:typename:IReceiverTypeContext	signature:()
ReceiverType	parser/golang_parser.go	/^func (s *ReceiverTypeContext) ReceiverType() IReceiverTypeContext {$/;"	f	struct:parser.ReceiverTypeContext	typeref:typename:IReceiverTypeContext	signature:()
ReceiverTypeContext	parser/golang_parser.go	/^type ReceiverTypeContext struct {$/;"	s	package:parser
RecvStmt	parser/golang_parser.go	/^func (p *GolangParser) RecvStmt() (localctx IRecvStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IRecvStmtContext)	signature:()
RecvStmt	parser/golang_parser.go	/^func (s *CommCaseContext) RecvStmt() IRecvStmtContext {$/;"	f	struct:parser.CommCaseContext	typeref:typename:IRecvStmtContext	signature:()
RecvStmtContext	parser/golang_parser.go	/^type RecvStmtContext struct {$/;"	s	package:parser
Result	parser/golang_parser.go	/^func (p *GolangParser) Result() (localctx IResultContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IResultContext)	signature:()
Result	parser/golang_parser.go	/^func (s *MethodSpecContext) Result() IResultContext {$/;"	f	struct:parser.MethodSpecContext	typeref:typename:IResultContext	signature:()
Result	parser/golang_parser.go	/^func (s *SignatureContext) Result() IResultContext {$/;"	f	struct:parser.SignatureContext	typeref:typename:IResultContext	signature:()
ResultContext	parser/golang_parser.go	/^type ResultContext struct {$/;"	s	package:parser
Return	parser/golang_parser.go	/^func (s *ReturnStmtContext) Return() antlr.TerminalNode {$/;"	f	struct:parser.ReturnStmtContext	typeref:typename:antlr.TerminalNode	signature:()
ReturnStmt	parser/golang_parser.go	/^func (p *GolangParser) ReturnStmt() (localctx IReturnStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IReturnStmtContext)	signature:()
ReturnStmt	parser/golang_parser.go	/^func (s *StatementContext) ReturnStmt() IReturnStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:IReturnStmtContext	signature:()
ReturnStmtContext	parser/golang_parser.go	/^type ReturnStmtContext struct {$/;"	s	package:parser
RightShiftArithmetic	parser/golang_parser.go	/^func (s *Assign_opContext) RightShiftArithmetic() antlr.TerminalNode {$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.TerminalNode	signature:()
RightShiftArithmetic	parser/golang_parser.go	/^func (s *ExpressionContext) RightShiftArithmetic() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
STRING_LIT	parser/golang_parser.go	/^func (s *BasicLitContext) STRING_LIT() antlr.TerminalNode {$/;"	f	struct:parser.BasicLitContext	typeref:typename:antlr.TerminalNode	signature:()
STRING_LIT	parser/golang_parser.go	/^func (s *FieldDeclContext) STRING_LIT() antlr.TerminalNode {$/;"	f	struct:parser.FieldDeclContext	typeref:typename:antlr.TerminalNode	signature:()
STRING_LIT	parser/golang_parser.go	/^func (s *ImportPathContext) STRING_LIT() antlr.TerminalNode {$/;"	f	struct:parser.ImportPathContext	typeref:typename:antlr.TerminalNode	signature:()
Select	parser/golang_parser.go	/^func (s *SelectStmtContext) Select() antlr.TerminalNode {$/;"	f	struct:parser.SelectStmtContext	typeref:typename:antlr.TerminalNode	signature:()
SelectStmt	parser/golang_parser.go	/^func (p *GolangParser) SelectStmt() (localctx ISelectStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ISelectStmtContext)	signature:()
SelectStmt	parser/golang_parser.go	/^func (s *StatementContext) SelectStmt() ISelectStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:ISelectStmtContext	signature:()
SelectStmtContext	parser/golang_parser.go	/^type SelectStmtContext struct {$/;"	s	package:parser
Selector	parser/golang_parser.go	/^func (p *GolangParser) Selector() (localctx ISelectorContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ISelectorContext)	signature:()
Selector	parser/golang_parser.go	/^func (s *PrimaryExprContext) Selector() ISelectorContext {$/;"	f	struct:parser.PrimaryExprContext	typeref:typename:ISelectorContext	signature:()
SelectorContext	parser/golang_parser.go	/^type SelectorContext struct {$/;"	s	package:parser
Sempred	parser/golang_parser.go	/^func (p *GolangParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {$/;"	f	struct:parser.GolangParser	typeref:typename:bool	signature:(localctx antlr.RuleContext, ruleIndex, predIndex int)
SendStmt	parser/golang_parser.go	/^func (p *GolangParser) SendStmt() (localctx ISendStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ISendStmtContext)	signature:()
SendStmt	parser/golang_parser.go	/^func (s *CommCaseContext) SendStmt() ISendStmtContext {$/;"	f	struct:parser.CommCaseContext	typeref:typename:ISendStmtContext	signature:()
SendStmt	parser/golang_parser.go	/^func (s *SimpleStmtContext) SendStmt() ISendStmtContext {$/;"	f	struct:parser.SimpleStmtContext	typeref:typename:ISendStmtContext	signature:()
SendStmtContext	parser/golang_parser.go	/^type SendStmtContext struct {$/;"	s	package:parser
ShortVarDecl	parser/golang_parser.go	/^func (p *GolangParser) ShortVarDecl() (localctx IShortVarDeclContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IShortVarDeclContext)	signature:()
ShortVarDecl	parser/golang_parser.go	/^func (s *SimpleStmtContext) ShortVarDecl() IShortVarDeclContext {$/;"	f	struct:parser.SimpleStmtContext	typeref:typename:IShortVarDeclContext	signature:()
ShortVarDeclContext	parser/golang_parser.go	/^type ShortVarDeclContext struct {$/;"	s	package:parser
Signature	parser/golang_parser.go	/^func (p *GolangParser) Signature() (localctx ISignatureContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ISignatureContext)	signature:()
Signature	parser/golang_parser.go	/^func (s *FunctionContext) Signature() ISignatureContext {$/;"	f	struct:parser.FunctionContext	typeref:typename:ISignatureContext	signature:()
Signature	parser/golang_parser.go	/^func (s *FunctionDeclContext) Signature() ISignatureContext {$/;"	f	struct:parser.FunctionDeclContext	typeref:typename:ISignatureContext	signature:()
Signature	parser/golang_parser.go	/^func (s *FunctionTypeContext) Signature() ISignatureContext {$/;"	f	struct:parser.FunctionTypeContext	typeref:typename:ISignatureContext	signature:()
Signature	parser/golang_parser.go	/^func (s *MethodDeclContext) Signature() ISignatureContext {$/;"	f	struct:parser.MethodDeclContext	typeref:typename:ISignatureContext	signature:()
SignatureContext	parser/golang_parser.go	/^type SignatureContext struct {$/;"	s	package:parser
Signature_Sempred	parser/golang_parser.go	/^func (p *GolangParser) Signature_Sempred(localctx antlr.RuleContext, predIndex int) bool {$/;"	f	struct:parser.GolangParser	typeref:typename:bool	signature:(localctx antlr.RuleContext, predIndex int)
SimpleStmt	parser/golang_parser.go	/^func (p *GolangParser) SimpleStmt() (localctx ISimpleStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ISimpleStmtContext)	signature:()
SimpleStmt	parser/golang_parser.go	/^func (s *ExprSwitchStmtContext) SimpleStmt() ISimpleStmtContext {$/;"	f	struct:parser.ExprSwitchStmtContext	typeref:typename:ISimpleStmtContext	signature:()
SimpleStmt	parser/golang_parser.go	/^func (s *ForClauseContext) SimpleStmt(i int) ISimpleStmtContext {$/;"	f	struct:parser.ForClauseContext	typeref:typename:ISimpleStmtContext	signature:(i int)
SimpleStmt	parser/golang_parser.go	/^func (s *IfStmtContext) SimpleStmt() ISimpleStmtContext {$/;"	f	struct:parser.IfStmtContext	typeref:typename:ISimpleStmtContext	signature:()
SimpleStmt	parser/golang_parser.go	/^func (s *StatementContext) SimpleStmt() ISimpleStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:ISimpleStmtContext	signature:()
SimpleStmt	parser/golang_parser.go	/^func (s *TypeSwitchStmtContext) SimpleStmt() ISimpleStmtContext {$/;"	f	struct:parser.TypeSwitchStmtContext	typeref:typename:ISimpleStmtContext	signature:()
SimpleStmtContext	parser/golang_parser.go	/^type SimpleStmtContext struct {$/;"	s	package:parser
Slice	parser/golang_parser.go	/^func (p *GolangParser) Slice() (localctx ISliceContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ISliceContext)	signature:()
Slice	parser/golang_parser.go	/^func (s *PrimaryExprContext) Slice() ISliceContext {$/;"	f	struct:parser.PrimaryExprContext	typeref:typename:ISliceContext	signature:()
SliceContext	parser/golang_parser.go	/^type SliceContext struct {$/;"	s	package:parser
SliceType	parser/golang_parser.go	/^func (p *GolangParser) SliceType() (localctx ISliceTypeContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ISliceTypeContext)	signature:()
SliceType	parser/golang_parser.go	/^func (s *LiteralTypeContext) SliceType() ISliceTypeContext {$/;"	f	struct:parser.LiteralTypeContext	typeref:typename:ISliceTypeContext	signature:()
SliceType	parser/golang_parser.go	/^func (s *TypeLitContext) SliceType() ISliceTypeContext {$/;"	f	struct:parser.TypeLitContext	typeref:typename:ISliceTypeContext	signature:()
SliceTypeContext	parser/golang_parser.go	/^type SliceTypeContext struct {$/;"	s	package:parser
SourceFile	parser/golang_parser.go	/^func (p *GolangParser) SourceFile() (localctx ISourceFileContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ISourceFileContext)	signature:()
SourceFileContext	parser/golang_parser.go	/^type SourceFileContext struct {$/;"	s	package:parser
Statement	parser/golang_parser.go	/^func (p *GolangParser) Statement() (localctx IStatementContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IStatementContext)	signature:()
Statement	parser/golang_parser.go	/^func (s *LabeledStmtContext) Statement() IStatementContext {$/;"	f	struct:parser.LabeledStmtContext	typeref:typename:IStatementContext	signature:()
Statement	parser/golang_parser.go	/^func (s *StatementListContext) Statement(i int) IStatementContext {$/;"	f	struct:parser.StatementListContext	typeref:typename:IStatementContext	signature:(i int)
StatementContext	parser/golang_parser.go	/^type StatementContext struct {$/;"	s	package:parser
StatementList	parser/golang_parser.go	/^func (p *GolangParser) StatementList() (localctx IStatementListContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IStatementListContext)	signature:()
StatementList	parser/golang_parser.go	/^func (s *BlockContext) StatementList() IStatementListContext {$/;"	f	struct:parser.BlockContext	typeref:typename:IStatementListContext	signature:()
StatementList	parser/golang_parser.go	/^func (s *CommClauseContext) StatementList() IStatementListContext {$/;"	f	struct:parser.CommClauseContext	typeref:typename:IStatementListContext	signature:()
StatementList	parser/golang_parser.go	/^func (s *ExprCaseClauseContext) StatementList() IStatementListContext {$/;"	f	struct:parser.ExprCaseClauseContext	typeref:typename:IStatementListContext	signature:()
StatementList	parser/golang_parser.go	/^func (s *TypeCaseClauseContext) StatementList() IStatementListContext {$/;"	f	struct:parser.TypeCaseClauseContext	typeref:typename:IStatementListContext	signature:()
StatementListContext	parser/golang_parser.go	/^type StatementListContext struct {$/;"	s	package:parser
Struct	parser/golang_parser.go	/^func (s *StructTypeContext) Struct() antlr.TerminalNode {$/;"	f	struct:parser.StructTypeContext	typeref:typename:antlr.TerminalNode	signature:()
StructType	parser/golang_parser.go	/^func (p *GolangParser) StructType() (localctx IStructTypeContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IStructTypeContext)	signature:()
StructType	parser/golang_parser.go	/^func (s *LiteralTypeContext) StructType() IStructTypeContext {$/;"	f	struct:parser.LiteralTypeContext	typeref:typename:IStructTypeContext	signature:()
StructType	parser/golang_parser.go	/^func (s *TypeLitContext) StructType() IStructTypeContext {$/;"	f	struct:parser.TypeLitContext	typeref:typename:IStructTypeContext	signature:()
StructTypeContext	parser/golang_parser.go	/^type StructTypeContext struct {$/;"	s	package:parser
Switch	parser/golang_parser.go	/^func (s *ExprSwitchStmtContext) Switch() antlr.TerminalNode {$/;"	f	struct:parser.ExprSwitchStmtContext	typeref:typename:antlr.TerminalNode	signature:()
Switch	parser/golang_parser.go	/^func (s *TypeSwitchStmtContext) Switch() antlr.TerminalNode {$/;"	f	struct:parser.TypeSwitchStmtContext	typeref:typename:antlr.TerminalNode	signature:()
SwitchStmt	parser/golang_parser.go	/^func (p *GolangParser) SwitchStmt() (localctx ISwitchStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ISwitchStmtContext)	signature:()
SwitchStmt	parser/golang_parser.go	/^func (s *StatementContext) SwitchStmt() ISwitchStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:ISwitchStmtContext	signature:()
SwitchStmtContext	parser/golang_parser.go	/^type SwitchStmtContext struct {$/;"	s	package:parser
ToStringTree	parser/golang_parser.go	/^func (s *AnonymousFieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string /;"	f	struct:parser.AnonymousFieldContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ArgumentsContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ArrayLengthContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ArrayLengthContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ArrayTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ArrayTypeContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *Assign_opContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.Assign_opContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *AssignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.AssignmentContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *BasicLitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.BasicLitContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *BlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.BlockContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *BreakStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.BreakStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ChannelTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ChannelTypeContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *CommCaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.CommCaseContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *CommClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.CommClauseContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *CompositeLitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.CompositeLitContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ConstDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ConstDeclContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ConstSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ConstSpecContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ContinueStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ContinueStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ConversionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ConversionContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *DeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.DeclarationContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *DeferStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.DeferStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ElementContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ElementListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ElementListContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ElementTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ElementTypeContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *EmptyStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.EmptyStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *EosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.EosContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ExprCaseClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string /;"	f	struct:parser.ExprCaseClauseContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ExprSwitchCaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string /;"	f	struct:parser.ExprSwitchCaseContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ExprSwitchStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string /;"	f	struct:parser.ExprSwitchStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ExpressionContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ExpressionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string /;"	f	struct:parser.ExpressionListContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ExpressionStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string /;"	f	struct:parser.ExpressionStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *FallthroughStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string/;"	f	struct:parser.FallthroughStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *FieldDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.FieldDeclContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ForClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ForClauseContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ForStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ForStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *FunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.FunctionContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *FunctionDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.FunctionDeclContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *FunctionLitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.FunctionLitContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *FunctionTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.FunctionTypeContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *GoStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.GoStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *GotoStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.GotoStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *IdentifierListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string /;"	f	struct:parser.IdentifierListContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *IfStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.IfStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ImportDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ImportDeclContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ImportPathContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ImportPathContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ImportSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ImportSpecContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *IncDecStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.IncDecStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *IndexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.IndexContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *InterfaceTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.InterfaceTypeContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *KeyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.KeyContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *KeyedElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.KeyedElementContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *LabeledStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.LabeledStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.LiteralContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *LiteralTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.LiteralTypeContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *LiteralValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.LiteralValueContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *MapTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.MapTypeContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *MethodDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.MethodDeclContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *MethodExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.MethodExprContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *MethodSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.MethodSpecContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *OperandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.OperandContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *OperandNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.OperandNameContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *PackageClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.PackageClauseContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ParameterDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ParameterDeclContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ParameterListContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ParametersContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *PointerTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.PointerTypeContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *PrimaryExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.PrimaryExprContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *QualifiedIdentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string /;"	f	struct:parser.QualifiedIdentContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *RangeClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.RangeClauseContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ReceiverContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ReceiverContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ReceiverTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ReceiverTypeContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *RecvStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.RecvStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ResultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ResultContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ReturnStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ReturnStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *SelectStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.SelectStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *SelectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.SelectorContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *SendStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.SendStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *ShortVarDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ShortVarDeclContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *SignatureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.SignatureContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *SimpleStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.SimpleStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *SliceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.SliceContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *SliceTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.SliceTypeContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *SourceFileContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.SourceFileContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.StatementContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *StatementListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.StatementListContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *StructTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.StructTypeContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *SwitchStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.SwitchStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *TopLevelDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.TopLevelDeclContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *TypeAssertionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.TypeAssertionContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *TypeCaseClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string /;"	f	struct:parser.TypeCaseClauseContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *TypeDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.TypeDeclContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *TypeListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.TypeListContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *TypeLitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.TypeLitContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *TypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.TypeNameContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *TypeSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.TypeSpecContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *TypeSwitchCaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string /;"	f	struct:parser.TypeSwitchCaseContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *TypeSwitchGuardContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string/;"	f	struct:parser.TypeSwitchGuardContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *TypeSwitchStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string /;"	f	struct:parser.TypeSwitchStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *Type_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.Type_Context	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *UnaryExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.UnaryExprContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *VarDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.VarDeclContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
ToStringTree	parser/golang_parser.go	/^func (s *VarSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.VarSpecContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
TopLevelDecl	parser/golang_parser.go	/^func (p *GolangParser) TopLevelDecl() (localctx ITopLevelDeclContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ITopLevelDeclContext)	signature:()
TopLevelDecl	parser/golang_parser.go	/^func (s *SourceFileContext) TopLevelDecl(i int) ITopLevelDeclContext {$/;"	f	struct:parser.SourceFileContext	typeref:typename:ITopLevelDeclContext	signature:(i int)
TopLevelDeclContext	parser/golang_parser.go	/^type TopLevelDeclContext struct {$/;"	s	package:parser
Type	parser/golang_parser.go	/^func (s *TypeDeclContext) Type() antlr.TerminalNode {$/;"	f	struct:parser.TypeDeclContext	typeref:typename:antlr.TerminalNode	signature:()
Type	parser/golang_parser.go	/^func (s *TypeSwitchGuardContext) Type() antlr.TerminalNode {$/;"	f	struct:parser.TypeSwitchGuardContext	typeref:typename:antlr.TerminalNode	signature:()
TypeAssertion	parser/golang_parser.go	/^func (p *GolangParser) TypeAssertion() (localctx ITypeAssertionContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ITypeAssertionContext)	signature:()
TypeAssertion	parser/golang_parser.go	/^func (s *PrimaryExprContext) TypeAssertion() ITypeAssertionContext {$/;"	f	struct:parser.PrimaryExprContext	typeref:typename:ITypeAssertionContext	signature:()
TypeAssertionContext	parser/golang_parser.go	/^type TypeAssertionContext struct {$/;"	s	package:parser
TypeCaseClause	parser/golang_parser.go	/^func (p *GolangParser) TypeCaseClause() (localctx ITypeCaseClauseContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ITypeCaseClauseContext)	signature:()
TypeCaseClause	parser/golang_parser.go	/^func (s *TypeSwitchStmtContext) TypeCaseClause(i int) ITypeCaseClauseContext {$/;"	f	struct:parser.TypeSwitchStmtContext	typeref:typename:ITypeCaseClauseContext	signature:(i int)
TypeCaseClauseContext	parser/golang_parser.go	/^type TypeCaseClauseContext struct {$/;"	s	package:parser
TypeDecl	parser/golang_parser.go	/^func (p *GolangParser) TypeDecl() (localctx ITypeDeclContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ITypeDeclContext)	signature:()
TypeDecl	parser/golang_parser.go	/^func (s *DeclarationContext) TypeDecl() ITypeDeclContext {$/;"	f	struct:parser.DeclarationContext	typeref:typename:ITypeDeclContext	signature:()
TypeDeclContext	parser/golang_parser.go	/^type TypeDeclContext struct {$/;"	s	package:parser
TypeList	parser/golang_parser.go	/^func (p *GolangParser) TypeList() (localctx ITypeListContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ITypeListContext)	signature:()
TypeList	parser/golang_parser.go	/^func (s *TypeSwitchCaseContext) TypeList() ITypeListContext {$/;"	f	struct:parser.TypeSwitchCaseContext	typeref:typename:ITypeListContext	signature:()
TypeListContext	parser/golang_parser.go	/^type TypeListContext struct {$/;"	s	package:parser
TypeLit	parser/golang_parser.go	/^func (p *GolangParser) TypeLit() (localctx ITypeLitContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ITypeLitContext)	signature:()
TypeLit	parser/golang_parser.go	/^func (s *Type_Context) TypeLit() ITypeLitContext {$/;"	f	struct:parser.Type_Context	typeref:typename:ITypeLitContext	signature:()
TypeLitContext	parser/golang_parser.go	/^type TypeLitContext struct {$/;"	s	package:parser
TypeName	parser/golang_parser.go	/^func (p *GolangParser) TypeName() (localctx ITypeNameContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ITypeNameContext)	signature:()
TypeName	parser/golang_parser.go	/^func (s *AnonymousFieldContext) TypeName() ITypeNameContext {$/;"	f	struct:parser.AnonymousFieldContext	typeref:typename:ITypeNameContext	signature:()
TypeName	parser/golang_parser.go	/^func (s *LiteralTypeContext) TypeName() ITypeNameContext {$/;"	f	struct:parser.LiteralTypeContext	typeref:typename:ITypeNameContext	signature:()
TypeName	parser/golang_parser.go	/^func (s *MethodSpecContext) TypeName() ITypeNameContext {$/;"	f	struct:parser.MethodSpecContext	typeref:typename:ITypeNameContext	signature:()
TypeName	parser/golang_parser.go	/^func (s *ReceiverTypeContext) TypeName() ITypeNameContext {$/;"	f	struct:parser.ReceiverTypeContext	typeref:typename:ITypeNameContext	signature:()
TypeName	parser/golang_parser.go	/^func (s *Type_Context) TypeName() ITypeNameContext {$/;"	f	struct:parser.Type_Context	typeref:typename:ITypeNameContext	signature:()
TypeNameContext	parser/golang_parser.go	/^type TypeNameContext struct {$/;"	s	package:parser
TypeSpec	parser/golang_parser.go	/^func (p *GolangParser) TypeSpec() (localctx ITypeSpecContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ITypeSpecContext)	signature:()
TypeSpec	parser/golang_parser.go	/^func (s *TypeDeclContext) TypeSpec(i int) ITypeSpecContext {$/;"	f	struct:parser.TypeDeclContext	typeref:typename:ITypeSpecContext	signature:(i int)
TypeSpecContext	parser/golang_parser.go	/^type TypeSpecContext struct {$/;"	s	package:parser
TypeSwitchCase	parser/golang_parser.go	/^func (p *GolangParser) TypeSwitchCase() (localctx ITypeSwitchCaseContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ITypeSwitchCaseContext)	signature:()
TypeSwitchCase	parser/golang_parser.go	/^func (s *TypeCaseClauseContext) TypeSwitchCase() ITypeSwitchCaseContext {$/;"	f	struct:parser.TypeCaseClauseContext	typeref:typename:ITypeSwitchCaseContext	signature:()
TypeSwitchCaseContext	parser/golang_parser.go	/^type TypeSwitchCaseContext struct {$/;"	s	package:parser
TypeSwitchGuard	parser/golang_parser.go	/^func (p *GolangParser) TypeSwitchGuard() (localctx ITypeSwitchGuardContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ITypeSwitchGuardContext)	signature:()
TypeSwitchGuard	parser/golang_parser.go	/^func (s *TypeSwitchStmtContext) TypeSwitchGuard() ITypeSwitchGuardContext {$/;"	f	struct:parser.TypeSwitchStmtContext	typeref:typename:ITypeSwitchGuardContext	signature:()
TypeSwitchGuardContext	parser/golang_parser.go	/^type TypeSwitchGuardContext struct {$/;"	s	package:parser
TypeSwitchStmt	parser/golang_parser.go	/^func (p *GolangParser) TypeSwitchStmt() (localctx ITypeSwitchStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ITypeSwitchStmtContext)	signature:()
TypeSwitchStmt	parser/golang_parser.go	/^func (s *SwitchStmtContext) TypeSwitchStmt() ITypeSwitchStmtContext {$/;"	f	struct:parser.SwitchStmtContext	typeref:typename:ITypeSwitchStmtContext	signature:()
TypeSwitchStmtContext	parser/golang_parser.go	/^type TypeSwitchStmtContext struct {$/;"	s	package:parser
Type_	parser/golang_parser.go	/^func (p *GolangParser) Type_() (localctx IType_Context) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IType_Context)	signature:()
Type_	parser/golang_parser.go	/^func (s *ArgumentsContext) Type_() IType_Context {$/;"	f	struct:parser.ArgumentsContext	typeref:typename:IType_Context	signature:()
Type_	parser/golang_parser.go	/^func (s *ConstSpecContext) Type_() IType_Context {$/;"	f	struct:parser.ConstSpecContext	typeref:typename:IType_Context	signature:()
Type_	parser/golang_parser.go	/^func (s *ConversionContext) Type_() IType_Context {$/;"	f	struct:parser.ConversionContext	typeref:typename:IType_Context	signature:()
Type_	parser/golang_parser.go	/^func (s *ElementTypeContext) Type_() IType_Context {$/;"	f	struct:parser.ElementTypeContext	typeref:typename:IType_Context	signature:()
Type_	parser/golang_parser.go	/^func (s *FieldDeclContext) Type_() IType_Context {$/;"	f	struct:parser.FieldDeclContext	typeref:typename:IType_Context	signature:()
Type_	parser/golang_parser.go	/^func (s *MapTypeContext) Type_() IType_Context {$/;"	f	struct:parser.MapTypeContext	typeref:typename:IType_Context	signature:()
Type_	parser/golang_parser.go	/^func (s *ParameterDeclContext) Type_() IType_Context {$/;"	f	struct:parser.ParameterDeclContext	typeref:typename:IType_Context	signature:()
Type_	parser/golang_parser.go	/^func (s *PointerTypeContext) Type_() IType_Context {$/;"	f	struct:parser.PointerTypeContext	typeref:typename:IType_Context	signature:()
Type_	parser/golang_parser.go	/^func (s *ResultContext) Type_() IType_Context {$/;"	f	struct:parser.ResultContext	typeref:typename:IType_Context	signature:()
Type_	parser/golang_parser.go	/^func (s *TypeAssertionContext) Type_() IType_Context {$/;"	f	struct:parser.TypeAssertionContext	typeref:typename:IType_Context	signature:()
Type_	parser/golang_parser.go	/^func (s *TypeListContext) Type_(i int) IType_Context {$/;"	f	struct:parser.TypeListContext	typeref:typename:IType_Context	signature:(i int)
Type_	parser/golang_parser.go	/^func (s *TypeSpecContext) Type_() IType_Context {$/;"	f	struct:parser.TypeSpecContext	typeref:typename:IType_Context	signature:()
Type_	parser/golang_parser.go	/^func (s *Type_Context) Type_() IType_Context {$/;"	f	struct:parser.Type_Context	typeref:typename:IType_Context	signature:()
Type_	parser/golang_parser.go	/^func (s *VarSpecContext) Type_() IType_Context {$/;"	f	struct:parser.VarSpecContext	typeref:typename:IType_Context	signature:()
Type_Context	parser/golang_parser.go	/^type Type_Context struct {$/;"	s	package:parser
UnaryExpr	parser/golang_parser.go	/^func (p *GolangParser) UnaryExpr() (localctx IUnaryExprContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IUnaryExprContext)	signature:()
UnaryExpr	parser/golang_parser.go	/^func (s *ExpressionContext) UnaryExpr() IUnaryExprContext {$/;"	f	struct:parser.ExpressionContext	typeref:typename:IUnaryExprContext	signature:()
UnaryExpr	parser/golang_parser.go	/^func (s *UnaryExprContext) UnaryExpr() IUnaryExprContext {$/;"	f	struct:parser.UnaryExprContext	typeref:typename:IUnaryExprContext	signature:()
UnaryExprContext	parser/golang_parser.go	/^type UnaryExprContext struct {$/;"	s	package:parser
Var	parser/golang_parser.go	/^func (s *VarDeclContext) Var() antlr.TerminalNode {$/;"	f	struct:parser.VarDeclContext	typeref:typename:antlr.TerminalNode	signature:()
VarDecl	parser/golang_parser.go	/^func (p *GolangParser) VarDecl() (localctx IVarDeclContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IVarDeclContext)	signature:()
VarDecl	parser/golang_parser.go	/^func (s *DeclarationContext) VarDecl() IVarDeclContext {$/;"	f	struct:parser.DeclarationContext	typeref:typename:IVarDeclContext	signature:()
VarDeclContext	parser/golang_parser.go	/^type VarDeclContext struct {$/;"	s	package:parser
VarSpec	parser/golang_parser.go	/^func (p *GolangParser) VarSpec() (localctx IVarSpecContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IVarSpecContext)	signature:()
VarSpec	parser/golang_parser.go	/^func (s *VarDeclContext) VarSpec(i int) IVarSpecContext {$/;"	f	struct:parser.VarDeclContext	typeref:typename:IVarSpecContext	signature:(i int)
VarSpecContext	parser/golang_parser.go	/^type VarSpecContext struct {$/;"	s	package:parser
VisitErrorNode	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) VisitErrorNode(node antlr.ErrorNode) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(node antlr.ErrorNode)
VisitTerminal	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) VisitTerminal(node antlr.TerminalNode) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(node antlr.TerminalNode)
channelNames	parser/golang_lexer.go	/^	channelNames []string$/;"	m	struct:parser.GolangLexer	typeref:typename:[]string
closeBrace	golang_base_parser.go	/^func (p *GoBaseParser) closeBrace() bool {$/;"	f	struct:parser.GoBaseParser	typeref:typename:bool	signature:()
closeBrace	parser/golang_base_parser.go	/^func (p *GoBaseParser) closeBrace() bool {$/;"	f	struct:parser.GoBaseParser	typeref:typename:bool	signature:()
decisionToDFA	parser/golang_parser.go	/^var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))$/;"	v	package:parser
deserializedATN	parser/golang_parser.go	/^var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)$/;"	v	package:parser
deserializer	parser/golang_parser.go	/^var deserializer = antlr.NewATNDeserializer(nil)$/;"	v	package:parser
expression	parser/golang_parser.go	/^func (p *GolangParser) expression(_p int) (localctx IExpressionContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IExpressionContext)	signature:(_p int)
init	parser/golang_lexer.go	/^func init() {$/;"	f	package:parser	signature:()
init	parser/golang_parser.go	/^func init() {$/;"	f	package:parser	signature:()
lastToken	golang_base_lexer.go	/^	lastToken antlr.Token$/;"	m	struct:parser.GoBaseLexer	typeref:typename:antlr.Token
lastToken	parser/golang_base_lexer.go	/^	lastToken antlr.Token$/;"	m	struct:parser.GoBaseLexer	typeref:typename:antlr.Token
lexerAtn	parser/golang_lexer.go	/^var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)$/;"	v	package:parser
lexerChannelNames	parser/golang_lexer.go	/^var lexerChannelNames = []string{$/;"	v	package:parser
lexerDecisionToDFA	parser/golang_lexer.go	/^var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))$/;"	v	package:parser
lexerDeserializer	parser/golang_lexer.go	/^var lexerDeserializer = antlr.NewATNDeserializer(nil)$/;"	v	package:parser
lexerLiteralNames	parser/golang_lexer.go	/^var lexerLiteralNames = []string{$/;"	v	package:parser
lexerModeNames	parser/golang_lexer.go	/^var lexerModeNames = []string{$/;"	v	package:parser
lexerRuleNames	parser/golang_lexer.go	/^var lexerRuleNames = []string{$/;"	v	package:parser
lexerSymbolicNames	parser/golang_lexer.go	/^var lexerSymbolicNames = []string{$/;"	v	package:parser
lineTerminatorAhead	golang_base_parser.go	/^func (p *GoBaseParser) lineTerminatorAhead() bool {$/;"	f	struct:parser.GoBaseParser	typeref:typename:bool	signature:()
lineTerminatorAhead	parser/golang_base_parser.go	/^func (p *GoBaseParser) lineTerminatorAhead() bool {$/;"	f	struct:parser.GoBaseParser	typeref:typename:bool	signature:()
literalNames	parser/golang_parser.go	/^var literalNames = []string{$/;"	v	package:parser
main	main.go	/^func main() {$/;"	f	package:main	signature:()
main	main.go	/^package main$/;"	p
main.GolangFileParserListener	main.go	/^type GolangFileParserListener struct {$/;"	s	package:main
main.GolangFileParserListener.BaseGolangParserListener	main.go	/^  *parser.BaseGolangParserListener$/;"	M	struct:main.GolangFileParserListener	typeref:typename:*parser.BaseGolangParserListener
main.GolangFileParserListener.ExitFunction	main.go	/^func (this *GolangFileParserListener) ExitFunction(ctx *parser.FunctionContext) {$/;"	f	struct:main.GolangFileParserListener	signature:(ctx *parser.FunctionContext)
main.GolangFileParserListener.GoBaseLexer	main.go	/^  parser.GoBaseLexer$/;"	M	struct:main.GolangFileParserListener	typeref:typename:parser.GoBaseLexer
main.main	main.go	/^func main() {$/;"	f	package:main	signature:()
modeNames	parser/golang_lexer.go	/^	modeNames    []string$/;"	m	struct:parser.GolangLexer	typeref:typename:[]string
nextToken	golang_base_lexer.go	/^func (l *GoBaseLexer) nextToken() antlr.Token {$/;"	f	struct:parser.GoBaseLexer	typeref:typename:antlr.Token	signature:()
nextToken	parser/golang_base_lexer.go	/^func (l *GoBaseLexer) nextToken() antlr.Token {$/;"	f	struct:parser.GoBaseLexer	typeref:typename:antlr.Token	signature:()
noTerminatorAfterParams	golang_base_parser.go	/^func (p *GoBaseParser) noTerminatorAfterParams(tokenOffset int) bool {$/;"	f	struct:parser.GoBaseParser	typeref:typename:bool	signature:(tokenOffset int)
noTerminatorAfterParams	parser/golang_base_parser.go	/^func (p *GoBaseParser) noTerminatorAfterParams(tokenOffset int) bool {$/;"	f	struct:parser.GoBaseParser	typeref:typename:bool	signature:(tokenOffset int)
noTerminatorBetween	golang_base_parser.go	/^func (p *GoBaseParser) noTerminatorBetween(tokenOffset int) bool {$/;"	f	struct:parser.GoBaseParser	typeref:typename:bool	signature:(tokenOffset int)
noTerminatorBetween	parser/golang_base_parser.go	/^func (p *GoBaseParser) noTerminatorBetween(tokenOffset int) bool {$/;"	f	struct:parser.GoBaseParser	typeref:typename:bool	signature:(tokenOffset int)
parser	golang_base_lexer.go	/^package parser$/;"	p
parser	golang_base_parser.go	/^package parser$/;"	p
parser	parser/golang_base_lexer.go	/^package parser$/;"	p
parser	parser/golang_base_parser.go	/^package parser$/;"	p
parser	parser/golang_lexer.go	/^package parser$/;"	p
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.AnonymousFieldContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ArgumentsContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ArrayLengthContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ArrayTypeContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.Assign_opContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.AssignmentContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.BasicLitContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.BlockContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.BreakStmtContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ChannelTypeContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.CommCaseContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.CommClauseContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.CompositeLitContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ConstDeclContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ConstSpecContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ContinueStmtContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ConversionContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.DeclarationContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.DeferStmtContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ElementContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ElementListContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ElementTypeContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.EmptyStmtContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.EosContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ExprCaseClauseContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ExprSwitchCaseContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ExprSwitchStmtContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ExpressionContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ExpressionListContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ExpressionStmtContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.FallthroughStmtContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.FieldDeclContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ForClauseContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ForStmtContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.FunctionContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.FunctionDeclContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.FunctionLitContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.FunctionTypeContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.GoStmtContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.GotoStmtContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.IdentifierListContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.IfStmtContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ImportDeclContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ImportPathContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ImportSpecContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.IncDecStmtContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.IndexContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.InterfaceTypeContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.KeyContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.KeyedElementContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.LabeledStmtContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.LiteralContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.LiteralTypeContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.LiteralValueContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.MapTypeContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.MethodDeclContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.MethodExprContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.MethodSpecContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.OperandContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.OperandNameContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.PackageClauseContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ParameterDeclContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ParameterListContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ParametersContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.PointerTypeContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.PrimaryExprContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.QualifiedIdentContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.RangeClauseContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ReceiverContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ReceiverTypeContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.RecvStmtContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ResultContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ReturnStmtContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.SelectStmtContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.SelectorContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.SendStmtContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ShortVarDeclContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.SignatureContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.SimpleStmtContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.SliceContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.SliceTypeContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.SourceFileContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.StatementContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.StatementListContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.StructTypeContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.SwitchStmtContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.TopLevelDeclContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.TypeAssertionContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.TypeCaseClauseContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.TypeDeclContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.TypeListContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.TypeLitContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.TypeNameContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.TypeSpecContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.TypeSwitchCaseContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.TypeSwitchGuardContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.TypeSwitchStmtContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.Type_Context	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.UnaryExprContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.VarDeclContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.VarSpecContext	typeref:typename:antlr.Parser
parser	parser/golang_parser.go	/^package parser \/\/ GolangParser$/;"	p
parser	parser/golangparser_base_listener.go	/^package parser \/\/ GolangParser$/;"	p
parser	parser/golangparser_listener.go	/^package parser \/\/ GolangParser$/;"	p
parser.AnonymousFieldContext	parser/golang_parser.go	/^type AnonymousFieldContext struct {$/;"	s	package:parser
parser.AnonymousFieldContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.AnonymousFieldContext	typeref:typename:*antlr.BaseParserRuleContext
parser.AnonymousFieldContext.EnterRule	parser/golang_parser.go	/^func (s *AnonymousFieldContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.AnonymousFieldContext	signature:(listener antlr.ParseTreeListener)
parser.AnonymousFieldContext.ExitRule	parser/golang_parser.go	/^func (s *AnonymousFieldContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.AnonymousFieldContext	signature:(listener antlr.ParseTreeListener)
parser.AnonymousFieldContext.GetParser	parser/golang_parser.go	/^func (s *AnonymousFieldContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.AnonymousFieldContext	typeref:typename:antlr.Parser	signature:()
parser.AnonymousFieldContext.GetRuleContext	parser/golang_parser.go	/^func (s *AnonymousFieldContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.AnonymousFieldContext	typeref:typename:antlr.RuleContext	signature:()
parser.AnonymousFieldContext.IsAnonymousFieldContext	parser/golang_parser.go	/^func (*AnonymousFieldContext) IsAnonymousFieldContext() {}$/;"	f	struct:parser.AnonymousFieldContext	signature:()
parser.AnonymousFieldContext.ToStringTree	parser/golang_parser.go	/^func (s *AnonymousFieldContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string /;"	f	struct:parser.AnonymousFieldContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.AnonymousFieldContext.TypeName	parser/golang_parser.go	/^func (s *AnonymousFieldContext) TypeName() ITypeNameContext {$/;"	f	struct:parser.AnonymousFieldContext	typeref:typename:ITypeNameContext	signature:()
parser.AnonymousFieldContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.AnonymousFieldContext	typeref:typename:antlr.Parser
parser.ArgumentsContext	parser/golang_parser.go	/^type ArgumentsContext struct {$/;"	s	package:parser
parser.ArgumentsContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ArgumentsContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ArgumentsContext.EnterRule	parser/golang_parser.go	/^func (s *ArgumentsContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ArgumentsContext	signature:(listener antlr.ParseTreeListener)
parser.ArgumentsContext.ExitRule	parser/golang_parser.go	/^func (s *ArgumentsContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ArgumentsContext	signature:(listener antlr.ParseTreeListener)
parser.ArgumentsContext.ExpressionList	parser/golang_parser.go	/^func (s *ArgumentsContext) ExpressionList() IExpressionListContext {$/;"	f	struct:parser.ArgumentsContext	typeref:typename:IExpressionListContext	signature:()
parser.ArgumentsContext.GetParser	parser/golang_parser.go	/^func (s *ArgumentsContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ArgumentsContext	typeref:typename:antlr.Parser	signature:()
parser.ArgumentsContext.GetRuleContext	parser/golang_parser.go	/^func (s *ArgumentsContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ArgumentsContext	typeref:typename:antlr.RuleContext	signature:()
parser.ArgumentsContext.IsArgumentsContext	parser/golang_parser.go	/^func (*ArgumentsContext) IsArgumentsContext() {}$/;"	f	struct:parser.ArgumentsContext	signature:()
parser.ArgumentsContext.ToStringTree	parser/golang_parser.go	/^func (s *ArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ArgumentsContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ArgumentsContext.Type_	parser/golang_parser.go	/^func (s *ArgumentsContext) Type_() IType_Context {$/;"	f	struct:parser.ArgumentsContext	typeref:typename:IType_Context	signature:()
parser.ArgumentsContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ArgumentsContext	typeref:typename:antlr.Parser
parser.ArrayLengthContext	parser/golang_parser.go	/^type ArrayLengthContext struct {$/;"	s	package:parser
parser.ArrayLengthContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ArrayLengthContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ArrayLengthContext.EnterRule	parser/golang_parser.go	/^func (s *ArrayLengthContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ArrayLengthContext	signature:(listener antlr.ParseTreeListener)
parser.ArrayLengthContext.ExitRule	parser/golang_parser.go	/^func (s *ArrayLengthContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ArrayLengthContext	signature:(listener antlr.ParseTreeListener)
parser.ArrayLengthContext.Expression	parser/golang_parser.go	/^func (s *ArrayLengthContext) Expression() IExpressionContext {$/;"	f	struct:parser.ArrayLengthContext	typeref:typename:IExpressionContext	signature:()
parser.ArrayLengthContext.GetParser	parser/golang_parser.go	/^func (s *ArrayLengthContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ArrayLengthContext	typeref:typename:antlr.Parser	signature:()
parser.ArrayLengthContext.GetRuleContext	parser/golang_parser.go	/^func (s *ArrayLengthContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ArrayLengthContext	typeref:typename:antlr.RuleContext	signature:()
parser.ArrayLengthContext.IsArrayLengthContext	parser/golang_parser.go	/^func (*ArrayLengthContext) IsArrayLengthContext() {}$/;"	f	struct:parser.ArrayLengthContext	signature:()
parser.ArrayLengthContext.ToStringTree	parser/golang_parser.go	/^func (s *ArrayLengthContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ArrayLengthContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ArrayLengthContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ArrayLengthContext	typeref:typename:antlr.Parser
parser.ArrayTypeContext	parser/golang_parser.go	/^type ArrayTypeContext struct {$/;"	s	package:parser
parser.ArrayTypeContext.ArrayLength	parser/golang_parser.go	/^func (s *ArrayTypeContext) ArrayLength() IArrayLengthContext {$/;"	f	struct:parser.ArrayTypeContext	typeref:typename:IArrayLengthContext	signature:()
parser.ArrayTypeContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ArrayTypeContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ArrayTypeContext.ElementType	parser/golang_parser.go	/^func (s *ArrayTypeContext) ElementType() IElementTypeContext {$/;"	f	struct:parser.ArrayTypeContext	typeref:typename:IElementTypeContext	signature:()
parser.ArrayTypeContext.EnterRule	parser/golang_parser.go	/^func (s *ArrayTypeContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ArrayTypeContext	signature:(listener antlr.ParseTreeListener)
parser.ArrayTypeContext.ExitRule	parser/golang_parser.go	/^func (s *ArrayTypeContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ArrayTypeContext	signature:(listener antlr.ParseTreeListener)
parser.ArrayTypeContext.GetParser	parser/golang_parser.go	/^func (s *ArrayTypeContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ArrayTypeContext	typeref:typename:antlr.Parser	signature:()
parser.ArrayTypeContext.GetRuleContext	parser/golang_parser.go	/^func (s *ArrayTypeContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ArrayTypeContext	typeref:typename:antlr.RuleContext	signature:()
parser.ArrayTypeContext.IsArrayTypeContext	parser/golang_parser.go	/^func (*ArrayTypeContext) IsArrayTypeContext() {}$/;"	f	struct:parser.ArrayTypeContext	signature:()
parser.ArrayTypeContext.ToStringTree	parser/golang_parser.go	/^func (s *ArrayTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ArrayTypeContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ArrayTypeContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ArrayTypeContext	typeref:typename:antlr.Parser
parser.Assign_opContext	parser/golang_parser.go	/^type Assign_opContext struct {$/;"	s	package:parser
parser.Assign_opContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.Assign_opContext	typeref:typename:*antlr.BaseParserRuleContext
parser.Assign_opContext.BitAnd	parser/golang_parser.go	/^func (s *Assign_opContext) BitAnd() antlr.TerminalNode {$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.TerminalNode	signature:()
parser.Assign_opContext.BitClear	parser/golang_parser.go	/^func (s *Assign_opContext) BitClear() antlr.TerminalNode {$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.TerminalNode	signature:()
parser.Assign_opContext.BitOr	parser/golang_parser.go	/^func (s *Assign_opContext) BitOr() antlr.TerminalNode {$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.TerminalNode	signature:()
parser.Assign_opContext.BitXor	parser/golang_parser.go	/^func (s *Assign_opContext) BitXor() antlr.TerminalNode {$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.TerminalNode	signature:()
parser.Assign_opContext.Divide	parser/golang_parser.go	/^func (s *Assign_opContext) Divide() antlr.TerminalNode {$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.TerminalNode	signature:()
parser.Assign_opContext.EnterRule	parser/golang_parser.go	/^func (s *Assign_opContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.Assign_opContext	signature:(listener antlr.ParseTreeListener)
parser.Assign_opContext.ExitRule	parser/golang_parser.go	/^func (s *Assign_opContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.Assign_opContext	signature:(listener antlr.ParseTreeListener)
parser.Assign_opContext.GetParser	parser/golang_parser.go	/^func (s *Assign_opContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.Parser	signature:()
parser.Assign_opContext.GetRuleContext	parser/golang_parser.go	/^func (s *Assign_opContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.RuleContext	signature:()
parser.Assign_opContext.IsAssign_opContext	parser/golang_parser.go	/^func (*Assign_opContext) IsAssign_opContext() {}$/;"	f	struct:parser.Assign_opContext	signature:()
parser.Assign_opContext.LeftShiftArithmetic	parser/golang_parser.go	/^func (s *Assign_opContext) LeftShiftArithmetic() antlr.TerminalNode {$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.TerminalNode	signature:()
parser.Assign_opContext.Minus	parser/golang_parser.go	/^func (s *Assign_opContext) Minus() antlr.TerminalNode {$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.TerminalNode	signature:()
parser.Assign_opContext.Modulus	parser/golang_parser.go	/^func (s *Assign_opContext) Modulus() antlr.TerminalNode {$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.TerminalNode	signature:()
parser.Assign_opContext.Multiply	parser/golang_parser.go	/^func (s *Assign_opContext) Multiply() antlr.TerminalNode {$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.TerminalNode	signature:()
parser.Assign_opContext.Plus	parser/golang_parser.go	/^func (s *Assign_opContext) Plus() antlr.TerminalNode {$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.TerminalNode	signature:()
parser.Assign_opContext.RightShiftArithmetic	parser/golang_parser.go	/^func (s *Assign_opContext) RightShiftArithmetic() antlr.TerminalNode {$/;"	f	struct:parser.Assign_opContext	typeref:typename:antlr.TerminalNode	signature:()
parser.Assign_opContext.ToStringTree	parser/golang_parser.go	/^func (s *Assign_opContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.Assign_opContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.Assign_opContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.Assign_opContext	typeref:typename:antlr.Parser
parser.AssignmentContext	parser/golang_parser.go	/^type AssignmentContext struct {$/;"	s	package:parser
parser.AssignmentContext.AllExpressionList	parser/golang_parser.go	/^func (s *AssignmentContext) AllExpressionList() []IExpressionListContext {$/;"	f	struct:parser.AssignmentContext	typeref:typename:[]IExpressionListContext	signature:()
parser.AssignmentContext.Assign_op	parser/golang_parser.go	/^func (s *AssignmentContext) Assign_op() IAssign_opContext {$/;"	f	struct:parser.AssignmentContext	typeref:typename:IAssign_opContext	signature:()
parser.AssignmentContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.AssignmentContext	typeref:typename:*antlr.BaseParserRuleContext
parser.AssignmentContext.EnterRule	parser/golang_parser.go	/^func (s *AssignmentContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.AssignmentContext	signature:(listener antlr.ParseTreeListener)
parser.AssignmentContext.ExitRule	parser/golang_parser.go	/^func (s *AssignmentContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.AssignmentContext	signature:(listener antlr.ParseTreeListener)
parser.AssignmentContext.ExpressionList	parser/golang_parser.go	/^func (s *AssignmentContext) ExpressionList(i int) IExpressionListContext {$/;"	f	struct:parser.AssignmentContext	typeref:typename:IExpressionListContext	signature:(i int)
parser.AssignmentContext.GetParser	parser/golang_parser.go	/^func (s *AssignmentContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.AssignmentContext	typeref:typename:antlr.Parser	signature:()
parser.AssignmentContext.GetRuleContext	parser/golang_parser.go	/^func (s *AssignmentContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.AssignmentContext	typeref:typename:antlr.RuleContext	signature:()
parser.AssignmentContext.IsAssignmentContext	parser/golang_parser.go	/^func (*AssignmentContext) IsAssignmentContext() {}$/;"	f	struct:parser.AssignmentContext	signature:()
parser.AssignmentContext.ToStringTree	parser/golang_parser.go	/^func (s *AssignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.AssignmentContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.AssignmentContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.AssignmentContext	typeref:typename:antlr.Parser
parser.BaseGolangParserListener	parser/golangparser_base_listener.go	/^type BaseGolangParserListener struct{}$/;"	s	package:parser
parser.BaseGolangParserListener.EnterAnonymousField	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterAnonymousField(ctx *AnonymousFieldContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *AnonymousFieldContext)
parser.BaseGolangParserListener.EnterArguments	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterArguments(ctx *ArgumentsContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ArgumentsContext)
parser.BaseGolangParserListener.EnterArrayLength	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterArrayLength(ctx *ArrayLengthContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ArrayLengthContext)
parser.BaseGolangParserListener.EnterArrayType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterArrayType(ctx *ArrayTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ArrayTypeContext)
parser.BaseGolangParserListener.EnterAssign_op	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterAssign_op(ctx *Assign_opContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *Assign_opContext)
parser.BaseGolangParserListener.EnterAssignment	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterAssignment(ctx *AssignmentContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *AssignmentContext)
parser.BaseGolangParserListener.EnterBasicLit	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterBasicLit(ctx *BasicLitContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *BasicLitContext)
parser.BaseGolangParserListener.EnterBlock	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterBlock(ctx *BlockContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *BlockContext)
parser.BaseGolangParserListener.EnterBreakStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterBreakStmt(ctx *BreakStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *BreakStmtContext)
parser.BaseGolangParserListener.EnterChannelType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterChannelType(ctx *ChannelTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ChannelTypeContext)
parser.BaseGolangParserListener.EnterCommCase	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterCommCase(ctx *CommCaseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *CommCaseContext)
parser.BaseGolangParserListener.EnterCommClause	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterCommClause(ctx *CommClauseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *CommClauseContext)
parser.BaseGolangParserListener.EnterCompositeLit	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterCompositeLit(ctx *CompositeLitContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *CompositeLitContext)
parser.BaseGolangParserListener.EnterConstDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterConstDecl(ctx *ConstDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ConstDeclContext)
parser.BaseGolangParserListener.EnterConstSpec	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterConstSpec(ctx *ConstSpecContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ConstSpecContext)
parser.BaseGolangParserListener.EnterContinueStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterContinueStmt(ctx *ContinueStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ContinueStmtContext)
parser.BaseGolangParserListener.EnterConversion	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterConversion(ctx *ConversionContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ConversionContext)
parser.BaseGolangParserListener.EnterDeclaration	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterDeclaration(ctx *DeclarationContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *DeclarationContext)
parser.BaseGolangParserListener.EnterDeferStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterDeferStmt(ctx *DeferStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *DeferStmtContext)
parser.BaseGolangParserListener.EnterElement	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterElement(ctx *ElementContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ElementContext)
parser.BaseGolangParserListener.EnterElementList	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterElementList(ctx *ElementListContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ElementListContext)
parser.BaseGolangParserListener.EnterElementType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterElementType(ctx *ElementTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ElementTypeContext)
parser.BaseGolangParserListener.EnterEmptyStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterEmptyStmt(ctx *EmptyStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *EmptyStmtContext)
parser.BaseGolangParserListener.EnterEos	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterEos(ctx *EosContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *EosContext)
parser.BaseGolangParserListener.EnterEveryRule	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterEveryRule(ctx antlr.ParserRuleContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx antlr.ParserRuleContext)
parser.BaseGolangParserListener.EnterExprCaseClause	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterExprCaseClause(ctx *ExprCaseClauseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ExprCaseClauseContext)
parser.BaseGolangParserListener.EnterExprSwitchCase	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterExprSwitchCase(ctx *ExprSwitchCaseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ExprSwitchCaseContext)
parser.BaseGolangParserListener.EnterExprSwitchStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterExprSwitchStmt(ctx *ExprSwitchStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ExprSwitchStmtContext)
parser.BaseGolangParserListener.EnterExpression	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterExpression(ctx *ExpressionContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ExpressionContext)
parser.BaseGolangParserListener.EnterExpressionList	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterExpressionList(ctx *ExpressionListContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ExpressionListContext)
parser.BaseGolangParserListener.EnterExpressionStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterExpressionStmt(ctx *ExpressionStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ExpressionStmtContext)
parser.BaseGolangParserListener.EnterFallthroughStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterFallthroughStmt(ctx *FallthroughStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *FallthroughStmtContext)
parser.BaseGolangParserListener.EnterFieldDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterFieldDecl(ctx *FieldDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *FieldDeclContext)
parser.BaseGolangParserListener.EnterForClause	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterForClause(ctx *ForClauseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ForClauseContext)
parser.BaseGolangParserListener.EnterForStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterForStmt(ctx *ForStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ForStmtContext)
parser.BaseGolangParserListener.EnterFunction	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterFunction(ctx *FunctionContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *FunctionContext)
parser.BaseGolangParserListener.EnterFunctionDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterFunctionDecl(ctx *FunctionDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *FunctionDeclContext)
parser.BaseGolangParserListener.EnterFunctionLit	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterFunctionLit(ctx *FunctionLitContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *FunctionLitContext)
parser.BaseGolangParserListener.EnterFunctionType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterFunctionType(ctx *FunctionTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *FunctionTypeContext)
parser.BaseGolangParserListener.EnterGoStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterGoStmt(ctx *GoStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *GoStmtContext)
parser.BaseGolangParserListener.EnterGotoStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterGotoStmt(ctx *GotoStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *GotoStmtContext)
parser.BaseGolangParserListener.EnterIdentifierList	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterIdentifierList(ctx *IdentifierListContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *IdentifierListContext)
parser.BaseGolangParserListener.EnterIfStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterIfStmt(ctx *IfStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *IfStmtContext)
parser.BaseGolangParserListener.EnterImportDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterImportDecl(ctx *ImportDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ImportDeclContext)
parser.BaseGolangParserListener.EnterImportPath	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterImportPath(ctx *ImportPathContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ImportPathContext)
parser.BaseGolangParserListener.EnterImportSpec	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterImportSpec(ctx *ImportSpecContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ImportSpecContext)
parser.BaseGolangParserListener.EnterIncDecStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterIncDecStmt(ctx *IncDecStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *IncDecStmtContext)
parser.BaseGolangParserListener.EnterIndex	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterIndex(ctx *IndexContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *IndexContext)
parser.BaseGolangParserListener.EnterInterfaceType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterInterfaceType(ctx *InterfaceTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *InterfaceTypeContext)
parser.BaseGolangParserListener.EnterKey	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterKey(ctx *KeyContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *KeyContext)
parser.BaseGolangParserListener.EnterKeyedElement	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterKeyedElement(ctx *KeyedElementContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *KeyedElementContext)
parser.BaseGolangParserListener.EnterLabeledStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterLabeledStmt(ctx *LabeledStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *LabeledStmtContext)
parser.BaseGolangParserListener.EnterLiteral	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterLiteral(ctx *LiteralContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *LiteralContext)
parser.BaseGolangParserListener.EnterLiteralType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterLiteralType(ctx *LiteralTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *LiteralTypeContext)
parser.BaseGolangParserListener.EnterLiteralValue	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterLiteralValue(ctx *LiteralValueContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *LiteralValueContext)
parser.BaseGolangParserListener.EnterMapType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterMapType(ctx *MapTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *MapTypeContext)
parser.BaseGolangParserListener.EnterMethodDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterMethodDecl(ctx *MethodDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *MethodDeclContext)
parser.BaseGolangParserListener.EnterMethodExpr	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterMethodExpr(ctx *MethodExprContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *MethodExprContext)
parser.BaseGolangParserListener.EnterMethodSpec	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterMethodSpec(ctx *MethodSpecContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *MethodSpecContext)
parser.BaseGolangParserListener.EnterOperand	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterOperand(ctx *OperandContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *OperandContext)
parser.BaseGolangParserListener.EnterOperandName	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterOperandName(ctx *OperandNameContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *OperandNameContext)
parser.BaseGolangParserListener.EnterPackageClause	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterPackageClause(ctx *PackageClauseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *PackageClauseContext)
parser.BaseGolangParserListener.EnterParameterDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterParameterDecl(ctx *ParameterDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ParameterDeclContext)
parser.BaseGolangParserListener.EnterParameterList	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterParameterList(ctx *ParameterListContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ParameterListContext)
parser.BaseGolangParserListener.EnterParameters	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterParameters(ctx *ParametersContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ParametersContext)
parser.BaseGolangParserListener.EnterPointerType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterPointerType(ctx *PointerTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *PointerTypeContext)
parser.BaseGolangParserListener.EnterPrimaryExpr	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterPrimaryExpr(ctx *PrimaryExprContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *PrimaryExprContext)
parser.BaseGolangParserListener.EnterQualifiedIdent	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterQualifiedIdent(ctx *QualifiedIdentContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *QualifiedIdentContext)
parser.BaseGolangParserListener.EnterRangeClause	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterRangeClause(ctx *RangeClauseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *RangeClauseContext)
parser.BaseGolangParserListener.EnterReceiver	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterReceiver(ctx *ReceiverContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ReceiverContext)
parser.BaseGolangParserListener.EnterReceiverType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterReceiverType(ctx *ReceiverTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ReceiverTypeContext)
parser.BaseGolangParserListener.EnterRecvStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterRecvStmt(ctx *RecvStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *RecvStmtContext)
parser.BaseGolangParserListener.EnterResult	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterResult(ctx *ResultContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ResultContext)
parser.BaseGolangParserListener.EnterReturnStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterReturnStmt(ctx *ReturnStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ReturnStmtContext)
parser.BaseGolangParserListener.EnterSelectStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterSelectStmt(ctx *SelectStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SelectStmtContext)
parser.BaseGolangParserListener.EnterSelector	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterSelector(ctx *SelectorContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SelectorContext)
parser.BaseGolangParserListener.EnterSendStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterSendStmt(ctx *SendStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SendStmtContext)
parser.BaseGolangParserListener.EnterShortVarDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterShortVarDecl(ctx *ShortVarDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ShortVarDeclContext)
parser.BaseGolangParserListener.EnterSignature	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterSignature(ctx *SignatureContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SignatureContext)
parser.BaseGolangParserListener.EnterSimpleStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterSimpleStmt(ctx *SimpleStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SimpleStmtContext)
parser.BaseGolangParserListener.EnterSlice	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterSlice(ctx *SliceContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SliceContext)
parser.BaseGolangParserListener.EnterSliceType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterSliceType(ctx *SliceTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SliceTypeContext)
parser.BaseGolangParserListener.EnterSourceFile	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterSourceFile(ctx *SourceFileContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SourceFileContext)
parser.BaseGolangParserListener.EnterStatement	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterStatement(ctx *StatementContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *StatementContext)
parser.BaseGolangParserListener.EnterStatementList	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterStatementList(ctx *StatementListContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *StatementListContext)
parser.BaseGolangParserListener.EnterStructType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterStructType(ctx *StructTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *StructTypeContext)
parser.BaseGolangParserListener.EnterSwitchStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterSwitchStmt(ctx *SwitchStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SwitchStmtContext)
parser.BaseGolangParserListener.EnterTopLevelDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterTopLevelDecl(ctx *TopLevelDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TopLevelDeclContext)
parser.BaseGolangParserListener.EnterTypeAssertion	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterTypeAssertion(ctx *TypeAssertionContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeAssertionContext)
parser.BaseGolangParserListener.EnterTypeCaseClause	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterTypeCaseClause(ctx *TypeCaseClauseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeCaseClauseContext)
parser.BaseGolangParserListener.EnterTypeDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterTypeDecl(ctx *TypeDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeDeclContext)
parser.BaseGolangParserListener.EnterTypeList	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterTypeList(ctx *TypeListContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeListContext)
parser.BaseGolangParserListener.EnterTypeLit	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterTypeLit(ctx *TypeLitContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeLitContext)
parser.BaseGolangParserListener.EnterTypeName	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterTypeName(ctx *TypeNameContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeNameContext)
parser.BaseGolangParserListener.EnterTypeSpec	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterTypeSpec(ctx *TypeSpecContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeSpecContext)
parser.BaseGolangParserListener.EnterTypeSwitchCase	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterTypeSwitchCase(ctx *TypeSwitchCaseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeSwitchCaseContext)
parser.BaseGolangParserListener.EnterTypeSwitchGuard	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterTypeSwitchGuard(ctx *TypeSwitchGuardContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeSwitchGuardContext)
parser.BaseGolangParserListener.EnterTypeSwitchStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterTypeSwitchStmt(ctx *TypeSwitchStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeSwitchStmtContext)
parser.BaseGolangParserListener.EnterType_	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterType_(ctx *Type_Context) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *Type_Context)
parser.BaseGolangParserListener.EnterUnaryExpr	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterUnaryExpr(ctx *UnaryExprContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *UnaryExprContext)
parser.BaseGolangParserListener.EnterVarDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterVarDecl(ctx *VarDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *VarDeclContext)
parser.BaseGolangParserListener.EnterVarSpec	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) EnterVarSpec(ctx *VarSpecContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *VarSpecContext)
parser.BaseGolangParserListener.ExitAnonymousField	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitAnonymousField(ctx *AnonymousFieldContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *AnonymousFieldContext)
parser.BaseGolangParserListener.ExitArguments	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitArguments(ctx *ArgumentsContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ArgumentsContext)
parser.BaseGolangParserListener.ExitArrayLength	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitArrayLength(ctx *ArrayLengthContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ArrayLengthContext)
parser.BaseGolangParserListener.ExitArrayType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitArrayType(ctx *ArrayTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ArrayTypeContext)
parser.BaseGolangParserListener.ExitAssign_op	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitAssign_op(ctx *Assign_opContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *Assign_opContext)
parser.BaseGolangParserListener.ExitAssignment	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitAssignment(ctx *AssignmentContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *AssignmentContext)
parser.BaseGolangParserListener.ExitBasicLit	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitBasicLit(ctx *BasicLitContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *BasicLitContext)
parser.BaseGolangParserListener.ExitBlock	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitBlock(ctx *BlockContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *BlockContext)
parser.BaseGolangParserListener.ExitBreakStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitBreakStmt(ctx *BreakStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *BreakStmtContext)
parser.BaseGolangParserListener.ExitChannelType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitChannelType(ctx *ChannelTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ChannelTypeContext)
parser.BaseGolangParserListener.ExitCommCase	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitCommCase(ctx *CommCaseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *CommCaseContext)
parser.BaseGolangParserListener.ExitCommClause	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitCommClause(ctx *CommClauseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *CommClauseContext)
parser.BaseGolangParserListener.ExitCompositeLit	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitCompositeLit(ctx *CompositeLitContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *CompositeLitContext)
parser.BaseGolangParserListener.ExitConstDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitConstDecl(ctx *ConstDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ConstDeclContext)
parser.BaseGolangParserListener.ExitConstSpec	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitConstSpec(ctx *ConstSpecContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ConstSpecContext)
parser.BaseGolangParserListener.ExitContinueStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitContinueStmt(ctx *ContinueStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ContinueStmtContext)
parser.BaseGolangParserListener.ExitConversion	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitConversion(ctx *ConversionContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ConversionContext)
parser.BaseGolangParserListener.ExitDeclaration	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitDeclaration(ctx *DeclarationContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *DeclarationContext)
parser.BaseGolangParserListener.ExitDeferStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitDeferStmt(ctx *DeferStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *DeferStmtContext)
parser.BaseGolangParserListener.ExitElement	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitElement(ctx *ElementContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ElementContext)
parser.BaseGolangParserListener.ExitElementList	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitElementList(ctx *ElementListContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ElementListContext)
parser.BaseGolangParserListener.ExitElementType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitElementType(ctx *ElementTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ElementTypeContext)
parser.BaseGolangParserListener.ExitEmptyStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitEmptyStmt(ctx *EmptyStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *EmptyStmtContext)
parser.BaseGolangParserListener.ExitEos	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitEos(ctx *EosContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *EosContext)
parser.BaseGolangParserListener.ExitEveryRule	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitEveryRule(ctx antlr.ParserRuleContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx antlr.ParserRuleContext)
parser.BaseGolangParserListener.ExitExprCaseClause	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitExprCaseClause(ctx *ExprCaseClauseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ExprCaseClauseContext)
parser.BaseGolangParserListener.ExitExprSwitchCase	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitExprSwitchCase(ctx *ExprSwitchCaseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ExprSwitchCaseContext)
parser.BaseGolangParserListener.ExitExprSwitchStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitExprSwitchStmt(ctx *ExprSwitchStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ExprSwitchStmtContext)
parser.BaseGolangParserListener.ExitExpression	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitExpression(ctx *ExpressionContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ExpressionContext)
parser.BaseGolangParserListener.ExitExpressionList	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitExpressionList(ctx *ExpressionListContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ExpressionListContext)
parser.BaseGolangParserListener.ExitExpressionStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitExpressionStmt(ctx *ExpressionStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ExpressionStmtContext)
parser.BaseGolangParserListener.ExitFallthroughStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitFallthroughStmt(ctx *FallthroughStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *FallthroughStmtContext)
parser.BaseGolangParserListener.ExitFieldDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitFieldDecl(ctx *FieldDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *FieldDeclContext)
parser.BaseGolangParserListener.ExitForClause	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitForClause(ctx *ForClauseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ForClauseContext)
parser.BaseGolangParserListener.ExitForStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitForStmt(ctx *ForStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ForStmtContext)
parser.BaseGolangParserListener.ExitFunction	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitFunction(ctx *FunctionContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *FunctionContext)
parser.BaseGolangParserListener.ExitFunctionDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitFunctionDecl(ctx *FunctionDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *FunctionDeclContext)
parser.BaseGolangParserListener.ExitFunctionLit	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitFunctionLit(ctx *FunctionLitContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *FunctionLitContext)
parser.BaseGolangParserListener.ExitFunctionType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitFunctionType(ctx *FunctionTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *FunctionTypeContext)
parser.BaseGolangParserListener.ExitGoStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitGoStmt(ctx *GoStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *GoStmtContext)
parser.BaseGolangParserListener.ExitGotoStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitGotoStmt(ctx *GotoStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *GotoStmtContext)
parser.BaseGolangParserListener.ExitIdentifierList	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitIdentifierList(ctx *IdentifierListContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *IdentifierListContext)
parser.BaseGolangParserListener.ExitIfStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitIfStmt(ctx *IfStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *IfStmtContext)
parser.BaseGolangParserListener.ExitImportDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitImportDecl(ctx *ImportDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ImportDeclContext)
parser.BaseGolangParserListener.ExitImportPath	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitImportPath(ctx *ImportPathContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ImportPathContext)
parser.BaseGolangParserListener.ExitImportSpec	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitImportSpec(ctx *ImportSpecContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ImportSpecContext)
parser.BaseGolangParserListener.ExitIncDecStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitIncDecStmt(ctx *IncDecStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *IncDecStmtContext)
parser.BaseGolangParserListener.ExitIndex	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitIndex(ctx *IndexContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *IndexContext)
parser.BaseGolangParserListener.ExitInterfaceType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitInterfaceType(ctx *InterfaceTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *InterfaceTypeContext)
parser.BaseGolangParserListener.ExitKey	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitKey(ctx *KeyContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *KeyContext)
parser.BaseGolangParserListener.ExitKeyedElement	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitKeyedElement(ctx *KeyedElementContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *KeyedElementContext)
parser.BaseGolangParserListener.ExitLabeledStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitLabeledStmt(ctx *LabeledStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *LabeledStmtContext)
parser.BaseGolangParserListener.ExitLiteral	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitLiteral(ctx *LiteralContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *LiteralContext)
parser.BaseGolangParserListener.ExitLiteralType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitLiteralType(ctx *LiteralTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *LiteralTypeContext)
parser.BaseGolangParserListener.ExitLiteralValue	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitLiteralValue(ctx *LiteralValueContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *LiteralValueContext)
parser.BaseGolangParserListener.ExitMapType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitMapType(ctx *MapTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *MapTypeContext)
parser.BaseGolangParserListener.ExitMethodDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitMethodDecl(ctx *MethodDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *MethodDeclContext)
parser.BaseGolangParserListener.ExitMethodExpr	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitMethodExpr(ctx *MethodExprContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *MethodExprContext)
parser.BaseGolangParserListener.ExitMethodSpec	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitMethodSpec(ctx *MethodSpecContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *MethodSpecContext)
parser.BaseGolangParserListener.ExitOperand	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitOperand(ctx *OperandContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *OperandContext)
parser.BaseGolangParserListener.ExitOperandName	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitOperandName(ctx *OperandNameContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *OperandNameContext)
parser.BaseGolangParserListener.ExitPackageClause	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitPackageClause(ctx *PackageClauseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *PackageClauseContext)
parser.BaseGolangParserListener.ExitParameterDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitParameterDecl(ctx *ParameterDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ParameterDeclContext)
parser.BaseGolangParserListener.ExitParameterList	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitParameterList(ctx *ParameterListContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ParameterListContext)
parser.BaseGolangParserListener.ExitParameters	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitParameters(ctx *ParametersContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ParametersContext)
parser.BaseGolangParserListener.ExitPointerType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitPointerType(ctx *PointerTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *PointerTypeContext)
parser.BaseGolangParserListener.ExitPrimaryExpr	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitPrimaryExpr(ctx *PrimaryExprContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *PrimaryExprContext)
parser.BaseGolangParserListener.ExitQualifiedIdent	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitQualifiedIdent(ctx *QualifiedIdentContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *QualifiedIdentContext)
parser.BaseGolangParserListener.ExitRangeClause	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitRangeClause(ctx *RangeClauseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *RangeClauseContext)
parser.BaseGolangParserListener.ExitReceiver	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitReceiver(ctx *ReceiverContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ReceiverContext)
parser.BaseGolangParserListener.ExitReceiverType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitReceiverType(ctx *ReceiverTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ReceiverTypeContext)
parser.BaseGolangParserListener.ExitRecvStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitRecvStmt(ctx *RecvStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *RecvStmtContext)
parser.BaseGolangParserListener.ExitResult	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitResult(ctx *ResultContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ResultContext)
parser.BaseGolangParserListener.ExitReturnStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitReturnStmt(ctx *ReturnStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ReturnStmtContext)
parser.BaseGolangParserListener.ExitSelectStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitSelectStmt(ctx *SelectStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SelectStmtContext)
parser.BaseGolangParserListener.ExitSelector	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitSelector(ctx *SelectorContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SelectorContext)
parser.BaseGolangParserListener.ExitSendStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitSendStmt(ctx *SendStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SendStmtContext)
parser.BaseGolangParserListener.ExitShortVarDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitShortVarDecl(ctx *ShortVarDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *ShortVarDeclContext)
parser.BaseGolangParserListener.ExitSignature	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitSignature(ctx *SignatureContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SignatureContext)
parser.BaseGolangParserListener.ExitSimpleStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitSimpleStmt(ctx *SimpleStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SimpleStmtContext)
parser.BaseGolangParserListener.ExitSlice	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitSlice(ctx *SliceContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SliceContext)
parser.BaseGolangParserListener.ExitSliceType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitSliceType(ctx *SliceTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SliceTypeContext)
parser.BaseGolangParserListener.ExitSourceFile	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitSourceFile(ctx *SourceFileContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SourceFileContext)
parser.BaseGolangParserListener.ExitStatement	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitStatement(ctx *StatementContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *StatementContext)
parser.BaseGolangParserListener.ExitStatementList	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitStatementList(ctx *StatementListContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *StatementListContext)
parser.BaseGolangParserListener.ExitStructType	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitStructType(ctx *StructTypeContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *StructTypeContext)
parser.BaseGolangParserListener.ExitSwitchStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitSwitchStmt(ctx *SwitchStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *SwitchStmtContext)
parser.BaseGolangParserListener.ExitTopLevelDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitTopLevelDecl(ctx *TopLevelDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TopLevelDeclContext)
parser.BaseGolangParserListener.ExitTypeAssertion	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitTypeAssertion(ctx *TypeAssertionContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeAssertionContext)
parser.BaseGolangParserListener.ExitTypeCaseClause	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitTypeCaseClause(ctx *TypeCaseClauseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeCaseClauseContext)
parser.BaseGolangParserListener.ExitTypeDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitTypeDecl(ctx *TypeDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeDeclContext)
parser.BaseGolangParserListener.ExitTypeList	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitTypeList(ctx *TypeListContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeListContext)
parser.BaseGolangParserListener.ExitTypeLit	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitTypeLit(ctx *TypeLitContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeLitContext)
parser.BaseGolangParserListener.ExitTypeName	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitTypeName(ctx *TypeNameContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeNameContext)
parser.BaseGolangParserListener.ExitTypeSpec	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitTypeSpec(ctx *TypeSpecContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeSpecContext)
parser.BaseGolangParserListener.ExitTypeSwitchCase	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitTypeSwitchCase(ctx *TypeSwitchCaseContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeSwitchCaseContext)
parser.BaseGolangParserListener.ExitTypeSwitchGuard	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitTypeSwitchGuard(ctx *TypeSwitchGuardContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeSwitchGuardContext)
parser.BaseGolangParserListener.ExitTypeSwitchStmt	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitTypeSwitchStmt(ctx *TypeSwitchStmtContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *TypeSwitchStmtContext)
parser.BaseGolangParserListener.ExitType_	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitType_(ctx *Type_Context) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *Type_Context)
parser.BaseGolangParserListener.ExitUnaryExpr	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitUnaryExpr(ctx *UnaryExprContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *UnaryExprContext)
parser.BaseGolangParserListener.ExitVarDecl	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitVarDecl(ctx *VarDeclContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *VarDeclContext)
parser.BaseGolangParserListener.ExitVarSpec	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) ExitVarSpec(ctx *VarSpecContext) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(ctx *VarSpecContext)
parser.BaseGolangParserListener.VisitErrorNode	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) VisitErrorNode(node antlr.ErrorNode) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(node antlr.ErrorNode)
parser.BaseGolangParserListener.VisitTerminal	parser/golangparser_base_listener.go	/^func (s *BaseGolangParserListener) VisitTerminal(node antlr.TerminalNode) {}$/;"	f	struct:parser.BaseGolangParserListener	signature:(node antlr.TerminalNode)
parser.BasicLitContext	parser/golang_parser.go	/^type BasicLitContext struct {$/;"	s	package:parser
parser.BasicLitContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.BasicLitContext	typeref:typename:*antlr.BaseParserRuleContext
parser.BasicLitContext.EnterRule	parser/golang_parser.go	/^func (s *BasicLitContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.BasicLitContext	signature:(listener antlr.ParseTreeListener)
parser.BasicLitContext.ExitRule	parser/golang_parser.go	/^func (s *BasicLitContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.BasicLitContext	signature:(listener antlr.ParseTreeListener)
parser.BasicLitContext.FLOAT_LIT	parser/golang_parser.go	/^func (s *BasicLitContext) FLOAT_LIT() antlr.TerminalNode {$/;"	f	struct:parser.BasicLitContext	typeref:typename:antlr.TerminalNode	signature:()
parser.BasicLitContext.GetParser	parser/golang_parser.go	/^func (s *BasicLitContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.BasicLitContext	typeref:typename:antlr.Parser	signature:()
parser.BasicLitContext.GetRuleContext	parser/golang_parser.go	/^func (s *BasicLitContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.BasicLitContext	typeref:typename:antlr.RuleContext	signature:()
parser.BasicLitContext.IMAGINARY_LIT	parser/golang_parser.go	/^func (s *BasicLitContext) IMAGINARY_LIT() antlr.TerminalNode {$/;"	f	struct:parser.BasicLitContext	typeref:typename:antlr.TerminalNode	signature:()
parser.BasicLitContext.INT_LIT	parser/golang_parser.go	/^func (s *BasicLitContext) INT_LIT() antlr.TerminalNode {$/;"	f	struct:parser.BasicLitContext	typeref:typename:antlr.TerminalNode	signature:()
parser.BasicLitContext.IsBasicLitContext	parser/golang_parser.go	/^func (*BasicLitContext) IsBasicLitContext() {}$/;"	f	struct:parser.BasicLitContext	signature:()
parser.BasicLitContext.RUNE_LIT	parser/golang_parser.go	/^func (s *BasicLitContext) RUNE_LIT() antlr.TerminalNode {$/;"	f	struct:parser.BasicLitContext	typeref:typename:antlr.TerminalNode	signature:()
parser.BasicLitContext.STRING_LIT	parser/golang_parser.go	/^func (s *BasicLitContext) STRING_LIT() antlr.TerminalNode {$/;"	f	struct:parser.BasicLitContext	typeref:typename:antlr.TerminalNode	signature:()
parser.BasicLitContext.ToStringTree	parser/golang_parser.go	/^func (s *BasicLitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.BasicLitContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.BasicLitContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.BasicLitContext	typeref:typename:antlr.Parser
parser.BlockContext	parser/golang_parser.go	/^type BlockContext struct {$/;"	s	package:parser
parser.BlockContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.BlockContext	typeref:typename:*antlr.BaseParserRuleContext
parser.BlockContext.EnterRule	parser/golang_parser.go	/^func (s *BlockContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.BlockContext	signature:(listener antlr.ParseTreeListener)
parser.BlockContext.ExitRule	parser/golang_parser.go	/^func (s *BlockContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.BlockContext	signature:(listener antlr.ParseTreeListener)
parser.BlockContext.GetParser	parser/golang_parser.go	/^func (s *BlockContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.BlockContext	typeref:typename:antlr.Parser	signature:()
parser.BlockContext.GetRuleContext	parser/golang_parser.go	/^func (s *BlockContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.BlockContext	typeref:typename:antlr.RuleContext	signature:()
parser.BlockContext.IsBlockContext	parser/golang_parser.go	/^func (*BlockContext) IsBlockContext() {}$/;"	f	struct:parser.BlockContext	signature:()
parser.BlockContext.StatementList	parser/golang_parser.go	/^func (s *BlockContext) StatementList() IStatementListContext {$/;"	f	struct:parser.BlockContext	typeref:typename:IStatementListContext	signature:()
parser.BlockContext.ToStringTree	parser/golang_parser.go	/^func (s *BlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.BlockContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.BlockContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.BlockContext	typeref:typename:antlr.Parser
parser.BreakStmtContext	parser/golang_parser.go	/^type BreakStmtContext struct {$/;"	s	package:parser
parser.BreakStmtContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.BreakStmtContext	typeref:typename:*antlr.BaseParserRuleContext
parser.BreakStmtContext.Break	parser/golang_parser.go	/^func (s *BreakStmtContext) Break() antlr.TerminalNode {$/;"	f	struct:parser.BreakStmtContext	typeref:typename:antlr.TerminalNode	signature:()
parser.BreakStmtContext.EnterRule	parser/golang_parser.go	/^func (s *BreakStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.BreakStmtContext	signature:(listener antlr.ParseTreeListener)
parser.BreakStmtContext.ExitRule	parser/golang_parser.go	/^func (s *BreakStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.BreakStmtContext	signature:(listener antlr.ParseTreeListener)
parser.BreakStmtContext.GetParser	parser/golang_parser.go	/^func (s *BreakStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.BreakStmtContext	typeref:typename:antlr.Parser	signature:()
parser.BreakStmtContext.GetRuleContext	parser/golang_parser.go	/^func (s *BreakStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.BreakStmtContext	typeref:typename:antlr.RuleContext	signature:()
parser.BreakStmtContext.IDENTIFIER	parser/golang_parser.go	/^func (s *BreakStmtContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.BreakStmtContext	typeref:typename:antlr.TerminalNode	signature:()
parser.BreakStmtContext.IsBreakStmtContext	parser/golang_parser.go	/^func (*BreakStmtContext) IsBreakStmtContext() {}$/;"	f	struct:parser.BreakStmtContext	signature:()
parser.BreakStmtContext.ToStringTree	parser/golang_parser.go	/^func (s *BreakStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.BreakStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.BreakStmtContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.BreakStmtContext	typeref:typename:antlr.Parser
parser.ChannelTypeContext	parser/golang_parser.go	/^type ChannelTypeContext struct {$/;"	s	package:parser
parser.ChannelTypeContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ChannelTypeContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ChannelTypeContext.Chan	parser/golang_parser.go	/^func (s *ChannelTypeContext) Chan() antlr.TerminalNode {$/;"	f	struct:parser.ChannelTypeContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ChannelTypeContext.ChanOp	parser/golang_parser.go	/^func (s *ChannelTypeContext) ChanOp() antlr.TerminalNode {$/;"	f	struct:parser.ChannelTypeContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ChannelTypeContext.ElementType	parser/golang_parser.go	/^func (s *ChannelTypeContext) ElementType() IElementTypeContext {$/;"	f	struct:parser.ChannelTypeContext	typeref:typename:IElementTypeContext	signature:()
parser.ChannelTypeContext.EnterRule	parser/golang_parser.go	/^func (s *ChannelTypeContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ChannelTypeContext	signature:(listener antlr.ParseTreeListener)
parser.ChannelTypeContext.ExitRule	parser/golang_parser.go	/^func (s *ChannelTypeContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ChannelTypeContext	signature:(listener antlr.ParseTreeListener)
parser.ChannelTypeContext.GetParser	parser/golang_parser.go	/^func (s *ChannelTypeContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ChannelTypeContext	typeref:typename:antlr.Parser	signature:()
parser.ChannelTypeContext.GetRuleContext	parser/golang_parser.go	/^func (s *ChannelTypeContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ChannelTypeContext	typeref:typename:antlr.RuleContext	signature:()
parser.ChannelTypeContext.IsChannelTypeContext	parser/golang_parser.go	/^func (*ChannelTypeContext) IsChannelTypeContext() {}$/;"	f	struct:parser.ChannelTypeContext	signature:()
parser.ChannelTypeContext.ToStringTree	parser/golang_parser.go	/^func (s *ChannelTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ChannelTypeContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ChannelTypeContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ChannelTypeContext	typeref:typename:antlr.Parser
parser.CommCaseContext	parser/golang_parser.go	/^type CommCaseContext struct {$/;"	s	package:parser
parser.CommCaseContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.CommCaseContext	typeref:typename:*antlr.BaseParserRuleContext
parser.CommCaseContext.Case	parser/golang_parser.go	/^func (s *CommCaseContext) Case() antlr.TerminalNode {$/;"	f	struct:parser.CommCaseContext	typeref:typename:antlr.TerminalNode	signature:()
parser.CommCaseContext.Default	parser/golang_parser.go	/^func (s *CommCaseContext) Default() antlr.TerminalNode {$/;"	f	struct:parser.CommCaseContext	typeref:typename:antlr.TerminalNode	signature:()
parser.CommCaseContext.EnterRule	parser/golang_parser.go	/^func (s *CommCaseContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.CommCaseContext	signature:(listener antlr.ParseTreeListener)
parser.CommCaseContext.ExitRule	parser/golang_parser.go	/^func (s *CommCaseContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.CommCaseContext	signature:(listener antlr.ParseTreeListener)
parser.CommCaseContext.GetParser	parser/golang_parser.go	/^func (s *CommCaseContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.CommCaseContext	typeref:typename:antlr.Parser	signature:()
parser.CommCaseContext.GetRuleContext	parser/golang_parser.go	/^func (s *CommCaseContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.CommCaseContext	typeref:typename:antlr.RuleContext	signature:()
parser.CommCaseContext.IsCommCaseContext	parser/golang_parser.go	/^func (*CommCaseContext) IsCommCaseContext() {}$/;"	f	struct:parser.CommCaseContext	signature:()
parser.CommCaseContext.RecvStmt	parser/golang_parser.go	/^func (s *CommCaseContext) RecvStmt() IRecvStmtContext {$/;"	f	struct:parser.CommCaseContext	typeref:typename:IRecvStmtContext	signature:()
parser.CommCaseContext.SendStmt	parser/golang_parser.go	/^func (s *CommCaseContext) SendStmt() ISendStmtContext {$/;"	f	struct:parser.CommCaseContext	typeref:typename:ISendStmtContext	signature:()
parser.CommCaseContext.ToStringTree	parser/golang_parser.go	/^func (s *CommCaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.CommCaseContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.CommCaseContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.CommCaseContext	typeref:typename:antlr.Parser
parser.CommClauseContext	parser/golang_parser.go	/^type CommClauseContext struct {$/;"	s	package:parser
parser.CommClauseContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.CommClauseContext	typeref:typename:*antlr.BaseParserRuleContext
parser.CommClauseContext.CommCase	parser/golang_parser.go	/^func (s *CommClauseContext) CommCase() ICommCaseContext {$/;"	f	struct:parser.CommClauseContext	typeref:typename:ICommCaseContext	signature:()
parser.CommClauseContext.EnterRule	parser/golang_parser.go	/^func (s *CommClauseContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.CommClauseContext	signature:(listener antlr.ParseTreeListener)
parser.CommClauseContext.ExitRule	parser/golang_parser.go	/^func (s *CommClauseContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.CommClauseContext	signature:(listener antlr.ParseTreeListener)
parser.CommClauseContext.GetParser	parser/golang_parser.go	/^func (s *CommClauseContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.CommClauseContext	typeref:typename:antlr.Parser	signature:()
parser.CommClauseContext.GetRuleContext	parser/golang_parser.go	/^func (s *CommClauseContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.CommClauseContext	typeref:typename:antlr.RuleContext	signature:()
parser.CommClauseContext.IsCommClauseContext	parser/golang_parser.go	/^func (*CommClauseContext) IsCommClauseContext() {}$/;"	f	struct:parser.CommClauseContext	signature:()
parser.CommClauseContext.StatementList	parser/golang_parser.go	/^func (s *CommClauseContext) StatementList() IStatementListContext {$/;"	f	struct:parser.CommClauseContext	typeref:typename:IStatementListContext	signature:()
parser.CommClauseContext.ToStringTree	parser/golang_parser.go	/^func (s *CommClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.CommClauseContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.CommClauseContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.CommClauseContext	typeref:typename:antlr.Parser
parser.CompositeLitContext	parser/golang_parser.go	/^type CompositeLitContext struct {$/;"	s	package:parser
parser.CompositeLitContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.CompositeLitContext	typeref:typename:*antlr.BaseParserRuleContext
parser.CompositeLitContext.EnterRule	parser/golang_parser.go	/^func (s *CompositeLitContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.CompositeLitContext	signature:(listener antlr.ParseTreeListener)
parser.CompositeLitContext.ExitRule	parser/golang_parser.go	/^func (s *CompositeLitContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.CompositeLitContext	signature:(listener antlr.ParseTreeListener)
parser.CompositeLitContext.GetParser	parser/golang_parser.go	/^func (s *CompositeLitContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.CompositeLitContext	typeref:typename:antlr.Parser	signature:()
parser.CompositeLitContext.GetRuleContext	parser/golang_parser.go	/^func (s *CompositeLitContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.CompositeLitContext	typeref:typename:antlr.RuleContext	signature:()
parser.CompositeLitContext.IsCompositeLitContext	parser/golang_parser.go	/^func (*CompositeLitContext) IsCompositeLitContext() {}$/;"	f	struct:parser.CompositeLitContext	signature:()
parser.CompositeLitContext.LiteralType	parser/golang_parser.go	/^func (s *CompositeLitContext) LiteralType() ILiteralTypeContext {$/;"	f	struct:parser.CompositeLitContext	typeref:typename:ILiteralTypeContext	signature:()
parser.CompositeLitContext.LiteralValue	parser/golang_parser.go	/^func (s *CompositeLitContext) LiteralValue() ILiteralValueContext {$/;"	f	struct:parser.CompositeLitContext	typeref:typename:ILiteralValueContext	signature:()
parser.CompositeLitContext.ToStringTree	parser/golang_parser.go	/^func (s *CompositeLitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.CompositeLitContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.CompositeLitContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.CompositeLitContext	typeref:typename:antlr.Parser
parser.ConstDeclContext	parser/golang_parser.go	/^type ConstDeclContext struct {$/;"	s	package:parser
parser.ConstDeclContext.AllConstSpec	parser/golang_parser.go	/^func (s *ConstDeclContext) AllConstSpec() []IConstSpecContext {$/;"	f	struct:parser.ConstDeclContext	typeref:typename:[]IConstSpecContext	signature:()
parser.ConstDeclContext.AllEos	parser/golang_parser.go	/^func (s *ConstDeclContext) AllEos() []IEosContext {$/;"	f	struct:parser.ConstDeclContext	typeref:typename:[]IEosContext	signature:()
parser.ConstDeclContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ConstDeclContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ConstDeclContext.Const	parser/golang_parser.go	/^func (s *ConstDeclContext) Const() antlr.TerminalNode {$/;"	f	struct:parser.ConstDeclContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ConstDeclContext.ConstSpec	parser/golang_parser.go	/^func (s *ConstDeclContext) ConstSpec(i int) IConstSpecContext {$/;"	f	struct:parser.ConstDeclContext	typeref:typename:IConstSpecContext	signature:(i int)
parser.ConstDeclContext.EnterRule	parser/golang_parser.go	/^func (s *ConstDeclContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ConstDeclContext	signature:(listener antlr.ParseTreeListener)
parser.ConstDeclContext.Eos	parser/golang_parser.go	/^func (s *ConstDeclContext) Eos(i int) IEosContext {$/;"	f	struct:parser.ConstDeclContext	typeref:typename:IEosContext	signature:(i int)
parser.ConstDeclContext.ExitRule	parser/golang_parser.go	/^func (s *ConstDeclContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ConstDeclContext	signature:(listener antlr.ParseTreeListener)
parser.ConstDeclContext.GetParser	parser/golang_parser.go	/^func (s *ConstDeclContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ConstDeclContext	typeref:typename:antlr.Parser	signature:()
parser.ConstDeclContext.GetRuleContext	parser/golang_parser.go	/^func (s *ConstDeclContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ConstDeclContext	typeref:typename:antlr.RuleContext	signature:()
parser.ConstDeclContext.IsConstDeclContext	parser/golang_parser.go	/^func (*ConstDeclContext) IsConstDeclContext() {}$/;"	f	struct:parser.ConstDeclContext	signature:()
parser.ConstDeclContext.ToStringTree	parser/golang_parser.go	/^func (s *ConstDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ConstDeclContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ConstDeclContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ConstDeclContext	typeref:typename:antlr.Parser
parser.ConstSpecContext	parser/golang_parser.go	/^type ConstSpecContext struct {$/;"	s	package:parser
parser.ConstSpecContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ConstSpecContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ConstSpecContext.EnterRule	parser/golang_parser.go	/^func (s *ConstSpecContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ConstSpecContext	signature:(listener antlr.ParseTreeListener)
parser.ConstSpecContext.ExitRule	parser/golang_parser.go	/^func (s *ConstSpecContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ConstSpecContext	signature:(listener antlr.ParseTreeListener)
parser.ConstSpecContext.ExpressionList	parser/golang_parser.go	/^func (s *ConstSpecContext) ExpressionList() IExpressionListContext {$/;"	f	struct:parser.ConstSpecContext	typeref:typename:IExpressionListContext	signature:()
parser.ConstSpecContext.GetParser	parser/golang_parser.go	/^func (s *ConstSpecContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ConstSpecContext	typeref:typename:antlr.Parser	signature:()
parser.ConstSpecContext.GetRuleContext	parser/golang_parser.go	/^func (s *ConstSpecContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ConstSpecContext	typeref:typename:antlr.RuleContext	signature:()
parser.ConstSpecContext.IdentifierList	parser/golang_parser.go	/^func (s *ConstSpecContext) IdentifierList() IIdentifierListContext {$/;"	f	struct:parser.ConstSpecContext	typeref:typename:IIdentifierListContext	signature:()
parser.ConstSpecContext.IsConstSpecContext	parser/golang_parser.go	/^func (*ConstSpecContext) IsConstSpecContext() {}$/;"	f	struct:parser.ConstSpecContext	signature:()
parser.ConstSpecContext.ToStringTree	parser/golang_parser.go	/^func (s *ConstSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ConstSpecContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ConstSpecContext.Type_	parser/golang_parser.go	/^func (s *ConstSpecContext) Type_() IType_Context {$/;"	f	struct:parser.ConstSpecContext	typeref:typename:IType_Context	signature:()
parser.ConstSpecContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ConstSpecContext	typeref:typename:antlr.Parser
parser.ContinueStmtContext	parser/golang_parser.go	/^type ContinueStmtContext struct {$/;"	s	package:parser
parser.ContinueStmtContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ContinueStmtContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ContinueStmtContext.Continue	parser/golang_parser.go	/^func (s *ContinueStmtContext) Continue() antlr.TerminalNode {$/;"	f	struct:parser.ContinueStmtContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ContinueStmtContext.EnterRule	parser/golang_parser.go	/^func (s *ContinueStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ContinueStmtContext	signature:(listener antlr.ParseTreeListener)
parser.ContinueStmtContext.ExitRule	parser/golang_parser.go	/^func (s *ContinueStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ContinueStmtContext	signature:(listener antlr.ParseTreeListener)
parser.ContinueStmtContext.GetParser	parser/golang_parser.go	/^func (s *ContinueStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ContinueStmtContext	typeref:typename:antlr.Parser	signature:()
parser.ContinueStmtContext.GetRuleContext	parser/golang_parser.go	/^func (s *ContinueStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ContinueStmtContext	typeref:typename:antlr.RuleContext	signature:()
parser.ContinueStmtContext.IDENTIFIER	parser/golang_parser.go	/^func (s *ContinueStmtContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.ContinueStmtContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ContinueStmtContext.IsContinueStmtContext	parser/golang_parser.go	/^func (*ContinueStmtContext) IsContinueStmtContext() {}$/;"	f	struct:parser.ContinueStmtContext	signature:()
parser.ContinueStmtContext.ToStringTree	parser/golang_parser.go	/^func (s *ContinueStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ContinueStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ContinueStmtContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ContinueStmtContext	typeref:typename:antlr.Parser
parser.ConversionContext	parser/golang_parser.go	/^type ConversionContext struct {$/;"	s	package:parser
parser.ConversionContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ConversionContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ConversionContext.EnterRule	parser/golang_parser.go	/^func (s *ConversionContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ConversionContext	signature:(listener antlr.ParseTreeListener)
parser.ConversionContext.ExitRule	parser/golang_parser.go	/^func (s *ConversionContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ConversionContext	signature:(listener antlr.ParseTreeListener)
parser.ConversionContext.Expression	parser/golang_parser.go	/^func (s *ConversionContext) Expression() IExpressionContext {$/;"	f	struct:parser.ConversionContext	typeref:typename:IExpressionContext	signature:()
parser.ConversionContext.GetParser	parser/golang_parser.go	/^func (s *ConversionContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ConversionContext	typeref:typename:antlr.Parser	signature:()
parser.ConversionContext.GetRuleContext	parser/golang_parser.go	/^func (s *ConversionContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ConversionContext	typeref:typename:antlr.RuleContext	signature:()
parser.ConversionContext.IsConversionContext	parser/golang_parser.go	/^func (*ConversionContext) IsConversionContext() {}$/;"	f	struct:parser.ConversionContext	signature:()
parser.ConversionContext.ToStringTree	parser/golang_parser.go	/^func (s *ConversionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ConversionContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ConversionContext.Type_	parser/golang_parser.go	/^func (s *ConversionContext) Type_() IType_Context {$/;"	f	struct:parser.ConversionContext	typeref:typename:IType_Context	signature:()
parser.ConversionContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ConversionContext	typeref:typename:antlr.Parser
parser.DeclarationContext	parser/golang_parser.go	/^type DeclarationContext struct {$/;"	s	package:parser
parser.DeclarationContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.DeclarationContext	typeref:typename:*antlr.BaseParserRuleContext
parser.DeclarationContext.ConstDecl	parser/golang_parser.go	/^func (s *DeclarationContext) ConstDecl() IConstDeclContext {$/;"	f	struct:parser.DeclarationContext	typeref:typename:IConstDeclContext	signature:()
parser.DeclarationContext.EnterRule	parser/golang_parser.go	/^func (s *DeclarationContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.DeclarationContext	signature:(listener antlr.ParseTreeListener)
parser.DeclarationContext.ExitRule	parser/golang_parser.go	/^func (s *DeclarationContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.DeclarationContext	signature:(listener antlr.ParseTreeListener)
parser.DeclarationContext.GetParser	parser/golang_parser.go	/^func (s *DeclarationContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.DeclarationContext	typeref:typename:antlr.Parser	signature:()
parser.DeclarationContext.GetRuleContext	parser/golang_parser.go	/^func (s *DeclarationContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.DeclarationContext	typeref:typename:antlr.RuleContext	signature:()
parser.DeclarationContext.IsDeclarationContext	parser/golang_parser.go	/^func (*DeclarationContext) IsDeclarationContext() {}$/;"	f	struct:parser.DeclarationContext	signature:()
parser.DeclarationContext.ToStringTree	parser/golang_parser.go	/^func (s *DeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.DeclarationContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.DeclarationContext.TypeDecl	parser/golang_parser.go	/^func (s *DeclarationContext) TypeDecl() ITypeDeclContext {$/;"	f	struct:parser.DeclarationContext	typeref:typename:ITypeDeclContext	signature:()
parser.DeclarationContext.VarDecl	parser/golang_parser.go	/^func (s *DeclarationContext) VarDecl() IVarDeclContext {$/;"	f	struct:parser.DeclarationContext	typeref:typename:IVarDeclContext	signature:()
parser.DeclarationContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.DeclarationContext	typeref:typename:antlr.Parser
parser.DeferStmtContext	parser/golang_parser.go	/^type DeferStmtContext struct {$/;"	s	package:parser
parser.DeferStmtContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.DeferStmtContext	typeref:typename:*antlr.BaseParserRuleContext
parser.DeferStmtContext.Defer	parser/golang_parser.go	/^func (s *DeferStmtContext) Defer() antlr.TerminalNode {$/;"	f	struct:parser.DeferStmtContext	typeref:typename:antlr.TerminalNode	signature:()
parser.DeferStmtContext.EnterRule	parser/golang_parser.go	/^func (s *DeferStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.DeferStmtContext	signature:(listener antlr.ParseTreeListener)
parser.DeferStmtContext.ExitRule	parser/golang_parser.go	/^func (s *DeferStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.DeferStmtContext	signature:(listener antlr.ParseTreeListener)
parser.DeferStmtContext.Expression	parser/golang_parser.go	/^func (s *DeferStmtContext) Expression() IExpressionContext {$/;"	f	struct:parser.DeferStmtContext	typeref:typename:IExpressionContext	signature:()
parser.DeferStmtContext.GetParser	parser/golang_parser.go	/^func (s *DeferStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.DeferStmtContext	typeref:typename:antlr.Parser	signature:()
parser.DeferStmtContext.GetRuleContext	parser/golang_parser.go	/^func (s *DeferStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.DeferStmtContext	typeref:typename:antlr.RuleContext	signature:()
parser.DeferStmtContext.IsDeferStmtContext	parser/golang_parser.go	/^func (*DeferStmtContext) IsDeferStmtContext() {}$/;"	f	struct:parser.DeferStmtContext	signature:()
parser.DeferStmtContext.ToStringTree	parser/golang_parser.go	/^func (s *DeferStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.DeferStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.DeferStmtContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.DeferStmtContext	typeref:typename:antlr.Parser
parser.ElementContext	parser/golang_parser.go	/^type ElementContext struct {$/;"	s	package:parser
parser.ElementContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ElementContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ElementContext.EnterRule	parser/golang_parser.go	/^func (s *ElementContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ElementContext	signature:(listener antlr.ParseTreeListener)
parser.ElementContext.ExitRule	parser/golang_parser.go	/^func (s *ElementContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ElementContext	signature:(listener antlr.ParseTreeListener)
parser.ElementContext.Expression	parser/golang_parser.go	/^func (s *ElementContext) Expression() IExpressionContext {$/;"	f	struct:parser.ElementContext	typeref:typename:IExpressionContext	signature:()
parser.ElementContext.GetParser	parser/golang_parser.go	/^func (s *ElementContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ElementContext	typeref:typename:antlr.Parser	signature:()
parser.ElementContext.GetRuleContext	parser/golang_parser.go	/^func (s *ElementContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ElementContext	typeref:typename:antlr.RuleContext	signature:()
parser.ElementContext.IsElementContext	parser/golang_parser.go	/^func (*ElementContext) IsElementContext() {}$/;"	f	struct:parser.ElementContext	signature:()
parser.ElementContext.LiteralValue	parser/golang_parser.go	/^func (s *ElementContext) LiteralValue() ILiteralValueContext {$/;"	f	struct:parser.ElementContext	typeref:typename:ILiteralValueContext	signature:()
parser.ElementContext.ToStringTree	parser/golang_parser.go	/^func (s *ElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ElementContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ElementContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ElementContext	typeref:typename:antlr.Parser
parser.ElementListContext	parser/golang_parser.go	/^type ElementListContext struct {$/;"	s	package:parser
parser.ElementListContext.AllKeyedElement	parser/golang_parser.go	/^func (s *ElementListContext) AllKeyedElement() []IKeyedElementContext {$/;"	f	struct:parser.ElementListContext	typeref:typename:[]IKeyedElementContext	signature:()
parser.ElementListContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ElementListContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ElementListContext.EnterRule	parser/golang_parser.go	/^func (s *ElementListContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ElementListContext	signature:(listener antlr.ParseTreeListener)
parser.ElementListContext.ExitRule	parser/golang_parser.go	/^func (s *ElementListContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ElementListContext	signature:(listener antlr.ParseTreeListener)
parser.ElementListContext.GetParser	parser/golang_parser.go	/^func (s *ElementListContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ElementListContext	typeref:typename:antlr.Parser	signature:()
parser.ElementListContext.GetRuleContext	parser/golang_parser.go	/^func (s *ElementListContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ElementListContext	typeref:typename:antlr.RuleContext	signature:()
parser.ElementListContext.IsElementListContext	parser/golang_parser.go	/^func (*ElementListContext) IsElementListContext() {}$/;"	f	struct:parser.ElementListContext	signature:()
parser.ElementListContext.KeyedElement	parser/golang_parser.go	/^func (s *ElementListContext) KeyedElement(i int) IKeyedElementContext {$/;"	f	struct:parser.ElementListContext	typeref:typename:IKeyedElementContext	signature:(i int)
parser.ElementListContext.ToStringTree	parser/golang_parser.go	/^func (s *ElementListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ElementListContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ElementListContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ElementListContext	typeref:typename:antlr.Parser
parser.ElementTypeContext	parser/golang_parser.go	/^type ElementTypeContext struct {$/;"	s	package:parser
parser.ElementTypeContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ElementTypeContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ElementTypeContext.EnterRule	parser/golang_parser.go	/^func (s *ElementTypeContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ElementTypeContext	signature:(listener antlr.ParseTreeListener)
parser.ElementTypeContext.ExitRule	parser/golang_parser.go	/^func (s *ElementTypeContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ElementTypeContext	signature:(listener antlr.ParseTreeListener)
parser.ElementTypeContext.GetParser	parser/golang_parser.go	/^func (s *ElementTypeContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ElementTypeContext	typeref:typename:antlr.Parser	signature:()
parser.ElementTypeContext.GetRuleContext	parser/golang_parser.go	/^func (s *ElementTypeContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ElementTypeContext	typeref:typename:antlr.RuleContext	signature:()
parser.ElementTypeContext.IsElementTypeContext	parser/golang_parser.go	/^func (*ElementTypeContext) IsElementTypeContext() {}$/;"	f	struct:parser.ElementTypeContext	signature:()
parser.ElementTypeContext.ToStringTree	parser/golang_parser.go	/^func (s *ElementTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ElementTypeContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ElementTypeContext.Type_	parser/golang_parser.go	/^func (s *ElementTypeContext) Type_() IType_Context {$/;"	f	struct:parser.ElementTypeContext	typeref:typename:IType_Context	signature:()
parser.ElementTypeContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ElementTypeContext	typeref:typename:antlr.Parser
parser.EmptyStmtContext	parser/golang_parser.go	/^type EmptyStmtContext struct {$/;"	s	package:parser
parser.EmptyStmtContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.EmptyStmtContext	typeref:typename:*antlr.BaseParserRuleContext
parser.EmptyStmtContext.EnterRule	parser/golang_parser.go	/^func (s *EmptyStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.EmptyStmtContext	signature:(listener antlr.ParseTreeListener)
parser.EmptyStmtContext.ExitRule	parser/golang_parser.go	/^func (s *EmptyStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.EmptyStmtContext	signature:(listener antlr.ParseTreeListener)
parser.EmptyStmtContext.GetParser	parser/golang_parser.go	/^func (s *EmptyStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.EmptyStmtContext	typeref:typename:antlr.Parser	signature:()
parser.EmptyStmtContext.GetRuleContext	parser/golang_parser.go	/^func (s *EmptyStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.EmptyStmtContext	typeref:typename:antlr.RuleContext	signature:()
parser.EmptyStmtContext.IsEmptyStmtContext	parser/golang_parser.go	/^func (*EmptyStmtContext) IsEmptyStmtContext() {}$/;"	f	struct:parser.EmptyStmtContext	signature:()
parser.EmptyStmtContext.ToStringTree	parser/golang_parser.go	/^func (s *EmptyStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.EmptyStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.EmptyStmtContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.EmptyStmtContext	typeref:typename:antlr.Parser
parser.EosContext	parser/golang_parser.go	/^type EosContext struct {$/;"	s	package:parser
parser.EosContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.EosContext	typeref:typename:*antlr.BaseParserRuleContext
parser.EosContext.EOF	parser/golang_parser.go	/^func (s *EosContext) EOF() antlr.TerminalNode {$/;"	f	struct:parser.EosContext	typeref:typename:antlr.TerminalNode	signature:()
parser.EosContext.EnterRule	parser/golang_parser.go	/^func (s *EosContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.EosContext	signature:(listener antlr.ParseTreeListener)
parser.EosContext.ExitRule	parser/golang_parser.go	/^func (s *EosContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.EosContext	signature:(listener antlr.ParseTreeListener)
parser.EosContext.GetParser	parser/golang_parser.go	/^func (s *EosContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.EosContext	typeref:typename:antlr.Parser	signature:()
parser.EosContext.GetRuleContext	parser/golang_parser.go	/^func (s *EosContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.EosContext	typeref:typename:antlr.RuleContext	signature:()
parser.EosContext.IsEosContext	parser/golang_parser.go	/^func (*EosContext) IsEosContext() {}$/;"	f	struct:parser.EosContext	signature:()
parser.EosContext.ToStringTree	parser/golang_parser.go	/^func (s *EosContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.EosContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.EosContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.EosContext	typeref:typename:antlr.Parser
parser.ExprCaseClauseContext	parser/golang_parser.go	/^type ExprCaseClauseContext struct {$/;"	s	package:parser
parser.ExprCaseClauseContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ExprCaseClauseContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ExprCaseClauseContext.EnterRule	parser/golang_parser.go	/^func (s *ExprCaseClauseContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ExprCaseClauseContext	signature:(listener antlr.ParseTreeListener)
parser.ExprCaseClauseContext.ExitRule	parser/golang_parser.go	/^func (s *ExprCaseClauseContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ExprCaseClauseContext	signature:(listener antlr.ParseTreeListener)
parser.ExprCaseClauseContext.ExprSwitchCase	parser/golang_parser.go	/^func (s *ExprCaseClauseContext) ExprSwitchCase() IExprSwitchCaseContext {$/;"	f	struct:parser.ExprCaseClauseContext	typeref:typename:IExprSwitchCaseContext	signature:()
parser.ExprCaseClauseContext.GetParser	parser/golang_parser.go	/^func (s *ExprCaseClauseContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ExprCaseClauseContext	typeref:typename:antlr.Parser	signature:()
parser.ExprCaseClauseContext.GetRuleContext	parser/golang_parser.go	/^func (s *ExprCaseClauseContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ExprCaseClauseContext	typeref:typename:antlr.RuleContext	signature:()
parser.ExprCaseClauseContext.IsExprCaseClauseContext	parser/golang_parser.go	/^func (*ExprCaseClauseContext) IsExprCaseClauseContext() {}$/;"	f	struct:parser.ExprCaseClauseContext	signature:()
parser.ExprCaseClauseContext.StatementList	parser/golang_parser.go	/^func (s *ExprCaseClauseContext) StatementList() IStatementListContext {$/;"	f	struct:parser.ExprCaseClauseContext	typeref:typename:IStatementListContext	signature:()
parser.ExprCaseClauseContext.ToStringTree	parser/golang_parser.go	/^func (s *ExprCaseClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string /;"	f	struct:parser.ExprCaseClauseContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ExprCaseClauseContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ExprCaseClauseContext	typeref:typename:antlr.Parser
parser.ExprSwitchCaseContext	parser/golang_parser.go	/^type ExprSwitchCaseContext struct {$/;"	s	package:parser
parser.ExprSwitchCaseContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ExprSwitchCaseContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ExprSwitchCaseContext.Case	parser/golang_parser.go	/^func (s *ExprSwitchCaseContext) Case() antlr.TerminalNode {$/;"	f	struct:parser.ExprSwitchCaseContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ExprSwitchCaseContext.Default	parser/golang_parser.go	/^func (s *ExprSwitchCaseContext) Default() antlr.TerminalNode {$/;"	f	struct:parser.ExprSwitchCaseContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ExprSwitchCaseContext.EnterRule	parser/golang_parser.go	/^func (s *ExprSwitchCaseContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ExprSwitchCaseContext	signature:(listener antlr.ParseTreeListener)
parser.ExprSwitchCaseContext.ExitRule	parser/golang_parser.go	/^func (s *ExprSwitchCaseContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ExprSwitchCaseContext	signature:(listener antlr.ParseTreeListener)
parser.ExprSwitchCaseContext.ExpressionList	parser/golang_parser.go	/^func (s *ExprSwitchCaseContext) ExpressionList() IExpressionListContext {$/;"	f	struct:parser.ExprSwitchCaseContext	typeref:typename:IExpressionListContext	signature:()
parser.ExprSwitchCaseContext.GetParser	parser/golang_parser.go	/^func (s *ExprSwitchCaseContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ExprSwitchCaseContext	typeref:typename:antlr.Parser	signature:()
parser.ExprSwitchCaseContext.GetRuleContext	parser/golang_parser.go	/^func (s *ExprSwitchCaseContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ExprSwitchCaseContext	typeref:typename:antlr.RuleContext	signature:()
parser.ExprSwitchCaseContext.IsExprSwitchCaseContext	parser/golang_parser.go	/^func (*ExprSwitchCaseContext) IsExprSwitchCaseContext() {}$/;"	f	struct:parser.ExprSwitchCaseContext	signature:()
parser.ExprSwitchCaseContext.ToStringTree	parser/golang_parser.go	/^func (s *ExprSwitchCaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string /;"	f	struct:parser.ExprSwitchCaseContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ExprSwitchCaseContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ExprSwitchCaseContext	typeref:typename:antlr.Parser
parser.ExprSwitchStmtContext	parser/golang_parser.go	/^type ExprSwitchStmtContext struct {$/;"	s	package:parser
parser.ExprSwitchStmtContext.AllExprCaseClause	parser/golang_parser.go	/^func (s *ExprSwitchStmtContext) AllExprCaseClause() []IExprCaseClauseContext {$/;"	f	struct:parser.ExprSwitchStmtContext	typeref:typename:[]IExprCaseClauseContext	signature:()
parser.ExprSwitchStmtContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ExprSwitchStmtContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ExprSwitchStmtContext.EnterRule	parser/golang_parser.go	/^func (s *ExprSwitchStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ExprSwitchStmtContext	signature:(listener antlr.ParseTreeListener)
parser.ExprSwitchStmtContext.ExitRule	parser/golang_parser.go	/^func (s *ExprSwitchStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ExprSwitchStmtContext	signature:(listener antlr.ParseTreeListener)
parser.ExprSwitchStmtContext.ExprCaseClause	parser/golang_parser.go	/^func (s *ExprSwitchStmtContext) ExprCaseClause(i int) IExprCaseClauseContext {$/;"	f	struct:parser.ExprSwitchStmtContext	typeref:typename:IExprCaseClauseContext	signature:(i int)
parser.ExprSwitchStmtContext.Expression	parser/golang_parser.go	/^func (s *ExprSwitchStmtContext) Expression() IExpressionContext {$/;"	f	struct:parser.ExprSwitchStmtContext	typeref:typename:IExpressionContext	signature:()
parser.ExprSwitchStmtContext.GetParser	parser/golang_parser.go	/^func (s *ExprSwitchStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ExprSwitchStmtContext	typeref:typename:antlr.Parser	signature:()
parser.ExprSwitchStmtContext.GetRuleContext	parser/golang_parser.go	/^func (s *ExprSwitchStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ExprSwitchStmtContext	typeref:typename:antlr.RuleContext	signature:()
parser.ExprSwitchStmtContext.IsExprSwitchStmtContext	parser/golang_parser.go	/^func (*ExprSwitchStmtContext) IsExprSwitchStmtContext() {}$/;"	f	struct:parser.ExprSwitchStmtContext	signature:()
parser.ExprSwitchStmtContext.SimpleStmt	parser/golang_parser.go	/^func (s *ExprSwitchStmtContext) SimpleStmt() ISimpleStmtContext {$/;"	f	struct:parser.ExprSwitchStmtContext	typeref:typename:ISimpleStmtContext	signature:()
parser.ExprSwitchStmtContext.Switch	parser/golang_parser.go	/^func (s *ExprSwitchStmtContext) Switch() antlr.TerminalNode {$/;"	f	struct:parser.ExprSwitchStmtContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ExprSwitchStmtContext.ToStringTree	parser/golang_parser.go	/^func (s *ExprSwitchStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string /;"	f	struct:parser.ExprSwitchStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ExprSwitchStmtContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ExprSwitchStmtContext	typeref:typename:antlr.Parser
parser.ExpressionContext	parser/golang_parser.go	/^type ExpressionContext struct {$/;"	s	package:parser
parser.ExpressionContext.AllExpression	parser/golang_parser.go	/^func (s *ExpressionContext) AllExpression() []IExpressionContext {$/;"	f	struct:parser.ExpressionContext	typeref:typename:[]IExpressionContext	signature:()
parser.ExpressionContext.And	parser/golang_parser.go	/^func (s *ExpressionContext) And() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ExpressionContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ExpressionContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ExpressionContext.BitAnd	parser/golang_parser.go	/^func (s *ExpressionContext) BitAnd() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ExpressionContext.BitClear	parser/golang_parser.go	/^func (s *ExpressionContext) BitClear() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ExpressionContext.BitOr	parser/golang_parser.go	/^func (s *ExpressionContext) BitOr() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ExpressionContext.BitXor	parser/golang_parser.go	/^func (s *ExpressionContext) BitXor() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ExpressionContext.Divide	parser/golang_parser.go	/^func (s *ExpressionContext) Divide() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ExpressionContext.EnterRule	parser/golang_parser.go	/^func (s *ExpressionContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ExpressionContext	signature:(listener antlr.ParseTreeListener)
parser.ExpressionContext.Equals_	parser/golang_parser.go	/^func (s *ExpressionContext) Equals_() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ExpressionContext.ExitRule	parser/golang_parser.go	/^func (s *ExpressionContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ExpressionContext	signature:(listener antlr.ParseTreeListener)
parser.ExpressionContext.Expression	parser/golang_parser.go	/^func (s *ExpressionContext) Expression(i int) IExpressionContext {$/;"	f	struct:parser.ExpressionContext	typeref:typename:IExpressionContext	signature:(i int)
parser.ExpressionContext.GetParser	parser/golang_parser.go	/^func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.Parser	signature:()
parser.ExpressionContext.GetRuleContext	parser/golang_parser.go	/^func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.RuleContext	signature:()
parser.ExpressionContext.GreaterThan	parser/golang_parser.go	/^func (s *ExpressionContext) GreaterThan() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ExpressionContext.GreaterThanEquals	parser/golang_parser.go	/^func (s *ExpressionContext) GreaterThanEquals() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ExpressionContext.IsExpressionContext	parser/golang_parser.go	/^func (*ExpressionContext) IsExpressionContext() {}$/;"	f	struct:parser.ExpressionContext	signature:()
parser.ExpressionContext.LeftShiftArithmetic	parser/golang_parser.go	/^func (s *ExpressionContext) LeftShiftArithmetic() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ExpressionContext.LessThan	parser/golang_parser.go	/^func (s *ExpressionContext) LessThan() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ExpressionContext.LessThanEquals	parser/golang_parser.go	/^func (s *ExpressionContext) LessThanEquals() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ExpressionContext.Minus	parser/golang_parser.go	/^func (s *ExpressionContext) Minus() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ExpressionContext.Modulus	parser/golang_parser.go	/^func (s *ExpressionContext) Modulus() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ExpressionContext.Multiply	parser/golang_parser.go	/^func (s *ExpressionContext) Multiply() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ExpressionContext.NotEquals	parser/golang_parser.go	/^func (s *ExpressionContext) NotEquals() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ExpressionContext.Or	parser/golang_parser.go	/^func (s *ExpressionContext) Or() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ExpressionContext.Plus	parser/golang_parser.go	/^func (s *ExpressionContext) Plus() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ExpressionContext.RightShiftArithmetic	parser/golang_parser.go	/^func (s *ExpressionContext) RightShiftArithmetic() antlr.TerminalNode {$/;"	f	struct:parser.ExpressionContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ExpressionContext.ToStringTree	parser/golang_parser.go	/^func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ExpressionContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ExpressionContext.UnaryExpr	parser/golang_parser.go	/^func (s *ExpressionContext) UnaryExpr() IUnaryExprContext {$/;"	f	struct:parser.ExpressionContext	typeref:typename:IUnaryExprContext	signature:()
parser.ExpressionContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ExpressionContext	typeref:typename:antlr.Parser
parser.ExpressionListContext	parser/golang_parser.go	/^type ExpressionListContext struct {$/;"	s	package:parser
parser.ExpressionListContext.AllExpression	parser/golang_parser.go	/^func (s *ExpressionListContext) AllExpression() []IExpressionContext {$/;"	f	struct:parser.ExpressionListContext	typeref:typename:[]IExpressionContext	signature:()
parser.ExpressionListContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ExpressionListContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ExpressionListContext.EnterRule	parser/golang_parser.go	/^func (s *ExpressionListContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ExpressionListContext	signature:(listener antlr.ParseTreeListener)
parser.ExpressionListContext.ExitRule	parser/golang_parser.go	/^func (s *ExpressionListContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ExpressionListContext	signature:(listener antlr.ParseTreeListener)
parser.ExpressionListContext.Expression	parser/golang_parser.go	/^func (s *ExpressionListContext) Expression(i int) IExpressionContext {$/;"	f	struct:parser.ExpressionListContext	typeref:typename:IExpressionContext	signature:(i int)
parser.ExpressionListContext.GetParser	parser/golang_parser.go	/^func (s *ExpressionListContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ExpressionListContext	typeref:typename:antlr.Parser	signature:()
parser.ExpressionListContext.GetRuleContext	parser/golang_parser.go	/^func (s *ExpressionListContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ExpressionListContext	typeref:typename:antlr.RuleContext	signature:()
parser.ExpressionListContext.IsExpressionListContext	parser/golang_parser.go	/^func (*ExpressionListContext) IsExpressionListContext() {}$/;"	f	struct:parser.ExpressionListContext	signature:()
parser.ExpressionListContext.ToStringTree	parser/golang_parser.go	/^func (s *ExpressionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string /;"	f	struct:parser.ExpressionListContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ExpressionListContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ExpressionListContext	typeref:typename:antlr.Parser
parser.ExpressionStmtContext	parser/golang_parser.go	/^type ExpressionStmtContext struct {$/;"	s	package:parser
parser.ExpressionStmtContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ExpressionStmtContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ExpressionStmtContext.EnterRule	parser/golang_parser.go	/^func (s *ExpressionStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ExpressionStmtContext	signature:(listener antlr.ParseTreeListener)
parser.ExpressionStmtContext.ExitRule	parser/golang_parser.go	/^func (s *ExpressionStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ExpressionStmtContext	signature:(listener antlr.ParseTreeListener)
parser.ExpressionStmtContext.Expression	parser/golang_parser.go	/^func (s *ExpressionStmtContext) Expression() IExpressionContext {$/;"	f	struct:parser.ExpressionStmtContext	typeref:typename:IExpressionContext	signature:()
parser.ExpressionStmtContext.GetParser	parser/golang_parser.go	/^func (s *ExpressionStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ExpressionStmtContext	typeref:typename:antlr.Parser	signature:()
parser.ExpressionStmtContext.GetRuleContext	parser/golang_parser.go	/^func (s *ExpressionStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ExpressionStmtContext	typeref:typename:antlr.RuleContext	signature:()
parser.ExpressionStmtContext.IsExpressionStmtContext	parser/golang_parser.go	/^func (*ExpressionStmtContext) IsExpressionStmtContext() {}$/;"	f	struct:parser.ExpressionStmtContext	signature:()
parser.ExpressionStmtContext.ToStringTree	parser/golang_parser.go	/^func (s *ExpressionStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string /;"	f	struct:parser.ExpressionStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ExpressionStmtContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ExpressionStmtContext	typeref:typename:antlr.Parser
parser.FallthroughStmtContext	parser/golang_parser.go	/^type FallthroughStmtContext struct {$/;"	s	package:parser
parser.FallthroughStmtContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.FallthroughStmtContext	typeref:typename:*antlr.BaseParserRuleContext
parser.FallthroughStmtContext.EnterRule	parser/golang_parser.go	/^func (s *FallthroughStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.FallthroughStmtContext	signature:(listener antlr.ParseTreeListener)
parser.FallthroughStmtContext.ExitRule	parser/golang_parser.go	/^func (s *FallthroughStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.FallthroughStmtContext	signature:(listener antlr.ParseTreeListener)
parser.FallthroughStmtContext.Fallthrough	parser/golang_parser.go	/^func (s *FallthroughStmtContext) Fallthrough() antlr.TerminalNode {$/;"	f	struct:parser.FallthroughStmtContext	typeref:typename:antlr.TerminalNode	signature:()
parser.FallthroughStmtContext.GetParser	parser/golang_parser.go	/^func (s *FallthroughStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.FallthroughStmtContext	typeref:typename:antlr.Parser	signature:()
parser.FallthroughStmtContext.GetRuleContext	parser/golang_parser.go	/^func (s *FallthroughStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.FallthroughStmtContext	typeref:typename:antlr.RuleContext	signature:()
parser.FallthroughStmtContext.IsFallthroughStmtContext	parser/golang_parser.go	/^func (*FallthroughStmtContext) IsFallthroughStmtContext() {}$/;"	f	struct:parser.FallthroughStmtContext	signature:()
parser.FallthroughStmtContext.ToStringTree	parser/golang_parser.go	/^func (s *FallthroughStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string/;"	f	struct:parser.FallthroughStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.FallthroughStmtContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.FallthroughStmtContext	typeref:typename:antlr.Parser
parser.FieldDeclContext	parser/golang_parser.go	/^type FieldDeclContext struct {$/;"	s	package:parser
parser.FieldDeclContext.AnonymousField	parser/golang_parser.go	/^func (s *FieldDeclContext) AnonymousField() IAnonymousFieldContext {$/;"	f	struct:parser.FieldDeclContext	typeref:typename:IAnonymousFieldContext	signature:()
parser.FieldDeclContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.FieldDeclContext	typeref:typename:*antlr.BaseParserRuleContext
parser.FieldDeclContext.EnterRule	parser/golang_parser.go	/^func (s *FieldDeclContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.FieldDeclContext	signature:(listener antlr.ParseTreeListener)
parser.FieldDeclContext.ExitRule	parser/golang_parser.go	/^func (s *FieldDeclContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.FieldDeclContext	signature:(listener antlr.ParseTreeListener)
parser.FieldDeclContext.GetParser	parser/golang_parser.go	/^func (s *FieldDeclContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.FieldDeclContext	typeref:typename:antlr.Parser	signature:()
parser.FieldDeclContext.GetRuleContext	parser/golang_parser.go	/^func (s *FieldDeclContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.FieldDeclContext	typeref:typename:antlr.RuleContext	signature:()
parser.FieldDeclContext.IdentifierList	parser/golang_parser.go	/^func (s *FieldDeclContext) IdentifierList() IIdentifierListContext {$/;"	f	struct:parser.FieldDeclContext	typeref:typename:IIdentifierListContext	signature:()
parser.FieldDeclContext.IsFieldDeclContext	parser/golang_parser.go	/^func (*FieldDeclContext) IsFieldDeclContext() {}$/;"	f	struct:parser.FieldDeclContext	signature:()
parser.FieldDeclContext.STRING_LIT	parser/golang_parser.go	/^func (s *FieldDeclContext) STRING_LIT() antlr.TerminalNode {$/;"	f	struct:parser.FieldDeclContext	typeref:typename:antlr.TerminalNode	signature:()
parser.FieldDeclContext.ToStringTree	parser/golang_parser.go	/^func (s *FieldDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.FieldDeclContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.FieldDeclContext.Type_	parser/golang_parser.go	/^func (s *FieldDeclContext) Type_() IType_Context {$/;"	f	struct:parser.FieldDeclContext	typeref:typename:IType_Context	signature:()
parser.FieldDeclContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.FieldDeclContext	typeref:typename:antlr.Parser
parser.ForClauseContext	parser/golang_parser.go	/^type ForClauseContext struct {$/;"	s	package:parser
parser.ForClauseContext.AllSimpleStmt	parser/golang_parser.go	/^func (s *ForClauseContext) AllSimpleStmt() []ISimpleStmtContext {$/;"	f	struct:parser.ForClauseContext	typeref:typename:[]ISimpleStmtContext	signature:()
parser.ForClauseContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ForClauseContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ForClauseContext.EnterRule	parser/golang_parser.go	/^func (s *ForClauseContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ForClauseContext	signature:(listener antlr.ParseTreeListener)
parser.ForClauseContext.ExitRule	parser/golang_parser.go	/^func (s *ForClauseContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ForClauseContext	signature:(listener antlr.ParseTreeListener)
parser.ForClauseContext.Expression	parser/golang_parser.go	/^func (s *ForClauseContext) Expression() IExpressionContext {$/;"	f	struct:parser.ForClauseContext	typeref:typename:IExpressionContext	signature:()
parser.ForClauseContext.GetParser	parser/golang_parser.go	/^func (s *ForClauseContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ForClauseContext	typeref:typename:antlr.Parser	signature:()
parser.ForClauseContext.GetRuleContext	parser/golang_parser.go	/^func (s *ForClauseContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ForClauseContext	typeref:typename:antlr.RuleContext	signature:()
parser.ForClauseContext.IsForClauseContext	parser/golang_parser.go	/^func (*ForClauseContext) IsForClauseContext() {}$/;"	f	struct:parser.ForClauseContext	signature:()
parser.ForClauseContext.SimpleStmt	parser/golang_parser.go	/^func (s *ForClauseContext) SimpleStmt(i int) ISimpleStmtContext {$/;"	f	struct:parser.ForClauseContext	typeref:typename:ISimpleStmtContext	signature:(i int)
parser.ForClauseContext.ToStringTree	parser/golang_parser.go	/^func (s *ForClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ForClauseContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ForClauseContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ForClauseContext	typeref:typename:antlr.Parser
parser.ForStmtContext	parser/golang_parser.go	/^type ForStmtContext struct {$/;"	s	package:parser
parser.ForStmtContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ForStmtContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ForStmtContext.Block	parser/golang_parser.go	/^func (s *ForStmtContext) Block() IBlockContext {$/;"	f	struct:parser.ForStmtContext	typeref:typename:IBlockContext	signature:()
parser.ForStmtContext.EnterRule	parser/golang_parser.go	/^func (s *ForStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ForStmtContext	signature:(listener antlr.ParseTreeListener)
parser.ForStmtContext.ExitRule	parser/golang_parser.go	/^func (s *ForStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ForStmtContext	signature:(listener antlr.ParseTreeListener)
parser.ForStmtContext.Expression	parser/golang_parser.go	/^func (s *ForStmtContext) Expression() IExpressionContext {$/;"	f	struct:parser.ForStmtContext	typeref:typename:IExpressionContext	signature:()
parser.ForStmtContext.For	parser/golang_parser.go	/^func (s *ForStmtContext) For() antlr.TerminalNode {$/;"	f	struct:parser.ForStmtContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ForStmtContext.ForClause	parser/golang_parser.go	/^func (s *ForStmtContext) ForClause() IForClauseContext {$/;"	f	struct:parser.ForStmtContext	typeref:typename:IForClauseContext	signature:()
parser.ForStmtContext.GetParser	parser/golang_parser.go	/^func (s *ForStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ForStmtContext	typeref:typename:antlr.Parser	signature:()
parser.ForStmtContext.GetRuleContext	parser/golang_parser.go	/^func (s *ForStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ForStmtContext	typeref:typename:antlr.RuleContext	signature:()
parser.ForStmtContext.IsForStmtContext	parser/golang_parser.go	/^func (*ForStmtContext) IsForStmtContext() {}$/;"	f	struct:parser.ForStmtContext	signature:()
parser.ForStmtContext.RangeClause	parser/golang_parser.go	/^func (s *ForStmtContext) RangeClause() IRangeClauseContext {$/;"	f	struct:parser.ForStmtContext	typeref:typename:IRangeClauseContext	signature:()
parser.ForStmtContext.ToStringTree	parser/golang_parser.go	/^func (s *ForStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ForStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ForStmtContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ForStmtContext	typeref:typename:antlr.Parser
parser.FunctionContext	parser/golang_parser.go	/^type FunctionContext struct {$/;"	s	package:parser
parser.FunctionContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.FunctionContext	typeref:typename:*antlr.BaseParserRuleContext
parser.FunctionContext.Block	parser/golang_parser.go	/^func (s *FunctionContext) Block() IBlockContext {$/;"	f	struct:parser.FunctionContext	typeref:typename:IBlockContext	signature:()
parser.FunctionContext.EnterRule	parser/golang_parser.go	/^func (s *FunctionContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.FunctionContext	signature:(listener antlr.ParseTreeListener)
parser.FunctionContext.ExitRule	parser/golang_parser.go	/^func (s *FunctionContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.FunctionContext	signature:(listener antlr.ParseTreeListener)
parser.FunctionContext.GetParser	parser/golang_parser.go	/^func (s *FunctionContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.FunctionContext	typeref:typename:antlr.Parser	signature:()
parser.FunctionContext.GetRuleContext	parser/golang_parser.go	/^func (s *FunctionContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.FunctionContext	typeref:typename:antlr.RuleContext	signature:()
parser.FunctionContext.IsFunctionContext	parser/golang_parser.go	/^func (*FunctionContext) IsFunctionContext() {}$/;"	f	struct:parser.FunctionContext	signature:()
parser.FunctionContext.Signature	parser/golang_parser.go	/^func (s *FunctionContext) Signature() ISignatureContext {$/;"	f	struct:parser.FunctionContext	typeref:typename:ISignatureContext	signature:()
parser.FunctionContext.ToStringTree	parser/golang_parser.go	/^func (s *FunctionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.FunctionContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.FunctionContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.FunctionContext	typeref:typename:antlr.Parser
parser.FunctionDeclContext	parser/golang_parser.go	/^type FunctionDeclContext struct {$/;"	s	package:parser
parser.FunctionDeclContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.FunctionDeclContext	typeref:typename:*antlr.BaseParserRuleContext
parser.FunctionDeclContext.EnterRule	parser/golang_parser.go	/^func (s *FunctionDeclContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.FunctionDeclContext	signature:(listener antlr.ParseTreeListener)
parser.FunctionDeclContext.ExitRule	parser/golang_parser.go	/^func (s *FunctionDeclContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.FunctionDeclContext	signature:(listener antlr.ParseTreeListener)
parser.FunctionDeclContext.Func	parser/golang_parser.go	/^func (s *FunctionDeclContext) Func() antlr.TerminalNode {$/;"	f	struct:parser.FunctionDeclContext	typeref:typename:antlr.TerminalNode	signature:()
parser.FunctionDeclContext.Function	parser/golang_parser.go	/^func (s *FunctionDeclContext) Function() IFunctionContext {$/;"	f	struct:parser.FunctionDeclContext	typeref:typename:IFunctionContext	signature:()
parser.FunctionDeclContext.GetParser	parser/golang_parser.go	/^func (s *FunctionDeclContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.FunctionDeclContext	typeref:typename:antlr.Parser	signature:()
parser.FunctionDeclContext.GetRuleContext	parser/golang_parser.go	/^func (s *FunctionDeclContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.FunctionDeclContext	typeref:typename:antlr.RuleContext	signature:()
parser.FunctionDeclContext.IDENTIFIER	parser/golang_parser.go	/^func (s *FunctionDeclContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.FunctionDeclContext	typeref:typename:antlr.TerminalNode	signature:()
parser.FunctionDeclContext.IsFunctionDeclContext	parser/golang_parser.go	/^func (*FunctionDeclContext) IsFunctionDeclContext() {}$/;"	f	struct:parser.FunctionDeclContext	signature:()
parser.FunctionDeclContext.Signature	parser/golang_parser.go	/^func (s *FunctionDeclContext) Signature() ISignatureContext {$/;"	f	struct:parser.FunctionDeclContext	typeref:typename:ISignatureContext	signature:()
parser.FunctionDeclContext.ToStringTree	parser/golang_parser.go	/^func (s *FunctionDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.FunctionDeclContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.FunctionDeclContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.FunctionDeclContext	typeref:typename:antlr.Parser
parser.FunctionLitContext	parser/golang_parser.go	/^type FunctionLitContext struct {$/;"	s	package:parser
parser.FunctionLitContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.FunctionLitContext	typeref:typename:*antlr.BaseParserRuleContext
parser.FunctionLitContext.EnterRule	parser/golang_parser.go	/^func (s *FunctionLitContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.FunctionLitContext	signature:(listener antlr.ParseTreeListener)
parser.FunctionLitContext.ExitRule	parser/golang_parser.go	/^func (s *FunctionLitContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.FunctionLitContext	signature:(listener antlr.ParseTreeListener)
parser.FunctionLitContext.Func	parser/golang_parser.go	/^func (s *FunctionLitContext) Func() antlr.TerminalNode {$/;"	f	struct:parser.FunctionLitContext	typeref:typename:antlr.TerminalNode	signature:()
parser.FunctionLitContext.Function	parser/golang_parser.go	/^func (s *FunctionLitContext) Function() IFunctionContext {$/;"	f	struct:parser.FunctionLitContext	typeref:typename:IFunctionContext	signature:()
parser.FunctionLitContext.GetParser	parser/golang_parser.go	/^func (s *FunctionLitContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.FunctionLitContext	typeref:typename:antlr.Parser	signature:()
parser.FunctionLitContext.GetRuleContext	parser/golang_parser.go	/^func (s *FunctionLitContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.FunctionLitContext	typeref:typename:antlr.RuleContext	signature:()
parser.FunctionLitContext.IsFunctionLitContext	parser/golang_parser.go	/^func (*FunctionLitContext) IsFunctionLitContext() {}$/;"	f	struct:parser.FunctionLitContext	signature:()
parser.FunctionLitContext.ToStringTree	parser/golang_parser.go	/^func (s *FunctionLitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.FunctionLitContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.FunctionLitContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.FunctionLitContext	typeref:typename:antlr.Parser
parser.FunctionTypeContext	parser/golang_parser.go	/^type FunctionTypeContext struct {$/;"	s	package:parser
parser.FunctionTypeContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.FunctionTypeContext	typeref:typename:*antlr.BaseParserRuleContext
parser.FunctionTypeContext.EnterRule	parser/golang_parser.go	/^func (s *FunctionTypeContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.FunctionTypeContext	signature:(listener antlr.ParseTreeListener)
parser.FunctionTypeContext.ExitRule	parser/golang_parser.go	/^func (s *FunctionTypeContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.FunctionTypeContext	signature:(listener antlr.ParseTreeListener)
parser.FunctionTypeContext.Func	parser/golang_parser.go	/^func (s *FunctionTypeContext) Func() antlr.TerminalNode {$/;"	f	struct:parser.FunctionTypeContext	typeref:typename:antlr.TerminalNode	signature:()
parser.FunctionTypeContext.GetParser	parser/golang_parser.go	/^func (s *FunctionTypeContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.FunctionTypeContext	typeref:typename:antlr.Parser	signature:()
parser.FunctionTypeContext.GetRuleContext	parser/golang_parser.go	/^func (s *FunctionTypeContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.FunctionTypeContext	typeref:typename:antlr.RuleContext	signature:()
parser.FunctionTypeContext.IsFunctionTypeContext	parser/golang_parser.go	/^func (*FunctionTypeContext) IsFunctionTypeContext() {}$/;"	f	struct:parser.FunctionTypeContext	signature:()
parser.FunctionTypeContext.Signature	parser/golang_parser.go	/^func (s *FunctionTypeContext) Signature() ISignatureContext {$/;"	f	struct:parser.FunctionTypeContext	typeref:typename:ISignatureContext	signature:()
parser.FunctionTypeContext.ToStringTree	parser/golang_parser.go	/^func (s *FunctionTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.FunctionTypeContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.FunctionTypeContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.FunctionTypeContext	typeref:typename:antlr.Parser
parser.GoBaseLexer	golang_base_lexer.go	/^type GoBaseLexer struct {$/;"	s	package:parser
parser.GoBaseLexer	parser/golang_base_lexer.go	/^type GoBaseLexer struct {$/;"	s	package:parser
parser.GoBaseLexer.BaseLexer	golang_base_lexer.go	/^	*antlr.BaseLexer$/;"	M	struct:parser.GoBaseLexer	typeref:typename:*antlr.BaseLexer
parser.GoBaseLexer.BaseLexer	parser/golang_base_lexer.go	/^	*antlr.BaseLexer$/;"	M	struct:parser.GoBaseLexer	typeref:typename:*antlr.BaseLexer
parser.GoBaseLexer.lastToken	golang_base_lexer.go	/^	lastToken antlr.Token$/;"	m	struct:parser.GoBaseLexer	typeref:typename:antlr.Token
parser.GoBaseLexer.lastToken	parser/golang_base_lexer.go	/^	lastToken antlr.Token$/;"	m	struct:parser.GoBaseLexer	typeref:typename:antlr.Token
parser.GoBaseLexer.nextToken	golang_base_lexer.go	/^func (l *GoBaseLexer) nextToken() antlr.Token {$/;"	f	struct:parser.GoBaseLexer	typeref:typename:antlr.Token	signature:()
parser.GoBaseLexer.nextToken	parser/golang_base_lexer.go	/^func (l *GoBaseLexer) nextToken() antlr.Token {$/;"	f	struct:parser.GoBaseLexer	typeref:typename:antlr.Token	signature:()
parser.GoBaseParser	golang_base_parser.go	/^type GoBaseParser struct {$/;"	s	package:parser
parser.GoBaseParser	parser/golang_base_parser.go	/^type GoBaseParser struct {$/;"	s	package:parser
parser.GoBaseParser.BaseParser	golang_base_parser.go	/^	*antlr.BaseParser$/;"	M	struct:parser.GoBaseParser	typeref:typename:*antlr.BaseParser
parser.GoBaseParser.BaseParser	parser/golang_base_parser.go	/^	*antlr.BaseParser$/;"	M	struct:parser.GoBaseParser	typeref:typename:*antlr.BaseParser
parser.GoBaseParser.closeBrace	golang_base_parser.go	/^func (p *GoBaseParser) closeBrace() bool {$/;"	f	struct:parser.GoBaseParser	typeref:typename:bool	signature:()
parser.GoBaseParser.closeBrace	parser/golang_base_parser.go	/^func (p *GoBaseParser) closeBrace() bool {$/;"	f	struct:parser.GoBaseParser	typeref:typename:bool	signature:()
parser.GoBaseParser.lineTerminatorAhead	golang_base_parser.go	/^func (p *GoBaseParser) lineTerminatorAhead() bool {$/;"	f	struct:parser.GoBaseParser	typeref:typename:bool	signature:()
parser.GoBaseParser.lineTerminatorAhead	parser/golang_base_parser.go	/^func (p *GoBaseParser) lineTerminatorAhead() bool {$/;"	f	struct:parser.GoBaseParser	typeref:typename:bool	signature:()
parser.GoBaseParser.noTerminatorAfterParams	golang_base_parser.go	/^func (p *GoBaseParser) noTerminatorAfterParams(tokenOffset int) bool {$/;"	f	struct:parser.GoBaseParser	typeref:typename:bool	signature:(tokenOffset int)
parser.GoBaseParser.noTerminatorAfterParams	parser/golang_base_parser.go	/^func (p *GoBaseParser) noTerminatorAfterParams(tokenOffset int) bool {$/;"	f	struct:parser.GoBaseParser	typeref:typename:bool	signature:(tokenOffset int)
parser.GoBaseParser.noTerminatorBetween	golang_base_parser.go	/^func (p *GoBaseParser) noTerminatorBetween(tokenOffset int) bool {$/;"	f	struct:parser.GoBaseParser	typeref:typename:bool	signature:(tokenOffset int)
parser.GoBaseParser.noTerminatorBetween	parser/golang_base_parser.go	/^func (p *GoBaseParser) noTerminatorBetween(tokenOffset int) bool {$/;"	f	struct:parser.GoBaseParser	typeref:typename:bool	signature:(tokenOffset int)
parser.GoStmtContext	parser/golang_parser.go	/^type GoStmtContext struct {$/;"	s	package:parser
parser.GoStmtContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.GoStmtContext	typeref:typename:*antlr.BaseParserRuleContext
parser.GoStmtContext.EnterRule	parser/golang_parser.go	/^func (s *GoStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.GoStmtContext	signature:(listener antlr.ParseTreeListener)
parser.GoStmtContext.ExitRule	parser/golang_parser.go	/^func (s *GoStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.GoStmtContext	signature:(listener antlr.ParseTreeListener)
parser.GoStmtContext.Expression	parser/golang_parser.go	/^func (s *GoStmtContext) Expression() IExpressionContext {$/;"	f	struct:parser.GoStmtContext	typeref:typename:IExpressionContext	signature:()
parser.GoStmtContext.GetParser	parser/golang_parser.go	/^func (s *GoStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.GoStmtContext	typeref:typename:antlr.Parser	signature:()
parser.GoStmtContext.GetRuleContext	parser/golang_parser.go	/^func (s *GoStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.GoStmtContext	typeref:typename:antlr.RuleContext	signature:()
parser.GoStmtContext.Go	parser/golang_parser.go	/^func (s *GoStmtContext) Go() antlr.TerminalNode {$/;"	f	struct:parser.GoStmtContext	typeref:typename:antlr.TerminalNode	signature:()
parser.GoStmtContext.IsGoStmtContext	parser/golang_parser.go	/^func (*GoStmtContext) IsGoStmtContext() {}$/;"	f	struct:parser.GoStmtContext	signature:()
parser.GoStmtContext.ToStringTree	parser/golang_parser.go	/^func (s *GoStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.GoStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.GoStmtContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.GoStmtContext	typeref:typename:antlr.Parser
parser.GolangLexer	parser/golang_lexer.go	/^type GolangLexer struct {$/;"	s	package:parser
parser.GolangLexer.GoBaseLexer	parser/golang_lexer.go	/^	*GoBaseLexer$/;"	M	struct:parser.GolangLexer	typeref:typename:*GoBaseLexer
parser.GolangLexer.channelNames	parser/golang_lexer.go	/^	channelNames []string$/;"	m	struct:parser.GolangLexer	typeref:typename:[]string
parser.GolangLexer.modeNames	parser/golang_lexer.go	/^	modeNames    []string$/;"	m	struct:parser.GolangLexer	typeref:typename:[]string
parser.GolangLexerAnd	parser/golang_lexer.go	/^	GolangLexerAnd                  = 27$/;"	c	package:parser
parser.GolangLexerAssign	parser/golang_lexer.go	/^	GolangLexerAssign               = 56$/;"	c	package:parser
parser.GolangLexerBIG_U_VALUE	parser/golang_lexer.go	/^	GolangLexerBIG_U_VALUE          = 69$/;"	c	package:parser
parser.GolangLexerBINARY_OP	parser/golang_lexer.go	/^	GolangLexerBINARY_OP            = 63$/;"	c	package:parser
parser.GolangLexerBitAnd	parser/golang_lexer.go	/^	GolangLexerBitAnd               = 43$/;"	c	package:parser
parser.GolangLexerBitClear	parser/golang_lexer.go	/^	GolangLexerBitClear             = 44$/;"	c	package:parser
parser.GolangLexerBitOr	parser/golang_lexer.go	/^	GolangLexerBitOr                = 36$/;"	c	package:parser
parser.GolangLexerBitXor	parser/golang_lexer.go	/^	GolangLexerBitXor               = 37$/;"	c	package:parser
parser.GolangLexerBreak	parser/golang_lexer.go	/^	GolangLexerBreak                = 1$/;"	c	package:parser
parser.GolangLexerCOMMENT	parser/golang_lexer.go	/^	GolangLexerCOMMENT              = 72$/;"	c	package:parser
parser.GolangLexerCase	parser/golang_lexer.go	/^	GolangLexerCase                 = 6$/;"	c	package:parser
parser.GolangLexerChan	parser/golang_lexer.go	/^	GolangLexerChan                 = 11$/;"	c	package:parser
parser.GolangLexerChanOp	parser/golang_lexer.go	/^	GolangLexerChanOp               = 46$/;"	c	package:parser
parser.GolangLexerCloseBrace	parser/golang_lexer.go	/^	GolangLexerCloseBrace           = 50$/;"	c	package:parser
parser.GolangLexerCloseBracket	parser/golang_lexer.go	/^	GolangLexerCloseBracket         = 52$/;"	c	package:parser
parser.GolangLexerCloseParen	parser/golang_lexer.go	/^	GolangLexerCloseParen           = 48$/;"	c	package:parser
parser.GolangLexerColon	parser/golang_lexer.go	/^	GolangLexerColon                = 53$/;"	c	package:parser
parser.GolangLexerComma	parser/golang_lexer.go	/^	GolangLexerComma                = 55$/;"	c	package:parser
parser.GolangLexerConst	parser/golang_lexer.go	/^	GolangLexerConst                = 16$/;"	c	package:parser
parser.GolangLexerContinue	parser/golang_lexer.go	/^	GolangLexerContinue             = 21$/;"	c	package:parser
parser.GolangLexerDeclareAndAssign	parser/golang_lexer.go	/^	GolangLexerDeclareAndAssign     = 57$/;"	c	package:parser
parser.GolangLexerDefault	parser/golang_lexer.go	/^	GolangLexerDefault              = 2$/;"	c	package:parser
parser.GolangLexerDefer	parser/golang_lexer.go	/^	GolangLexerDefer                = 7$/;"	c	package:parser
parser.GolangLexerDivide	parser/golang_lexer.go	/^	GolangLexerDivide               = 39$/;"	c	package:parser
parser.GolangLexerDot	parser/golang_lexer.go	/^	GolangLexerDot                  = 58$/;"	c	package:parser
parser.GolangLexerEllipsis	parser/golang_lexer.go	/^	GolangLexerEllipsis             = 59$/;"	c	package:parser
parser.GolangLexerElse	parser/golang_lexer.go	/^	GolangLexerElse                 = 12$/;"	c	package:parser
parser.GolangLexerEquals_	parser/golang_lexer.go	/^	GolangLexerEquals_              = 28$/;"	c	package:parser
parser.GolangLexerFLOAT_LIT	parser/golang_lexer.go	/^	GolangLexerFLOAT_LIT            = 65$/;"	c	package:parser
parser.GolangLexerFallthrough	parser/golang_lexer.go	/^	GolangLexerFallthrough          = 17$/;"	c	package:parser
parser.GolangLexerFor	parser/golang_lexer.go	/^	GolangLexerFor                  = 22$/;"	c	package:parser
parser.GolangLexerFunc	parser/golang_lexer.go	/^	GolangLexerFunc                 = 3$/;"	c	package:parser
parser.GolangLexerGo	parser/golang_lexer.go	/^	GolangLexerGo                   = 8$/;"	c	package:parser
parser.GolangLexerGoto	parser/golang_lexer.go	/^	GolangLexerGoto                 = 13$/;"	c	package:parser
parser.GolangLexerGreaterThan	parser/golang_lexer.go	/^	GolangLexerGreaterThan          = 32$/;"	c	package:parser
parser.GolangLexerGreaterThanEquals	parser/golang_lexer.go	/^	GolangLexerGreaterThanEquals    = 33$/;"	c	package:parser
parser.GolangLexerIDENTIFIER	parser/golang_lexer.go	/^	GolangLexerIDENTIFIER           = 62$/;"	c	package:parser
parser.GolangLexerIMAGINARY_LIT	parser/golang_lexer.go	/^	GolangLexerIMAGINARY_LIT        = 66$/;"	c	package:parser
parser.GolangLexerINT_LIT	parser/golang_lexer.go	/^	GolangLexerINT_LIT              = 64$/;"	c	package:parser
parser.GolangLexerIf	parser/golang_lexer.go	/^	GolangLexerIf                   = 18$/;"	c	package:parser
parser.GolangLexerImport	parser/golang_lexer.go	/^	GolangLexerImport               = 23$/;"	c	package:parser
parser.GolangLexerInterface	parser/golang_lexer.go	/^	GolangLexerInterface            = 4$/;"	c	package:parser
parser.GolangLexerLINE_COMMENT	parser/golang_lexer.go	/^	GolangLexerLINE_COMMENT         = 74$/;"	c	package:parser
parser.GolangLexerLITTLE_U_VALUE	parser/golang_lexer.go	/^	GolangLexerLITTLE_U_VALUE       = 68$/;"	c	package:parser
parser.GolangLexerLeftShiftArithmetic	parser/golang_lexer.go	/^	GolangLexerLeftShiftArithmetic  = 41$/;"	c	package:parser
parser.GolangLexerLessThan	parser/golang_lexer.go	/^	GolangLexerLessThan             = 30$/;"	c	package:parser
parser.GolangLexerLessThanEquals	parser/golang_lexer.go	/^	GolangLexerLessThanEquals       = 31$/;"	c	package:parser
parser.GolangLexerMap	parser/golang_lexer.go	/^	GolangLexerMap                  = 9$/;"	c	package:parser
parser.GolangLexerMinus	parser/golang_lexer.go	/^	GolangLexerMinus                = 35$/;"	c	package:parser
parser.GolangLexerMinusMinus	parser/golang_lexer.go	/^	GolangLexerMinusMinus           = 61$/;"	c	package:parser
parser.GolangLexerModulus	parser/golang_lexer.go	/^	GolangLexerModulus              = 40$/;"	c	package:parser
parser.GolangLexerMultiply	parser/golang_lexer.go	/^	GolangLexerMultiply             = 38$/;"	c	package:parser
parser.GolangLexerNot	parser/golang_lexer.go	/^	GolangLexerNot                  = 45$/;"	c	package:parser
parser.GolangLexerNotEquals	parser/golang_lexer.go	/^	GolangLexerNotEquals            = 29$/;"	c	package:parser
parser.GolangLexerOpenBrace	parser/golang_lexer.go	/^	GolangLexerOpenBrace            = 49$/;"	c	package:parser
parser.GolangLexerOpenBracket	parser/golang_lexer.go	/^	GolangLexerOpenBracket          = 51$/;"	c	package:parser
parser.GolangLexerOpenParen	parser/golang_lexer.go	/^	GolangLexerOpenParen            = 47$/;"	c	package:parser
parser.GolangLexerOr	parser/golang_lexer.go	/^	GolangLexerOr                   = 26$/;"	c	package:parser
parser.GolangLexerPackage	parser/golang_lexer.go	/^	GolangLexerPackage              = 14$/;"	c	package:parser
parser.GolangLexerPlus	parser/golang_lexer.go	/^	GolangLexerPlus                 = 34$/;"	c	package:parser
parser.GolangLexerPlusPlus	parser/golang_lexer.go	/^	GolangLexerPlusPlus             = 60$/;"	c	package:parser
parser.GolangLexerRUNE_LIT	parser/golang_lexer.go	/^	GolangLexerRUNE_LIT             = 67$/;"	c	package:parser
parser.GolangLexerRange	parser/golang_lexer.go	/^	GolangLexerRange                = 19$/;"	c	package:parser
parser.GolangLexerReturn	parser/golang_lexer.go	/^	GolangLexerReturn               = 24$/;"	c	package:parser
parser.GolangLexerRightShiftArithmetic	parser/golang_lexer.go	/^	GolangLexerRightShiftArithmetic = 42$/;"	c	package:parser
parser.GolangLexerSTRING_LIT	parser/golang_lexer.go	/^	GolangLexerSTRING_LIT           = 70$/;"	c	package:parser
parser.GolangLexerSelect	parser/golang_lexer.go	/^	GolangLexerSelect               = 5$/;"	c	package:parser
parser.GolangLexerSemiColon	parser/golang_lexer.go	/^	GolangLexerSemiColon            = 54$/;"	c	package:parser
parser.GolangLexerStruct	parser/golang_lexer.go	/^	GolangLexerStruct               = 10$/;"	c	package:parser
parser.GolangLexerSwitch	parser/golang_lexer.go	/^	GolangLexerSwitch               = 15$/;"	c	package:parser
parser.GolangLexerTERMINATOR	parser/golang_lexer.go	/^	GolangLexerTERMINATOR           = 73$/;"	c	package:parser
parser.GolangLexerType	parser/golang_lexer.go	/^	GolangLexerType                 = 20$/;"	c	package:parser
parser.GolangLexerVar	parser/golang_lexer.go	/^	GolangLexerVar                  = 25$/;"	c	package:parser
parser.GolangLexerWS	parser/golang_lexer.go	/^	GolangLexerWS                   = 71$/;"	c	package:parser
parser.GolangParser	parser/golang_parser.go	/^type GolangParser struct {$/;"	s	package:parser
parser.GolangParser.AnonymousField	parser/golang_parser.go	/^func (p *GolangParser) AnonymousField() (localctx IAnonymousFieldContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IAnonymousFieldContext)	signature:()
parser.GolangParser.Arguments	parser/golang_parser.go	/^func (p *GolangParser) Arguments() (localctx IArgumentsContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IArgumentsContext)	signature:()
parser.GolangParser.ArrayLength	parser/golang_parser.go	/^func (p *GolangParser) ArrayLength() (localctx IArrayLengthContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IArrayLengthContext)	signature:()
parser.GolangParser.ArrayType	parser/golang_parser.go	/^func (p *GolangParser) ArrayType() (localctx IArrayTypeContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IArrayTypeContext)	signature:()
parser.GolangParser.Assign_op	parser/golang_parser.go	/^func (p *GolangParser) Assign_op() (localctx IAssign_opContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IAssign_opContext)	signature:()
parser.GolangParser.Assignment	parser/golang_parser.go	/^func (p *GolangParser) Assignment() (localctx IAssignmentContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IAssignmentContext)	signature:()
parser.GolangParser.BasicLit	parser/golang_parser.go	/^func (p *GolangParser) BasicLit() (localctx IBasicLitContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IBasicLitContext)	signature:()
parser.GolangParser.Block	parser/golang_parser.go	/^func (p *GolangParser) Block() (localctx IBlockContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IBlockContext)	signature:()
parser.GolangParser.BreakStmt	parser/golang_parser.go	/^func (p *GolangParser) BreakStmt() (localctx IBreakStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IBreakStmtContext)	signature:()
parser.GolangParser.ChannelType	parser/golang_parser.go	/^func (p *GolangParser) ChannelType() (localctx IChannelTypeContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IChannelTypeContext)	signature:()
parser.GolangParser.CommCase	parser/golang_parser.go	/^func (p *GolangParser) CommCase() (localctx ICommCaseContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ICommCaseContext)	signature:()
parser.GolangParser.CommClause	parser/golang_parser.go	/^func (p *GolangParser) CommClause() (localctx ICommClauseContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ICommClauseContext)	signature:()
parser.GolangParser.CompositeLit	parser/golang_parser.go	/^func (p *GolangParser) CompositeLit() (localctx ICompositeLitContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ICompositeLitContext)	signature:()
parser.GolangParser.ConstDecl	parser/golang_parser.go	/^func (p *GolangParser) ConstDecl() (localctx IConstDeclContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IConstDeclContext)	signature:()
parser.GolangParser.ConstSpec	parser/golang_parser.go	/^func (p *GolangParser) ConstSpec() (localctx IConstSpecContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IConstSpecContext)	signature:()
parser.GolangParser.ContinueStmt	parser/golang_parser.go	/^func (p *GolangParser) ContinueStmt() (localctx IContinueStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IContinueStmtContext)	signature:()
parser.GolangParser.Conversion	parser/golang_parser.go	/^func (p *GolangParser) Conversion() (localctx IConversionContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IConversionContext)	signature:()
parser.GolangParser.Declaration	parser/golang_parser.go	/^func (p *GolangParser) Declaration() (localctx IDeclarationContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IDeclarationContext)	signature:()
parser.GolangParser.DeferStmt	parser/golang_parser.go	/^func (p *GolangParser) DeferStmt() (localctx IDeferStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IDeferStmtContext)	signature:()
parser.GolangParser.Element	parser/golang_parser.go	/^func (p *GolangParser) Element() (localctx IElementContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IElementContext)	signature:()
parser.GolangParser.ElementList	parser/golang_parser.go	/^func (p *GolangParser) ElementList() (localctx IElementListContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IElementListContext)	signature:()
parser.GolangParser.ElementType	parser/golang_parser.go	/^func (p *GolangParser) ElementType() (localctx IElementTypeContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IElementTypeContext)	signature:()
parser.GolangParser.EmptyStmt	parser/golang_parser.go	/^func (p *GolangParser) EmptyStmt() (localctx IEmptyStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IEmptyStmtContext)	signature:()
parser.GolangParser.Eos	parser/golang_parser.go	/^func (p *GolangParser) Eos() (localctx IEosContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IEosContext)	signature:()
parser.GolangParser.Eos_Sempred	parser/golang_parser.go	/^func (p *GolangParser) Eos_Sempred(localctx antlr.RuleContext, predIndex int) bool {$/;"	f	struct:parser.GolangParser	typeref:typename:bool	signature:(localctx antlr.RuleContext, predIndex int)
parser.GolangParser.ExprCaseClause	parser/golang_parser.go	/^func (p *GolangParser) ExprCaseClause() (localctx IExprCaseClauseContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IExprCaseClauseContext)	signature:()
parser.GolangParser.ExprSwitchCase	parser/golang_parser.go	/^func (p *GolangParser) ExprSwitchCase() (localctx IExprSwitchCaseContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IExprSwitchCaseContext)	signature:()
parser.GolangParser.ExprSwitchStmt	parser/golang_parser.go	/^func (p *GolangParser) ExprSwitchStmt() (localctx IExprSwitchStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IExprSwitchStmtContext)	signature:()
parser.GolangParser.Expression	parser/golang_parser.go	/^func (p *GolangParser) Expression() (localctx IExpressionContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IExpressionContext)	signature:()
parser.GolangParser.ExpressionList	parser/golang_parser.go	/^func (p *GolangParser) ExpressionList() (localctx IExpressionListContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IExpressionListContext)	signature:()
parser.GolangParser.ExpressionStmt	parser/golang_parser.go	/^func (p *GolangParser) ExpressionStmt() (localctx IExpressionStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IExpressionStmtContext)	signature:()
parser.GolangParser.Expression_Sempred	parser/golang_parser.go	/^func (p *GolangParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {$/;"	f	struct:parser.GolangParser	typeref:typename:bool	signature:(localctx antlr.RuleContext, predIndex int)
parser.GolangParser.FallthroughStmt	parser/golang_parser.go	/^func (p *GolangParser) FallthroughStmt() (localctx IFallthroughStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IFallthroughStmtContext)	signature:()
parser.GolangParser.FieldDecl	parser/golang_parser.go	/^func (p *GolangParser) FieldDecl() (localctx IFieldDeclContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IFieldDeclContext)	signature:()
parser.GolangParser.FieldDecl_Sempred	parser/golang_parser.go	/^func (p *GolangParser) FieldDecl_Sempred(localctx antlr.RuleContext, predIndex int) bool {$/;"	f	struct:parser.GolangParser	typeref:typename:bool	signature:(localctx antlr.RuleContext, predIndex int)
parser.GolangParser.ForClause	parser/golang_parser.go	/^func (p *GolangParser) ForClause() (localctx IForClauseContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IForClauseContext)	signature:()
parser.GolangParser.ForStmt	parser/golang_parser.go	/^func (p *GolangParser) ForStmt() (localctx IForStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IForStmtContext)	signature:()
parser.GolangParser.Function	parser/golang_parser.go	/^func (p *GolangParser) Function() (localctx IFunctionContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IFunctionContext)	signature:()
parser.GolangParser.FunctionDecl	parser/golang_parser.go	/^func (p *GolangParser) FunctionDecl() (localctx IFunctionDeclContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IFunctionDeclContext)	signature:()
parser.GolangParser.FunctionLit	parser/golang_parser.go	/^func (p *GolangParser) FunctionLit() (localctx IFunctionLitContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IFunctionLitContext)	signature:()
parser.GolangParser.FunctionType	parser/golang_parser.go	/^func (p *GolangParser) FunctionType() (localctx IFunctionTypeContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IFunctionTypeContext)	signature:()
parser.GolangParser.GoBaseParser	parser/golang_parser.go	/^	GoBaseParser$/;"	M	struct:parser.GolangParser	typeref:typename:GoBaseParser
parser.GolangParser.GoStmt	parser/golang_parser.go	/^func (p *GolangParser) GoStmt() (localctx IGoStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IGoStmtContext)	signature:()
parser.GolangParser.GotoStmt	parser/golang_parser.go	/^func (p *GolangParser) GotoStmt() (localctx IGotoStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IGotoStmtContext)	signature:()
parser.GolangParser.IdentifierList	parser/golang_parser.go	/^func (p *GolangParser) IdentifierList() (localctx IIdentifierListContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IIdentifierListContext)	signature:()
parser.GolangParser.IfStmt	parser/golang_parser.go	/^func (p *GolangParser) IfStmt() (localctx IIfStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IIfStmtContext)	signature:()
parser.GolangParser.ImportDecl	parser/golang_parser.go	/^func (p *GolangParser) ImportDecl() (localctx IImportDeclContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IImportDeclContext)	signature:()
parser.GolangParser.ImportPath	parser/golang_parser.go	/^func (p *GolangParser) ImportPath() (localctx IImportPathContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IImportPathContext)	signature:()
parser.GolangParser.ImportSpec	parser/golang_parser.go	/^func (p *GolangParser) ImportSpec() (localctx IImportSpecContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IImportSpecContext)	signature:()
parser.GolangParser.IncDecStmt	parser/golang_parser.go	/^func (p *GolangParser) IncDecStmt() (localctx IIncDecStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IIncDecStmtContext)	signature:()
parser.GolangParser.Index	parser/golang_parser.go	/^func (p *GolangParser) Index() (localctx IIndexContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IIndexContext)	signature:()
parser.GolangParser.InterfaceType	parser/golang_parser.go	/^func (p *GolangParser) InterfaceType() (localctx IInterfaceTypeContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IInterfaceTypeContext)	signature:()
parser.GolangParser.Key	parser/golang_parser.go	/^func (p *GolangParser) Key() (localctx IKeyContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IKeyContext)	signature:()
parser.GolangParser.KeyedElement	parser/golang_parser.go	/^func (p *GolangParser) KeyedElement() (localctx IKeyedElementContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IKeyedElementContext)	signature:()
parser.GolangParser.LabeledStmt	parser/golang_parser.go	/^func (p *GolangParser) LabeledStmt() (localctx ILabeledStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ILabeledStmtContext)	signature:()
parser.GolangParser.Literal	parser/golang_parser.go	/^func (p *GolangParser) Literal() (localctx ILiteralContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ILiteralContext)	signature:()
parser.GolangParser.LiteralType	parser/golang_parser.go	/^func (p *GolangParser) LiteralType() (localctx ILiteralTypeContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ILiteralTypeContext)	signature:()
parser.GolangParser.LiteralValue	parser/golang_parser.go	/^func (p *GolangParser) LiteralValue() (localctx ILiteralValueContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ILiteralValueContext)	signature:()
parser.GolangParser.MapType	parser/golang_parser.go	/^func (p *GolangParser) MapType() (localctx IMapTypeContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IMapTypeContext)	signature:()
parser.GolangParser.MethodDecl	parser/golang_parser.go	/^func (p *GolangParser) MethodDecl() (localctx IMethodDeclContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IMethodDeclContext)	signature:()
parser.GolangParser.MethodExpr	parser/golang_parser.go	/^func (p *GolangParser) MethodExpr() (localctx IMethodExprContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IMethodExprContext)	signature:()
parser.GolangParser.MethodSpec	parser/golang_parser.go	/^func (p *GolangParser) MethodSpec() (localctx IMethodSpecContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IMethodSpecContext)	signature:()
parser.GolangParser.MethodSpec_Sempred	parser/golang_parser.go	/^func (p *GolangParser) MethodSpec_Sempred(localctx antlr.RuleContext, predIndex int) bool {$/;"	f	struct:parser.GolangParser	typeref:typename:bool	signature:(localctx antlr.RuleContext, predIndex int)
parser.GolangParser.Operand	parser/golang_parser.go	/^func (p *GolangParser) Operand() (localctx IOperandContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IOperandContext)	signature:()
parser.GolangParser.OperandName	parser/golang_parser.go	/^func (p *GolangParser) OperandName() (localctx IOperandNameContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IOperandNameContext)	signature:()
parser.GolangParser.PackageClause	parser/golang_parser.go	/^func (p *GolangParser) PackageClause() (localctx IPackageClauseContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IPackageClauseContext)	signature:()
parser.GolangParser.ParameterDecl	parser/golang_parser.go	/^func (p *GolangParser) ParameterDecl() (localctx IParameterDeclContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IParameterDeclContext)	signature:()
parser.GolangParser.ParameterList	parser/golang_parser.go	/^func (p *GolangParser) ParameterList() (localctx IParameterListContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IParameterListContext)	signature:()
parser.GolangParser.Parameters	parser/golang_parser.go	/^func (p *GolangParser) Parameters() (localctx IParametersContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IParametersContext)	signature:()
parser.GolangParser.PointerType	parser/golang_parser.go	/^func (p *GolangParser) PointerType() (localctx IPointerTypeContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IPointerTypeContext)	signature:()
parser.GolangParser.PrimaryExpr	parser/golang_parser.go	/^func (p *GolangParser) PrimaryExpr() (localctx IPrimaryExprContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IPrimaryExprContext)	signature:()
parser.GolangParser.PrimaryExpr_Sempred	parser/golang_parser.go	/^func (p *GolangParser) PrimaryExpr_Sempred(localctx antlr.RuleContext, predIndex int) bool {$/;"	f	struct:parser.GolangParser	typeref:typename:bool	signature:(localctx antlr.RuleContext, predIndex int)
parser.GolangParser.QualifiedIdent	parser/golang_parser.go	/^func (p *GolangParser) QualifiedIdent() (localctx IQualifiedIdentContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IQualifiedIdentContext)	signature:()
parser.GolangParser.RangeClause	parser/golang_parser.go	/^func (p *GolangParser) RangeClause() (localctx IRangeClauseContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IRangeClauseContext)	signature:()
parser.GolangParser.Receiver	parser/golang_parser.go	/^func (p *GolangParser) Receiver() (localctx IReceiverContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IReceiverContext)	signature:()
parser.GolangParser.ReceiverType	parser/golang_parser.go	/^func (p *GolangParser) ReceiverType() (localctx IReceiverTypeContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IReceiverTypeContext)	signature:()
parser.GolangParser.RecvStmt	parser/golang_parser.go	/^func (p *GolangParser) RecvStmt() (localctx IRecvStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IRecvStmtContext)	signature:()
parser.GolangParser.Result	parser/golang_parser.go	/^func (p *GolangParser) Result() (localctx IResultContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IResultContext)	signature:()
parser.GolangParser.ReturnStmt	parser/golang_parser.go	/^func (p *GolangParser) ReturnStmt() (localctx IReturnStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IReturnStmtContext)	signature:()
parser.GolangParser.SelectStmt	parser/golang_parser.go	/^func (p *GolangParser) SelectStmt() (localctx ISelectStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ISelectStmtContext)	signature:()
parser.GolangParser.Selector	parser/golang_parser.go	/^func (p *GolangParser) Selector() (localctx ISelectorContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ISelectorContext)	signature:()
parser.GolangParser.Sempred	parser/golang_parser.go	/^func (p *GolangParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {$/;"	f	struct:parser.GolangParser	typeref:typename:bool	signature:(localctx antlr.RuleContext, ruleIndex, predIndex int)
parser.GolangParser.SendStmt	parser/golang_parser.go	/^func (p *GolangParser) SendStmt() (localctx ISendStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ISendStmtContext)	signature:()
parser.GolangParser.ShortVarDecl	parser/golang_parser.go	/^func (p *GolangParser) ShortVarDecl() (localctx IShortVarDeclContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IShortVarDeclContext)	signature:()
parser.GolangParser.Signature	parser/golang_parser.go	/^func (p *GolangParser) Signature() (localctx ISignatureContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ISignatureContext)	signature:()
parser.GolangParser.Signature_Sempred	parser/golang_parser.go	/^func (p *GolangParser) Signature_Sempred(localctx antlr.RuleContext, predIndex int) bool {$/;"	f	struct:parser.GolangParser	typeref:typename:bool	signature:(localctx antlr.RuleContext, predIndex int)
parser.GolangParser.SimpleStmt	parser/golang_parser.go	/^func (p *GolangParser) SimpleStmt() (localctx ISimpleStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ISimpleStmtContext)	signature:()
parser.GolangParser.Slice	parser/golang_parser.go	/^func (p *GolangParser) Slice() (localctx ISliceContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ISliceContext)	signature:()
parser.GolangParser.SliceType	parser/golang_parser.go	/^func (p *GolangParser) SliceType() (localctx ISliceTypeContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ISliceTypeContext)	signature:()
parser.GolangParser.SourceFile	parser/golang_parser.go	/^func (p *GolangParser) SourceFile() (localctx ISourceFileContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ISourceFileContext)	signature:()
parser.GolangParser.Statement	parser/golang_parser.go	/^func (p *GolangParser) Statement() (localctx IStatementContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IStatementContext)	signature:()
parser.GolangParser.StatementList	parser/golang_parser.go	/^func (p *GolangParser) StatementList() (localctx IStatementListContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IStatementListContext)	signature:()
parser.GolangParser.StructType	parser/golang_parser.go	/^func (p *GolangParser) StructType() (localctx IStructTypeContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IStructTypeContext)	signature:()
parser.GolangParser.SwitchStmt	parser/golang_parser.go	/^func (p *GolangParser) SwitchStmt() (localctx ISwitchStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ISwitchStmtContext)	signature:()
parser.GolangParser.TopLevelDecl	parser/golang_parser.go	/^func (p *GolangParser) TopLevelDecl() (localctx ITopLevelDeclContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ITopLevelDeclContext)	signature:()
parser.GolangParser.TypeAssertion	parser/golang_parser.go	/^func (p *GolangParser) TypeAssertion() (localctx ITypeAssertionContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ITypeAssertionContext)	signature:()
parser.GolangParser.TypeCaseClause	parser/golang_parser.go	/^func (p *GolangParser) TypeCaseClause() (localctx ITypeCaseClauseContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ITypeCaseClauseContext)	signature:()
parser.GolangParser.TypeDecl	parser/golang_parser.go	/^func (p *GolangParser) TypeDecl() (localctx ITypeDeclContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ITypeDeclContext)	signature:()
parser.GolangParser.TypeList	parser/golang_parser.go	/^func (p *GolangParser) TypeList() (localctx ITypeListContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ITypeListContext)	signature:()
parser.GolangParser.TypeLit	parser/golang_parser.go	/^func (p *GolangParser) TypeLit() (localctx ITypeLitContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ITypeLitContext)	signature:()
parser.GolangParser.TypeName	parser/golang_parser.go	/^func (p *GolangParser) TypeName() (localctx ITypeNameContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ITypeNameContext)	signature:()
parser.GolangParser.TypeSpec	parser/golang_parser.go	/^func (p *GolangParser) TypeSpec() (localctx ITypeSpecContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ITypeSpecContext)	signature:()
parser.GolangParser.TypeSwitchCase	parser/golang_parser.go	/^func (p *GolangParser) TypeSwitchCase() (localctx ITypeSwitchCaseContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ITypeSwitchCaseContext)	signature:()
parser.GolangParser.TypeSwitchGuard	parser/golang_parser.go	/^func (p *GolangParser) TypeSwitchGuard() (localctx ITypeSwitchGuardContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ITypeSwitchGuardContext)	signature:()
parser.GolangParser.TypeSwitchStmt	parser/golang_parser.go	/^func (p *GolangParser) TypeSwitchStmt() (localctx ITypeSwitchStmtContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx ITypeSwitchStmtContext)	signature:()
parser.GolangParser.Type_	parser/golang_parser.go	/^func (p *GolangParser) Type_() (localctx IType_Context) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IType_Context)	signature:()
parser.GolangParser.UnaryExpr	parser/golang_parser.go	/^func (p *GolangParser) UnaryExpr() (localctx IUnaryExprContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IUnaryExprContext)	signature:()
parser.GolangParser.VarDecl	parser/golang_parser.go	/^func (p *GolangParser) VarDecl() (localctx IVarDeclContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IVarDeclContext)	signature:()
parser.GolangParser.VarSpec	parser/golang_parser.go	/^func (p *GolangParser) VarSpec() (localctx IVarSpecContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IVarSpecContext)	signature:()
parser.GolangParser.expression	parser/golang_parser.go	/^func (p *GolangParser) expression(_p int) (localctx IExpressionContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IExpressionContext)	signature:(_p int)
parser.GolangParser.primaryExpr	parser/golang_parser.go	/^func (p *GolangParser) primaryExpr(_p int) (localctx IPrimaryExprContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IPrimaryExprContext)	signature:(_p int)
parser.GolangParserAnd	parser/golang_parser.go	/^	GolangParserAnd                  = 27$/;"	c	package:parser
parser.GolangParserAssign	parser/golang_parser.go	/^	GolangParserAssign               = 56$/;"	c	package:parser
parser.GolangParserBIG_U_VALUE	parser/golang_parser.go	/^	GolangParserBIG_U_VALUE          = 69$/;"	c	package:parser
parser.GolangParserBINARY_OP	parser/golang_parser.go	/^	GolangParserBINARY_OP            = 63$/;"	c	package:parser
parser.GolangParserBitAnd	parser/golang_parser.go	/^	GolangParserBitAnd               = 43$/;"	c	package:parser
parser.GolangParserBitClear	parser/golang_parser.go	/^	GolangParserBitClear             = 44$/;"	c	package:parser
parser.GolangParserBitOr	parser/golang_parser.go	/^	GolangParserBitOr                = 36$/;"	c	package:parser
parser.GolangParserBitXor	parser/golang_parser.go	/^	GolangParserBitXor               = 37$/;"	c	package:parser
parser.GolangParserBreak	parser/golang_parser.go	/^	GolangParserBreak                = 1$/;"	c	package:parser
parser.GolangParserCOMMENT	parser/golang_parser.go	/^	GolangParserCOMMENT              = 72$/;"	c	package:parser
parser.GolangParserCase	parser/golang_parser.go	/^	GolangParserCase                 = 6$/;"	c	package:parser
parser.GolangParserChan	parser/golang_parser.go	/^	GolangParserChan                 = 11$/;"	c	package:parser
parser.GolangParserChanOp	parser/golang_parser.go	/^	GolangParserChanOp               = 46$/;"	c	package:parser
parser.GolangParserCloseBrace	parser/golang_parser.go	/^	GolangParserCloseBrace           = 50$/;"	c	package:parser
parser.GolangParserCloseBracket	parser/golang_parser.go	/^	GolangParserCloseBracket         = 52$/;"	c	package:parser
parser.GolangParserCloseParen	parser/golang_parser.go	/^	GolangParserCloseParen           = 48$/;"	c	package:parser
parser.GolangParserColon	parser/golang_parser.go	/^	GolangParserColon                = 53$/;"	c	package:parser
parser.GolangParserComma	parser/golang_parser.go	/^	GolangParserComma                = 55$/;"	c	package:parser
parser.GolangParserConst	parser/golang_parser.go	/^	GolangParserConst                = 16$/;"	c	package:parser
parser.GolangParserContinue	parser/golang_parser.go	/^	GolangParserContinue             = 21$/;"	c	package:parser
parser.GolangParserDeclareAndAssign	parser/golang_parser.go	/^	GolangParserDeclareAndAssign     = 57$/;"	c	package:parser
parser.GolangParserDefault	parser/golang_parser.go	/^	GolangParserDefault              = 2$/;"	c	package:parser
parser.GolangParserDefer	parser/golang_parser.go	/^	GolangParserDefer                = 7$/;"	c	package:parser
parser.GolangParserDivide	parser/golang_parser.go	/^	GolangParserDivide               = 39$/;"	c	package:parser
parser.GolangParserDot	parser/golang_parser.go	/^	GolangParserDot                  = 58$/;"	c	package:parser
parser.GolangParserEOF	parser/golang_parser.go	/^	GolangParserEOF                  = antlr.TokenEOF$/;"	c	package:parser
parser.GolangParserEllipsis	parser/golang_parser.go	/^	GolangParserEllipsis             = 59$/;"	c	package:parser
parser.GolangParserElse	parser/golang_parser.go	/^	GolangParserElse                 = 12$/;"	c	package:parser
parser.GolangParserEquals_	parser/golang_parser.go	/^	GolangParserEquals_              = 28$/;"	c	package:parser
parser.GolangParserFLOAT_LIT	parser/golang_parser.go	/^	GolangParserFLOAT_LIT            = 65$/;"	c	package:parser
parser.GolangParserFallthrough	parser/golang_parser.go	/^	GolangParserFallthrough          = 17$/;"	c	package:parser
parser.GolangParserFor	parser/golang_parser.go	/^	GolangParserFor                  = 22$/;"	c	package:parser
parser.GolangParserFunc	parser/golang_parser.go	/^	GolangParserFunc                 = 3$/;"	c	package:parser
parser.GolangParserGo	parser/golang_parser.go	/^	GolangParserGo                   = 8$/;"	c	package:parser
parser.GolangParserGoto	parser/golang_parser.go	/^	GolangParserGoto                 = 13$/;"	c	package:parser
parser.GolangParserGreaterThan	parser/golang_parser.go	/^	GolangParserGreaterThan          = 32$/;"	c	package:parser
parser.GolangParserGreaterThanEquals	parser/golang_parser.go	/^	GolangParserGreaterThanEquals    = 33$/;"	c	package:parser
parser.GolangParserIDENTIFIER	parser/golang_parser.go	/^	GolangParserIDENTIFIER           = 62$/;"	c	package:parser
parser.GolangParserIMAGINARY_LIT	parser/golang_parser.go	/^	GolangParserIMAGINARY_LIT        = 66$/;"	c	package:parser
parser.GolangParserINT_LIT	parser/golang_parser.go	/^	GolangParserINT_LIT              = 64$/;"	c	package:parser
parser.GolangParserIf	parser/golang_parser.go	/^	GolangParserIf                   = 18$/;"	c	package:parser
parser.GolangParserImport	parser/golang_parser.go	/^	GolangParserImport               = 23$/;"	c	package:parser
parser.GolangParserInterface	parser/golang_parser.go	/^	GolangParserInterface            = 4$/;"	c	package:parser
parser.GolangParserLINE_COMMENT	parser/golang_parser.go	/^	GolangParserLINE_COMMENT         = 74$/;"	c	package:parser
parser.GolangParserLITTLE_U_VALUE	parser/golang_parser.go	/^	GolangParserLITTLE_U_VALUE       = 68$/;"	c	package:parser
parser.GolangParserLeftShiftArithmetic	parser/golang_parser.go	/^	GolangParserLeftShiftArithmetic  = 41$/;"	c	package:parser
parser.GolangParserLessThan	parser/golang_parser.go	/^	GolangParserLessThan             = 30$/;"	c	package:parser
parser.GolangParserLessThanEquals	parser/golang_parser.go	/^	GolangParserLessThanEquals       = 31$/;"	c	package:parser
parser.GolangParserListener	parser/golangparser_listener.go	/^type GolangParserListener interface {$/;"	i	package:parser	inherits:antlr.ParseTreeListener
parser.GolangParserListener.EnterAnonymousField	parser/golangparser_listener.go	/^	EnterAnonymousField(c *AnonymousFieldContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *AnonymousFieldContext)
parser.GolangParserListener.EnterArguments	parser/golangparser_listener.go	/^	EnterArguments(c *ArgumentsContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ArgumentsContext)
parser.GolangParserListener.EnterArrayLength	parser/golangparser_listener.go	/^	EnterArrayLength(c *ArrayLengthContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ArrayLengthContext)
parser.GolangParserListener.EnterArrayType	parser/golangparser_listener.go	/^	EnterArrayType(c *ArrayTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ArrayTypeContext)
parser.GolangParserListener.EnterAssign_op	parser/golangparser_listener.go	/^	EnterAssign_op(c *Assign_opContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *Assign_opContext)
parser.GolangParserListener.EnterAssignment	parser/golangparser_listener.go	/^	EnterAssignment(c *AssignmentContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *AssignmentContext)
parser.GolangParserListener.EnterBasicLit	parser/golangparser_listener.go	/^	EnterBasicLit(c *BasicLitContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *BasicLitContext)
parser.GolangParserListener.EnterBlock	parser/golangparser_listener.go	/^	EnterBlock(c *BlockContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *BlockContext)
parser.GolangParserListener.EnterBreakStmt	parser/golangparser_listener.go	/^	EnterBreakStmt(c *BreakStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *BreakStmtContext)
parser.GolangParserListener.EnterChannelType	parser/golangparser_listener.go	/^	EnterChannelType(c *ChannelTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ChannelTypeContext)
parser.GolangParserListener.EnterCommCase	parser/golangparser_listener.go	/^	EnterCommCase(c *CommCaseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *CommCaseContext)
parser.GolangParserListener.EnterCommClause	parser/golangparser_listener.go	/^	EnterCommClause(c *CommClauseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *CommClauseContext)
parser.GolangParserListener.EnterCompositeLit	parser/golangparser_listener.go	/^	EnterCompositeLit(c *CompositeLitContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *CompositeLitContext)
parser.GolangParserListener.EnterConstDecl	parser/golangparser_listener.go	/^	EnterConstDecl(c *ConstDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ConstDeclContext)
parser.GolangParserListener.EnterConstSpec	parser/golangparser_listener.go	/^	EnterConstSpec(c *ConstSpecContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ConstSpecContext)
parser.GolangParserListener.EnterContinueStmt	parser/golangparser_listener.go	/^	EnterContinueStmt(c *ContinueStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ContinueStmtContext)
parser.GolangParserListener.EnterConversion	parser/golangparser_listener.go	/^	EnterConversion(c *ConversionContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ConversionContext)
parser.GolangParserListener.EnterDeclaration	parser/golangparser_listener.go	/^	EnterDeclaration(c *DeclarationContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *DeclarationContext)
parser.GolangParserListener.EnterDeferStmt	parser/golangparser_listener.go	/^	EnterDeferStmt(c *DeferStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *DeferStmtContext)
parser.GolangParserListener.EnterElement	parser/golangparser_listener.go	/^	EnterElement(c *ElementContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ElementContext)
parser.GolangParserListener.EnterElementList	parser/golangparser_listener.go	/^	EnterElementList(c *ElementListContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ElementListContext)
parser.GolangParserListener.EnterElementType	parser/golangparser_listener.go	/^	EnterElementType(c *ElementTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ElementTypeContext)
parser.GolangParserListener.EnterEmptyStmt	parser/golangparser_listener.go	/^	EnterEmptyStmt(c *EmptyStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *EmptyStmtContext)
parser.GolangParserListener.EnterEos	parser/golangparser_listener.go	/^	EnterEos(c *EosContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *EosContext)
parser.GolangParserListener.EnterExprCaseClause	parser/golangparser_listener.go	/^	EnterExprCaseClause(c *ExprCaseClauseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ExprCaseClauseContext)
parser.GolangParserListener.EnterExprSwitchCase	parser/golangparser_listener.go	/^	EnterExprSwitchCase(c *ExprSwitchCaseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ExprSwitchCaseContext)
parser.GolangParserListener.EnterExprSwitchStmt	parser/golangparser_listener.go	/^	EnterExprSwitchStmt(c *ExprSwitchStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ExprSwitchStmtContext)
parser.GolangParserListener.EnterExpression	parser/golangparser_listener.go	/^	EnterExpression(c *ExpressionContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ExpressionContext)
parser.GolangParserListener.EnterExpressionList	parser/golangparser_listener.go	/^	EnterExpressionList(c *ExpressionListContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ExpressionListContext)
parser.GolangParserListener.EnterExpressionStmt	parser/golangparser_listener.go	/^	EnterExpressionStmt(c *ExpressionStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ExpressionStmtContext)
parser.GolangParserListener.EnterFallthroughStmt	parser/golangparser_listener.go	/^	EnterFallthroughStmt(c *FallthroughStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *FallthroughStmtContext)
parser.GolangParserListener.EnterFieldDecl	parser/golangparser_listener.go	/^	EnterFieldDecl(c *FieldDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *FieldDeclContext)
parser.GolangParserListener.EnterForClause	parser/golangparser_listener.go	/^	EnterForClause(c *ForClauseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ForClauseContext)
parser.GolangParserListener.EnterForStmt	parser/golangparser_listener.go	/^	EnterForStmt(c *ForStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ForStmtContext)
parser.GolangParserListener.EnterFunction	parser/golangparser_listener.go	/^	EnterFunction(c *FunctionContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *FunctionContext)
parser.GolangParserListener.EnterFunctionDecl	parser/golangparser_listener.go	/^	EnterFunctionDecl(c *FunctionDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *FunctionDeclContext)
parser.GolangParserListener.EnterFunctionLit	parser/golangparser_listener.go	/^	EnterFunctionLit(c *FunctionLitContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *FunctionLitContext)
parser.GolangParserListener.EnterFunctionType	parser/golangparser_listener.go	/^	EnterFunctionType(c *FunctionTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *FunctionTypeContext)
parser.GolangParserListener.EnterGoStmt	parser/golangparser_listener.go	/^	EnterGoStmt(c *GoStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *GoStmtContext)
parser.GolangParserListener.EnterGotoStmt	parser/golangparser_listener.go	/^	EnterGotoStmt(c *GotoStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *GotoStmtContext)
parser.GolangParserListener.EnterIdentifierList	parser/golangparser_listener.go	/^	EnterIdentifierList(c *IdentifierListContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *IdentifierListContext)
parser.GolangParserListener.EnterIfStmt	parser/golangparser_listener.go	/^	EnterIfStmt(c *IfStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *IfStmtContext)
parser.GolangParserListener.EnterImportDecl	parser/golangparser_listener.go	/^	EnterImportDecl(c *ImportDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ImportDeclContext)
parser.GolangParserListener.EnterImportPath	parser/golangparser_listener.go	/^	EnterImportPath(c *ImportPathContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ImportPathContext)
parser.GolangParserListener.EnterImportSpec	parser/golangparser_listener.go	/^	EnterImportSpec(c *ImportSpecContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ImportSpecContext)
parser.GolangParserListener.EnterIncDecStmt	parser/golangparser_listener.go	/^	EnterIncDecStmt(c *IncDecStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *IncDecStmtContext)
parser.GolangParserListener.EnterIndex	parser/golangparser_listener.go	/^	EnterIndex(c *IndexContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *IndexContext)
parser.GolangParserListener.EnterInterfaceType	parser/golangparser_listener.go	/^	EnterInterfaceType(c *InterfaceTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *InterfaceTypeContext)
parser.GolangParserListener.EnterKey	parser/golangparser_listener.go	/^	EnterKey(c *KeyContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *KeyContext)
parser.GolangParserListener.EnterKeyedElement	parser/golangparser_listener.go	/^	EnterKeyedElement(c *KeyedElementContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *KeyedElementContext)
parser.GolangParserListener.EnterLabeledStmt	parser/golangparser_listener.go	/^	EnterLabeledStmt(c *LabeledStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *LabeledStmtContext)
parser.GolangParserListener.EnterLiteral	parser/golangparser_listener.go	/^	EnterLiteral(c *LiteralContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *LiteralContext)
parser.GolangParserListener.EnterLiteralType	parser/golangparser_listener.go	/^	EnterLiteralType(c *LiteralTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *LiteralTypeContext)
parser.GolangParserListener.EnterLiteralValue	parser/golangparser_listener.go	/^	EnterLiteralValue(c *LiteralValueContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *LiteralValueContext)
parser.GolangParserListener.EnterMapType	parser/golangparser_listener.go	/^	EnterMapType(c *MapTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *MapTypeContext)
parser.GolangParserListener.EnterMethodDecl	parser/golangparser_listener.go	/^	EnterMethodDecl(c *MethodDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *MethodDeclContext)
parser.GolangParserListener.EnterMethodExpr	parser/golangparser_listener.go	/^	EnterMethodExpr(c *MethodExprContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *MethodExprContext)
parser.GolangParserListener.EnterMethodSpec	parser/golangparser_listener.go	/^	EnterMethodSpec(c *MethodSpecContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *MethodSpecContext)
parser.GolangParserListener.EnterOperand	parser/golangparser_listener.go	/^	EnterOperand(c *OperandContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *OperandContext)
parser.GolangParserListener.EnterOperandName	parser/golangparser_listener.go	/^	EnterOperandName(c *OperandNameContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *OperandNameContext)
parser.GolangParserListener.EnterPackageClause	parser/golangparser_listener.go	/^	EnterPackageClause(c *PackageClauseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *PackageClauseContext)
parser.GolangParserListener.EnterParameterDecl	parser/golangparser_listener.go	/^	EnterParameterDecl(c *ParameterDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ParameterDeclContext)
parser.GolangParserListener.EnterParameterList	parser/golangparser_listener.go	/^	EnterParameterList(c *ParameterListContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ParameterListContext)
parser.GolangParserListener.EnterParameters	parser/golangparser_listener.go	/^	EnterParameters(c *ParametersContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ParametersContext)
parser.GolangParserListener.EnterPointerType	parser/golangparser_listener.go	/^	EnterPointerType(c *PointerTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *PointerTypeContext)
parser.GolangParserListener.EnterPrimaryExpr	parser/golangparser_listener.go	/^	EnterPrimaryExpr(c *PrimaryExprContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *PrimaryExprContext)
parser.GolangParserListener.EnterQualifiedIdent	parser/golangparser_listener.go	/^	EnterQualifiedIdent(c *QualifiedIdentContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *QualifiedIdentContext)
parser.GolangParserListener.EnterRangeClause	parser/golangparser_listener.go	/^	EnterRangeClause(c *RangeClauseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *RangeClauseContext)
parser.GolangParserListener.EnterReceiver	parser/golangparser_listener.go	/^	EnterReceiver(c *ReceiverContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ReceiverContext)
parser.GolangParserListener.EnterReceiverType	parser/golangparser_listener.go	/^	EnterReceiverType(c *ReceiverTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ReceiverTypeContext)
parser.GolangParserListener.EnterRecvStmt	parser/golangparser_listener.go	/^	EnterRecvStmt(c *RecvStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *RecvStmtContext)
parser.GolangParserListener.EnterResult	parser/golangparser_listener.go	/^	EnterResult(c *ResultContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ResultContext)
parser.GolangParserListener.EnterReturnStmt	parser/golangparser_listener.go	/^	EnterReturnStmt(c *ReturnStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ReturnStmtContext)
parser.GolangParserListener.EnterSelectStmt	parser/golangparser_listener.go	/^	EnterSelectStmt(c *SelectStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SelectStmtContext)
parser.GolangParserListener.EnterSelector	parser/golangparser_listener.go	/^	EnterSelector(c *SelectorContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SelectorContext)
parser.GolangParserListener.EnterSendStmt	parser/golangparser_listener.go	/^	EnterSendStmt(c *SendStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SendStmtContext)
parser.GolangParserListener.EnterShortVarDecl	parser/golangparser_listener.go	/^	EnterShortVarDecl(c *ShortVarDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ShortVarDeclContext)
parser.GolangParserListener.EnterSignature	parser/golangparser_listener.go	/^	EnterSignature(c *SignatureContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SignatureContext)
parser.GolangParserListener.EnterSimpleStmt	parser/golangparser_listener.go	/^	EnterSimpleStmt(c *SimpleStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SimpleStmtContext)
parser.GolangParserListener.EnterSlice	parser/golangparser_listener.go	/^	EnterSlice(c *SliceContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SliceContext)
parser.GolangParserListener.EnterSliceType	parser/golangparser_listener.go	/^	EnterSliceType(c *SliceTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SliceTypeContext)
parser.GolangParserListener.EnterSourceFile	parser/golangparser_listener.go	/^	EnterSourceFile(c *SourceFileContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SourceFileContext)
parser.GolangParserListener.EnterStatement	parser/golangparser_listener.go	/^	EnterStatement(c *StatementContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *StatementContext)
parser.GolangParserListener.EnterStatementList	parser/golangparser_listener.go	/^	EnterStatementList(c *StatementListContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *StatementListContext)
parser.GolangParserListener.EnterStructType	parser/golangparser_listener.go	/^	EnterStructType(c *StructTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *StructTypeContext)
parser.GolangParserListener.EnterSwitchStmt	parser/golangparser_listener.go	/^	EnterSwitchStmt(c *SwitchStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SwitchStmtContext)
parser.GolangParserListener.EnterTopLevelDecl	parser/golangparser_listener.go	/^	EnterTopLevelDecl(c *TopLevelDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TopLevelDeclContext)
parser.GolangParserListener.EnterTypeAssertion	parser/golangparser_listener.go	/^	EnterTypeAssertion(c *TypeAssertionContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeAssertionContext)
parser.GolangParserListener.EnterTypeCaseClause	parser/golangparser_listener.go	/^	EnterTypeCaseClause(c *TypeCaseClauseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeCaseClauseContext)
parser.GolangParserListener.EnterTypeDecl	parser/golangparser_listener.go	/^	EnterTypeDecl(c *TypeDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeDeclContext)
parser.GolangParserListener.EnterTypeList	parser/golangparser_listener.go	/^	EnterTypeList(c *TypeListContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeListContext)
parser.GolangParserListener.EnterTypeLit	parser/golangparser_listener.go	/^	EnterTypeLit(c *TypeLitContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeLitContext)
parser.GolangParserListener.EnterTypeName	parser/golangparser_listener.go	/^	EnterTypeName(c *TypeNameContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeNameContext)
parser.GolangParserListener.EnterTypeSpec	parser/golangparser_listener.go	/^	EnterTypeSpec(c *TypeSpecContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeSpecContext)
parser.GolangParserListener.EnterTypeSwitchCase	parser/golangparser_listener.go	/^	EnterTypeSwitchCase(c *TypeSwitchCaseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeSwitchCaseContext)
parser.GolangParserListener.EnterTypeSwitchGuard	parser/golangparser_listener.go	/^	EnterTypeSwitchGuard(c *TypeSwitchGuardContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeSwitchGuardContext)
parser.GolangParserListener.EnterTypeSwitchStmt	parser/golangparser_listener.go	/^	EnterTypeSwitchStmt(c *TypeSwitchStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeSwitchStmtContext)
parser.GolangParserListener.EnterType_	parser/golangparser_listener.go	/^	EnterType_(c *Type_Context)$/;"	n	interface:parser.GolangParserListener	signature:(c *Type_Context)
parser.GolangParserListener.EnterUnaryExpr	parser/golangparser_listener.go	/^	EnterUnaryExpr(c *UnaryExprContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *UnaryExprContext)
parser.GolangParserListener.EnterVarDecl	parser/golangparser_listener.go	/^	EnterVarDecl(c *VarDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *VarDeclContext)
parser.GolangParserListener.EnterVarSpec	parser/golangparser_listener.go	/^	EnterVarSpec(c *VarSpecContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *VarSpecContext)
parser.GolangParserListener.ExitAnonymousField	parser/golangparser_listener.go	/^	ExitAnonymousField(c *AnonymousFieldContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *AnonymousFieldContext)
parser.GolangParserListener.ExitArguments	parser/golangparser_listener.go	/^	ExitArguments(c *ArgumentsContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ArgumentsContext)
parser.GolangParserListener.ExitArrayLength	parser/golangparser_listener.go	/^	ExitArrayLength(c *ArrayLengthContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ArrayLengthContext)
parser.GolangParserListener.ExitArrayType	parser/golangparser_listener.go	/^	ExitArrayType(c *ArrayTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ArrayTypeContext)
parser.GolangParserListener.ExitAssign_op	parser/golangparser_listener.go	/^	ExitAssign_op(c *Assign_opContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *Assign_opContext)
parser.GolangParserListener.ExitAssignment	parser/golangparser_listener.go	/^	ExitAssignment(c *AssignmentContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *AssignmentContext)
parser.GolangParserListener.ExitBasicLit	parser/golangparser_listener.go	/^	ExitBasicLit(c *BasicLitContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *BasicLitContext)
parser.GolangParserListener.ExitBlock	parser/golangparser_listener.go	/^	ExitBlock(c *BlockContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *BlockContext)
parser.GolangParserListener.ExitBreakStmt	parser/golangparser_listener.go	/^	ExitBreakStmt(c *BreakStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *BreakStmtContext)
parser.GolangParserListener.ExitChannelType	parser/golangparser_listener.go	/^	ExitChannelType(c *ChannelTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ChannelTypeContext)
parser.GolangParserListener.ExitCommCase	parser/golangparser_listener.go	/^	ExitCommCase(c *CommCaseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *CommCaseContext)
parser.GolangParserListener.ExitCommClause	parser/golangparser_listener.go	/^	ExitCommClause(c *CommClauseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *CommClauseContext)
parser.GolangParserListener.ExitCompositeLit	parser/golangparser_listener.go	/^	ExitCompositeLit(c *CompositeLitContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *CompositeLitContext)
parser.GolangParserListener.ExitConstDecl	parser/golangparser_listener.go	/^	ExitConstDecl(c *ConstDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ConstDeclContext)
parser.GolangParserListener.ExitConstSpec	parser/golangparser_listener.go	/^	ExitConstSpec(c *ConstSpecContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ConstSpecContext)
parser.GolangParserListener.ExitContinueStmt	parser/golangparser_listener.go	/^	ExitContinueStmt(c *ContinueStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ContinueStmtContext)
parser.GolangParserListener.ExitConversion	parser/golangparser_listener.go	/^	ExitConversion(c *ConversionContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ConversionContext)
parser.GolangParserListener.ExitDeclaration	parser/golangparser_listener.go	/^	ExitDeclaration(c *DeclarationContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *DeclarationContext)
parser.GolangParserListener.ExitDeferStmt	parser/golangparser_listener.go	/^	ExitDeferStmt(c *DeferStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *DeferStmtContext)
parser.GolangParserListener.ExitElement	parser/golangparser_listener.go	/^	ExitElement(c *ElementContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ElementContext)
parser.GolangParserListener.ExitElementList	parser/golangparser_listener.go	/^	ExitElementList(c *ElementListContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ElementListContext)
parser.GolangParserListener.ExitElementType	parser/golangparser_listener.go	/^	ExitElementType(c *ElementTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ElementTypeContext)
parser.GolangParserListener.ExitEmptyStmt	parser/golangparser_listener.go	/^	ExitEmptyStmt(c *EmptyStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *EmptyStmtContext)
parser.GolangParserListener.ExitEos	parser/golangparser_listener.go	/^	ExitEos(c *EosContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *EosContext)
parser.GolangParserListener.ExitExprCaseClause	parser/golangparser_listener.go	/^	ExitExprCaseClause(c *ExprCaseClauseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ExprCaseClauseContext)
parser.GolangParserListener.ExitExprSwitchCase	parser/golangparser_listener.go	/^	ExitExprSwitchCase(c *ExprSwitchCaseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ExprSwitchCaseContext)
parser.GolangParserListener.ExitExprSwitchStmt	parser/golangparser_listener.go	/^	ExitExprSwitchStmt(c *ExprSwitchStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ExprSwitchStmtContext)
parser.GolangParserListener.ExitExpression	parser/golangparser_listener.go	/^	ExitExpression(c *ExpressionContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ExpressionContext)
parser.GolangParserListener.ExitExpressionList	parser/golangparser_listener.go	/^	ExitExpressionList(c *ExpressionListContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ExpressionListContext)
parser.GolangParserListener.ExitExpressionStmt	parser/golangparser_listener.go	/^	ExitExpressionStmt(c *ExpressionStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ExpressionStmtContext)
parser.GolangParserListener.ExitFallthroughStmt	parser/golangparser_listener.go	/^	ExitFallthroughStmt(c *FallthroughStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *FallthroughStmtContext)
parser.GolangParserListener.ExitFieldDecl	parser/golangparser_listener.go	/^	ExitFieldDecl(c *FieldDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *FieldDeclContext)
parser.GolangParserListener.ExitForClause	parser/golangparser_listener.go	/^	ExitForClause(c *ForClauseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ForClauseContext)
parser.GolangParserListener.ExitForStmt	parser/golangparser_listener.go	/^	ExitForStmt(c *ForStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ForStmtContext)
parser.GolangParserListener.ExitFunction	parser/golangparser_listener.go	/^	ExitFunction(c *FunctionContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *FunctionContext)
parser.GolangParserListener.ExitFunctionDecl	parser/golangparser_listener.go	/^	ExitFunctionDecl(c *FunctionDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *FunctionDeclContext)
parser.GolangParserListener.ExitFunctionLit	parser/golangparser_listener.go	/^	ExitFunctionLit(c *FunctionLitContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *FunctionLitContext)
parser.GolangParserListener.ExitFunctionType	parser/golangparser_listener.go	/^	ExitFunctionType(c *FunctionTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *FunctionTypeContext)
parser.GolangParserListener.ExitGoStmt	parser/golangparser_listener.go	/^	ExitGoStmt(c *GoStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *GoStmtContext)
parser.GolangParserListener.ExitGotoStmt	parser/golangparser_listener.go	/^	ExitGotoStmt(c *GotoStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *GotoStmtContext)
parser.GolangParserListener.ExitIdentifierList	parser/golangparser_listener.go	/^	ExitIdentifierList(c *IdentifierListContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *IdentifierListContext)
parser.GolangParserListener.ExitIfStmt	parser/golangparser_listener.go	/^	ExitIfStmt(c *IfStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *IfStmtContext)
parser.GolangParserListener.ExitImportDecl	parser/golangparser_listener.go	/^	ExitImportDecl(c *ImportDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ImportDeclContext)
parser.GolangParserListener.ExitImportPath	parser/golangparser_listener.go	/^	ExitImportPath(c *ImportPathContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ImportPathContext)
parser.GolangParserListener.ExitImportSpec	parser/golangparser_listener.go	/^	ExitImportSpec(c *ImportSpecContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ImportSpecContext)
parser.GolangParserListener.ExitIncDecStmt	parser/golangparser_listener.go	/^	ExitIncDecStmt(c *IncDecStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *IncDecStmtContext)
parser.GolangParserListener.ExitIndex	parser/golangparser_listener.go	/^	ExitIndex(c *IndexContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *IndexContext)
parser.GolangParserListener.ExitInterfaceType	parser/golangparser_listener.go	/^	ExitInterfaceType(c *InterfaceTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *InterfaceTypeContext)
parser.GolangParserListener.ExitKey	parser/golangparser_listener.go	/^	ExitKey(c *KeyContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *KeyContext)
parser.GolangParserListener.ExitKeyedElement	parser/golangparser_listener.go	/^	ExitKeyedElement(c *KeyedElementContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *KeyedElementContext)
parser.GolangParserListener.ExitLabeledStmt	parser/golangparser_listener.go	/^	ExitLabeledStmt(c *LabeledStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *LabeledStmtContext)
parser.GolangParserListener.ExitLiteral	parser/golangparser_listener.go	/^	ExitLiteral(c *LiteralContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *LiteralContext)
parser.GolangParserListener.ExitLiteralType	parser/golangparser_listener.go	/^	ExitLiteralType(c *LiteralTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *LiteralTypeContext)
parser.GolangParserListener.ExitLiteralValue	parser/golangparser_listener.go	/^	ExitLiteralValue(c *LiteralValueContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *LiteralValueContext)
parser.GolangParserListener.ExitMapType	parser/golangparser_listener.go	/^	ExitMapType(c *MapTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *MapTypeContext)
parser.GolangParserListener.ExitMethodDecl	parser/golangparser_listener.go	/^	ExitMethodDecl(c *MethodDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *MethodDeclContext)
parser.GolangParserListener.ExitMethodExpr	parser/golangparser_listener.go	/^	ExitMethodExpr(c *MethodExprContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *MethodExprContext)
parser.GolangParserListener.ExitMethodSpec	parser/golangparser_listener.go	/^	ExitMethodSpec(c *MethodSpecContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *MethodSpecContext)
parser.GolangParserListener.ExitOperand	parser/golangparser_listener.go	/^	ExitOperand(c *OperandContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *OperandContext)
parser.GolangParserListener.ExitOperandName	parser/golangparser_listener.go	/^	ExitOperandName(c *OperandNameContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *OperandNameContext)
parser.GolangParserListener.ExitPackageClause	parser/golangparser_listener.go	/^	ExitPackageClause(c *PackageClauseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *PackageClauseContext)
parser.GolangParserListener.ExitParameterDecl	parser/golangparser_listener.go	/^	ExitParameterDecl(c *ParameterDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ParameterDeclContext)
parser.GolangParserListener.ExitParameterList	parser/golangparser_listener.go	/^	ExitParameterList(c *ParameterListContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ParameterListContext)
parser.GolangParserListener.ExitParameters	parser/golangparser_listener.go	/^	ExitParameters(c *ParametersContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ParametersContext)
parser.GolangParserListener.ExitPointerType	parser/golangparser_listener.go	/^	ExitPointerType(c *PointerTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *PointerTypeContext)
parser.GolangParserListener.ExitPrimaryExpr	parser/golangparser_listener.go	/^	ExitPrimaryExpr(c *PrimaryExprContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *PrimaryExprContext)
parser.GolangParserListener.ExitQualifiedIdent	parser/golangparser_listener.go	/^	ExitQualifiedIdent(c *QualifiedIdentContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *QualifiedIdentContext)
parser.GolangParserListener.ExitRangeClause	parser/golangparser_listener.go	/^	ExitRangeClause(c *RangeClauseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *RangeClauseContext)
parser.GolangParserListener.ExitReceiver	parser/golangparser_listener.go	/^	ExitReceiver(c *ReceiverContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ReceiverContext)
parser.GolangParserListener.ExitReceiverType	parser/golangparser_listener.go	/^	ExitReceiverType(c *ReceiverTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ReceiverTypeContext)
parser.GolangParserListener.ExitRecvStmt	parser/golangparser_listener.go	/^	ExitRecvStmt(c *RecvStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *RecvStmtContext)
parser.GolangParserListener.ExitResult	parser/golangparser_listener.go	/^	ExitResult(c *ResultContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ResultContext)
parser.GolangParserListener.ExitReturnStmt	parser/golangparser_listener.go	/^	ExitReturnStmt(c *ReturnStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ReturnStmtContext)
parser.GolangParserListener.ExitSelectStmt	parser/golangparser_listener.go	/^	ExitSelectStmt(c *SelectStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SelectStmtContext)
parser.GolangParserListener.ExitSelector	parser/golangparser_listener.go	/^	ExitSelector(c *SelectorContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SelectorContext)
parser.GolangParserListener.ExitSendStmt	parser/golangparser_listener.go	/^	ExitSendStmt(c *SendStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SendStmtContext)
parser.GolangParserListener.ExitShortVarDecl	parser/golangparser_listener.go	/^	ExitShortVarDecl(c *ShortVarDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *ShortVarDeclContext)
parser.GolangParserListener.ExitSignature	parser/golangparser_listener.go	/^	ExitSignature(c *SignatureContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SignatureContext)
parser.GolangParserListener.ExitSimpleStmt	parser/golangparser_listener.go	/^	ExitSimpleStmt(c *SimpleStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SimpleStmtContext)
parser.GolangParserListener.ExitSlice	parser/golangparser_listener.go	/^	ExitSlice(c *SliceContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SliceContext)
parser.GolangParserListener.ExitSliceType	parser/golangparser_listener.go	/^	ExitSliceType(c *SliceTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SliceTypeContext)
parser.GolangParserListener.ExitSourceFile	parser/golangparser_listener.go	/^	ExitSourceFile(c *SourceFileContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SourceFileContext)
parser.GolangParserListener.ExitStatement	parser/golangparser_listener.go	/^	ExitStatement(c *StatementContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *StatementContext)
parser.GolangParserListener.ExitStatementList	parser/golangparser_listener.go	/^	ExitStatementList(c *StatementListContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *StatementListContext)
parser.GolangParserListener.ExitStructType	parser/golangparser_listener.go	/^	ExitStructType(c *StructTypeContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *StructTypeContext)
parser.GolangParserListener.ExitSwitchStmt	parser/golangparser_listener.go	/^	ExitSwitchStmt(c *SwitchStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *SwitchStmtContext)
parser.GolangParserListener.ExitTopLevelDecl	parser/golangparser_listener.go	/^	ExitTopLevelDecl(c *TopLevelDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TopLevelDeclContext)
parser.GolangParserListener.ExitTypeAssertion	parser/golangparser_listener.go	/^	ExitTypeAssertion(c *TypeAssertionContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeAssertionContext)
parser.GolangParserListener.ExitTypeCaseClause	parser/golangparser_listener.go	/^	ExitTypeCaseClause(c *TypeCaseClauseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeCaseClauseContext)
parser.GolangParserListener.ExitTypeDecl	parser/golangparser_listener.go	/^	ExitTypeDecl(c *TypeDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeDeclContext)
parser.GolangParserListener.ExitTypeList	parser/golangparser_listener.go	/^	ExitTypeList(c *TypeListContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeListContext)
parser.GolangParserListener.ExitTypeLit	parser/golangparser_listener.go	/^	ExitTypeLit(c *TypeLitContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeLitContext)
parser.GolangParserListener.ExitTypeName	parser/golangparser_listener.go	/^	ExitTypeName(c *TypeNameContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeNameContext)
parser.GolangParserListener.ExitTypeSpec	parser/golangparser_listener.go	/^	ExitTypeSpec(c *TypeSpecContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeSpecContext)
parser.GolangParserListener.ExitTypeSwitchCase	parser/golangparser_listener.go	/^	ExitTypeSwitchCase(c *TypeSwitchCaseContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeSwitchCaseContext)
parser.GolangParserListener.ExitTypeSwitchGuard	parser/golangparser_listener.go	/^	ExitTypeSwitchGuard(c *TypeSwitchGuardContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeSwitchGuardContext)
parser.GolangParserListener.ExitTypeSwitchStmt	parser/golangparser_listener.go	/^	ExitTypeSwitchStmt(c *TypeSwitchStmtContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *TypeSwitchStmtContext)
parser.GolangParserListener.ExitType_	parser/golangparser_listener.go	/^	ExitType_(c *Type_Context)$/;"	n	interface:parser.GolangParserListener	signature:(c *Type_Context)
parser.GolangParserListener.ExitUnaryExpr	parser/golangparser_listener.go	/^	ExitUnaryExpr(c *UnaryExprContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *UnaryExprContext)
parser.GolangParserListener.ExitVarDecl	parser/golangparser_listener.go	/^	ExitVarDecl(c *VarDeclContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *VarDeclContext)
parser.GolangParserListener.ExitVarSpec	parser/golangparser_listener.go	/^	ExitVarSpec(c *VarSpecContext)$/;"	n	interface:parser.GolangParserListener	signature:(c *VarSpecContext)
parser.GolangParserMap	parser/golang_parser.go	/^	GolangParserMap                  = 9$/;"	c	package:parser
parser.GolangParserMinus	parser/golang_parser.go	/^	GolangParserMinus                = 35$/;"	c	package:parser
parser.GolangParserMinusMinus	parser/golang_parser.go	/^	GolangParserMinusMinus           = 61$/;"	c	package:parser
parser.GolangParserModulus	parser/golang_parser.go	/^	GolangParserModulus              = 40$/;"	c	package:parser
parser.GolangParserMultiply	parser/golang_parser.go	/^	GolangParserMultiply             = 38$/;"	c	package:parser
parser.GolangParserNot	parser/golang_parser.go	/^	GolangParserNot                  = 45$/;"	c	package:parser
parser.GolangParserNotEquals	parser/golang_parser.go	/^	GolangParserNotEquals            = 29$/;"	c	package:parser
parser.GolangParserOpenBrace	parser/golang_parser.go	/^	GolangParserOpenBrace            = 49$/;"	c	package:parser
parser.GolangParserOpenBracket	parser/golang_parser.go	/^	GolangParserOpenBracket          = 51$/;"	c	package:parser
parser.GolangParserOpenParen	parser/golang_parser.go	/^	GolangParserOpenParen            = 47$/;"	c	package:parser
parser.GolangParserOr	parser/golang_parser.go	/^	GolangParserOr                   = 26$/;"	c	package:parser
parser.GolangParserPackage	parser/golang_parser.go	/^	GolangParserPackage              = 14$/;"	c	package:parser
parser.GolangParserPlus	parser/golang_parser.go	/^	GolangParserPlus                 = 34$/;"	c	package:parser
parser.GolangParserPlusPlus	parser/golang_parser.go	/^	GolangParserPlusPlus             = 60$/;"	c	package:parser
parser.GolangParserRULE_anonymousField	parser/golang_parser.go	/^	GolangParserRULE_anonymousField  = 87$/;"	c	package:parser
parser.GolangParserRULE_arguments	parser/golang_parser.go	/^	GolangParserRULE_arguments       = 94$/;"	c	package:parser
parser.GolangParserRULE_arrayLength	parser/golang_parser.go	/^	GolangParserRULE_arrayLength     = 59$/;"	c	package:parser
parser.GolangParserRULE_arrayType	parser/golang_parser.go	/^	GolangParserRULE_arrayType       = 58$/;"	c	package:parser
parser.GolangParserRULE_assign_op	parser/golang_parser.go	/^	GolangParserRULE_assign_op       = 27$/;"	c	package:parser
parser.GolangParserRULE_assignment	parser/golang_parser.go	/^	GolangParserRULE_assignment      = 26$/;"	c	package:parser
parser.GolangParserRULE_basicLit	parser/golang_parser.go	/^	GolangParserRULE_basicLit        = 75$/;"	c	package:parser
parser.GolangParserRULE_block	parser/golang_parser.go	/^	GolangParserRULE_block           = 19$/;"	c	package:parser
parser.GolangParserRULE_breakStmt	parser/golang_parser.go	/^	GolangParserRULE_breakStmt       = 32$/;"	c	package:parser
parser.GolangParserRULE_channelType	parser/golang_parser.go	/^	GolangParserRULE_channelType     = 65$/;"	c	package:parser
parser.GolangParserRULE_commCase	parser/golang_parser.go	/^	GolangParserRULE_commCase        = 49$/;"	c	package:parser
parser.GolangParserRULE_commClause	parser/golang_parser.go	/^	GolangParserRULE_commClause      = 48$/;"	c	package:parser
parser.GolangParserRULE_compositeLit	parser/golang_parser.go	/^	GolangParserRULE_compositeLit    = 78$/;"	c	package:parser
parser.GolangParserRULE_constDecl	parser/golang_parser.go	/^	GolangParserRULE_constDecl       = 7$/;"	c	package:parser
parser.GolangParserRULE_constSpec	parser/golang_parser.go	/^	GolangParserRULE_constSpec       = 8$/;"	c	package:parser
parser.GolangParserRULE_continueStmt	parser/golang_parser.go	/^	GolangParserRULE_continueStmt    = 33$/;"	c	package:parser
parser.GolangParserRULE_conversion	parser/golang_parser.go	/^	GolangParserRULE_conversion      = 99$/;"	c	package:parser
parser.GolangParserRULE_declaration	parser/golang_parser.go	/^	GolangParserRULE_declaration     = 6$/;"	c	package:parser
parser.GolangParserRULE_deferStmt	parser/golang_parser.go	/^	GolangParserRULE_deferStmt       = 36$/;"	c	package:parser
parser.GolangParserRULE_element	parser/golang_parser.go	/^	GolangParserRULE_element         = 84$/;"	c	package:parser
parser.GolangParserRULE_elementList	parser/golang_parser.go	/^	GolangParserRULE_elementList     = 81$/;"	c	package:parser
parser.GolangParserRULE_elementType	parser/golang_parser.go	/^	GolangParserRULE_elementType     = 60$/;"	c	package:parser
parser.GolangParserRULE_emptyStmt	parser/golang_parser.go	/^	GolangParserRULE_emptyStmt       = 29$/;"	c	package:parser
parser.GolangParserRULE_eos	parser/golang_parser.go	/^	GolangParserRULE_eos             = 100$/;"	c	package:parser
parser.GolangParserRULE_exprCaseClause	parser/golang_parser.go	/^	GolangParserRULE_exprCaseClause  = 40$/;"	c	package:parser
parser.GolangParserRULE_exprSwitchCase	parser/golang_parser.go	/^	GolangParserRULE_exprSwitchCase  = 41$/;"	c	package:parser
parser.GolangParserRULE_exprSwitchStmt	parser/golang_parser.go	/^	GolangParserRULE_exprSwitchStmt  = 39$/;"	c	package:parser
parser.GolangParserRULE_expression	parser/golang_parser.go	/^	GolangParserRULE_expression      = 97$/;"	c	package:parser
parser.GolangParserRULE_expressionList	parser/golang_parser.go	/^	GolangParserRULE_expressionList  = 10$/;"	c	package:parser
parser.GolangParserRULE_expressionStmt	parser/golang_parser.go	/^	GolangParserRULE_expressionStmt  = 23$/;"	c	package:parser
parser.GolangParserRULE_fallthroughStmt	parser/golang_parser.go	/^	GolangParserRULE_fallthroughStmt = 35$/;"	c	package:parser
parser.GolangParserRULE_fieldDecl	parser/golang_parser.go	/^	GolangParserRULE_fieldDecl       = 86$/;"	c	package:parser
parser.GolangParserRULE_forClause	parser/golang_parser.go	/^	GolangParserRULE_forClause       = 52$/;"	c	package:parser
parser.GolangParserRULE_forStmt	parser/golang_parser.go	/^	GolangParserRULE_forStmt         = 51$/;"	c	package:parser
parser.GolangParserRULE_function	parser/golang_parser.go	/^	GolangParserRULE_function        = 14$/;"	c	package:parser
parser.GolangParserRULE_functionDecl	parser/golang_parser.go	/^	GolangParserRULE_functionDecl    = 13$/;"	c	package:parser
parser.GolangParserRULE_functionLit	parser/golang_parser.go	/^	GolangParserRULE_functionLit     = 88$/;"	c	package:parser
parser.GolangParserRULE_functionType	parser/golang_parser.go	/^	GolangParserRULE_functionType    = 67$/;"	c	package:parser
parser.GolangParserRULE_goStmt	parser/golang_parser.go	/^	GolangParserRULE_goStmt          = 54$/;"	c	package:parser
parser.GolangParserRULE_gotoStmt	parser/golang_parser.go	/^	GolangParserRULE_gotoStmt        = 34$/;"	c	package:parser
parser.GolangParserRULE_identifierList	parser/golang_parser.go	/^	GolangParserRULE_identifierList  = 9$/;"	c	package:parser
parser.GolangParserRULE_ifStmt	parser/golang_parser.go	/^	GolangParserRULE_ifStmt          = 37$/;"	c	package:parser
parser.GolangParserRULE_importDecl	parser/golang_parser.go	/^	GolangParserRULE_importDecl      = 2$/;"	c	package:parser
parser.GolangParserRULE_importPath	parser/golang_parser.go	/^	GolangParserRULE_importPath      = 4$/;"	c	package:parser
parser.GolangParserRULE_importSpec	parser/golang_parser.go	/^	GolangParserRULE_importSpec      = 3$/;"	c	package:parser
parser.GolangParserRULE_incDecStmt	parser/golang_parser.go	/^	GolangParserRULE_incDecStmt      = 25$/;"	c	package:parser
parser.GolangParserRULE_index	parser/golang_parser.go	/^	GolangParserRULE_index           = 91$/;"	c	package:parser
parser.GolangParserRULE_interfaceType	parser/golang_parser.go	/^	GolangParserRULE_interfaceType   = 62$/;"	c	package:parser
parser.GolangParserRULE_key	parser/golang_parser.go	/^	GolangParserRULE_key             = 83$/;"	c	package:parser
parser.GolangParserRULE_keyedElement	parser/golang_parser.go	/^	GolangParserRULE_keyedElement    = 82$/;"	c	package:parser
parser.GolangParserRULE_labeledStmt	parser/golang_parser.go	/^	GolangParserRULE_labeledStmt     = 30$/;"	c	package:parser
parser.GolangParserRULE_literal	parser/golang_parser.go	/^	GolangParserRULE_literal         = 74$/;"	c	package:parser
parser.GolangParserRULE_literalType	parser/golang_parser.go	/^	GolangParserRULE_literalType     = 79$/;"	c	package:parser
parser.GolangParserRULE_literalValue	parser/golang_parser.go	/^	GolangParserRULE_literalValue    = 80$/;"	c	package:parser
parser.GolangParserRULE_mapType	parser/golang_parser.go	/^	GolangParserRULE_mapType         = 64$/;"	c	package:parser
parser.GolangParserRULE_methodDecl	parser/golang_parser.go	/^	GolangParserRULE_methodDecl      = 15$/;"	c	package:parser
parser.GolangParserRULE_methodExpr	parser/golang_parser.go	/^	GolangParserRULE_methodExpr      = 95$/;"	c	package:parser
parser.GolangParserRULE_methodSpec	parser/golang_parser.go	/^	GolangParserRULE_methodSpec      = 66$/;"	c	package:parser
parser.GolangParserRULE_operand	parser/golang_parser.go	/^	GolangParserRULE_operand         = 73$/;"	c	package:parser
parser.GolangParserRULE_operandName	parser/golang_parser.go	/^	GolangParserRULE_operandName     = 76$/;"	c	package:parser
parser.GolangParserRULE_packageClause	parser/golang_parser.go	/^	GolangParserRULE_packageClause   = 1$/;"	c	package:parser
parser.GolangParserRULE_parameterDecl	parser/golang_parser.go	/^	GolangParserRULE_parameterDecl   = 72$/;"	c	package:parser
parser.GolangParserRULE_parameterList	parser/golang_parser.go	/^	GolangParserRULE_parameterList   = 71$/;"	c	package:parser
parser.GolangParserRULE_parameters	parser/golang_parser.go	/^	GolangParserRULE_parameters      = 70$/;"	c	package:parser
parser.GolangParserRULE_pointerType	parser/golang_parser.go	/^	GolangParserRULE_pointerType     = 61$/;"	c	package:parser
parser.GolangParserRULE_primaryExpr	parser/golang_parser.go	/^	GolangParserRULE_primaryExpr     = 89$/;"	c	package:parser
parser.GolangParserRULE_qualifiedIdent	parser/golang_parser.go	/^	GolangParserRULE_qualifiedIdent  = 77$/;"	c	package:parser
parser.GolangParserRULE_rangeClause	parser/golang_parser.go	/^	GolangParserRULE_rangeClause     = 53$/;"	c	package:parser
parser.GolangParserRULE_receiver	parser/golang_parser.go	/^	GolangParserRULE_receiver        = 16$/;"	c	package:parser
parser.GolangParserRULE_receiverType	parser/golang_parser.go	/^	GolangParserRULE_receiverType    = 96$/;"	c	package:parser
parser.GolangParserRULE_recvStmt	parser/golang_parser.go	/^	GolangParserRULE_recvStmt        = 50$/;"	c	package:parser
parser.GolangParserRULE_result	parser/golang_parser.go	/^	GolangParserRULE_result          = 69$/;"	c	package:parser
parser.GolangParserRULE_returnStmt	parser/golang_parser.go	/^	GolangParserRULE_returnStmt      = 31$/;"	c	package:parser
parser.GolangParserRULE_selectStmt	parser/golang_parser.go	/^	GolangParserRULE_selectStmt      = 47$/;"	c	package:parser
parser.GolangParserRULE_selector	parser/golang_parser.go	/^	GolangParserRULE_selector        = 90$/;"	c	package:parser
parser.GolangParserRULE_sendStmt	parser/golang_parser.go	/^	GolangParserRULE_sendStmt        = 24$/;"	c	package:parser
parser.GolangParserRULE_shortVarDecl	parser/golang_parser.go	/^	GolangParserRULE_shortVarDecl    = 28$/;"	c	package:parser
parser.GolangParserRULE_signature	parser/golang_parser.go	/^	GolangParserRULE_signature       = 68$/;"	c	package:parser
parser.GolangParserRULE_simpleStmt	parser/golang_parser.go	/^	GolangParserRULE_simpleStmt      = 22$/;"	c	package:parser
parser.GolangParserRULE_slice	parser/golang_parser.go	/^	GolangParserRULE_slice           = 92$/;"	c	package:parser
parser.GolangParserRULE_sliceType	parser/golang_parser.go	/^	GolangParserRULE_sliceType       = 63$/;"	c	package:parser
parser.GolangParserRULE_sourceFile	parser/golang_parser.go	/^	GolangParserRULE_sourceFile      = 0$/;"	c	package:parser
parser.GolangParserRULE_statement	parser/golang_parser.go	/^	GolangParserRULE_statement       = 21$/;"	c	package:parser
parser.GolangParserRULE_statementList	parser/golang_parser.go	/^	GolangParserRULE_statementList   = 20$/;"	c	package:parser
parser.GolangParserRULE_structType	parser/golang_parser.go	/^	GolangParserRULE_structType      = 85$/;"	c	package:parser
parser.GolangParserRULE_switchStmt	parser/golang_parser.go	/^	GolangParserRULE_switchStmt      = 38$/;"	c	package:parser
parser.GolangParserRULE_topLevelDecl	parser/golang_parser.go	/^	GolangParserRULE_topLevelDecl    = 5$/;"	c	package:parser
parser.GolangParserRULE_typeAssertion	parser/golang_parser.go	/^	GolangParserRULE_typeAssertion   = 93$/;"	c	package:parser
parser.GolangParserRULE_typeCaseClause	parser/golang_parser.go	/^	GolangParserRULE_typeCaseClause  = 44$/;"	c	package:parser
parser.GolangParserRULE_typeDecl	parser/golang_parser.go	/^	GolangParserRULE_typeDecl        = 11$/;"	c	package:parser
parser.GolangParserRULE_typeList	parser/golang_parser.go	/^	GolangParserRULE_typeList        = 46$/;"	c	package:parser
parser.GolangParserRULE_typeLit	parser/golang_parser.go	/^	GolangParserRULE_typeLit         = 57$/;"	c	package:parser
parser.GolangParserRULE_typeName	parser/golang_parser.go	/^	GolangParserRULE_typeName        = 56$/;"	c	package:parser
parser.GolangParserRULE_typeSpec	parser/golang_parser.go	/^	GolangParserRULE_typeSpec        = 12$/;"	c	package:parser
parser.GolangParserRULE_typeSwitchCase	parser/golang_parser.go	/^	GolangParserRULE_typeSwitchCase  = 45$/;"	c	package:parser
parser.GolangParserRULE_typeSwitchGuard	parser/golang_parser.go	/^	GolangParserRULE_typeSwitchGuard = 43$/;"	c	package:parser
parser.GolangParserRULE_typeSwitchStmt	parser/golang_parser.go	/^	GolangParserRULE_typeSwitchStmt  = 42$/;"	c	package:parser
parser.GolangParserRULE_type_	parser/golang_parser.go	/^	GolangParserRULE_type_           = 55$/;"	c	package:parser
parser.GolangParserRULE_unaryExpr	parser/golang_parser.go	/^	GolangParserRULE_unaryExpr       = 98$/;"	c	package:parser
parser.GolangParserRULE_varDecl	parser/golang_parser.go	/^	GolangParserRULE_varDecl         = 17$/;"	c	package:parser
parser.GolangParserRULE_varSpec	parser/golang_parser.go	/^	GolangParserRULE_varSpec         = 18$/;"	c	package:parser
parser.GolangParserRUNE_LIT	parser/golang_parser.go	/^	GolangParserRUNE_LIT             = 67$/;"	c	package:parser
parser.GolangParserRange	parser/golang_parser.go	/^	GolangParserRange                = 19$/;"	c	package:parser
parser.GolangParserReturn	parser/golang_parser.go	/^	GolangParserReturn               = 24$/;"	c	package:parser
parser.GolangParserRightShiftArithmetic	parser/golang_parser.go	/^	GolangParserRightShiftArithmetic = 42$/;"	c	package:parser
parser.GolangParserSTRING_LIT	parser/golang_parser.go	/^	GolangParserSTRING_LIT           = 70$/;"	c	package:parser
parser.GolangParserSelect	parser/golang_parser.go	/^	GolangParserSelect               = 5$/;"	c	package:parser
parser.GolangParserSemiColon	parser/golang_parser.go	/^	GolangParserSemiColon            = 54$/;"	c	package:parser
parser.GolangParserStruct	parser/golang_parser.go	/^	GolangParserStruct               = 10$/;"	c	package:parser
parser.GolangParserSwitch	parser/golang_parser.go	/^	GolangParserSwitch               = 15$/;"	c	package:parser
parser.GolangParserTERMINATOR	parser/golang_parser.go	/^	GolangParserTERMINATOR           = 73$/;"	c	package:parser
parser.GolangParserType	parser/golang_parser.go	/^	GolangParserType                 = 20$/;"	c	package:parser
parser.GolangParserVar	parser/golang_parser.go	/^	GolangParserVar                  = 25$/;"	c	package:parser
parser.GolangParserWS	parser/golang_parser.go	/^	GolangParserWS                   = 71$/;"	c	package:parser
parser.GotoStmtContext	parser/golang_parser.go	/^type GotoStmtContext struct {$/;"	s	package:parser
parser.GotoStmtContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.GotoStmtContext	typeref:typename:*antlr.BaseParserRuleContext
parser.GotoStmtContext.EnterRule	parser/golang_parser.go	/^func (s *GotoStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.GotoStmtContext	signature:(listener antlr.ParseTreeListener)
parser.GotoStmtContext.ExitRule	parser/golang_parser.go	/^func (s *GotoStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.GotoStmtContext	signature:(listener antlr.ParseTreeListener)
parser.GotoStmtContext.GetParser	parser/golang_parser.go	/^func (s *GotoStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.GotoStmtContext	typeref:typename:antlr.Parser	signature:()
parser.GotoStmtContext.GetRuleContext	parser/golang_parser.go	/^func (s *GotoStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.GotoStmtContext	typeref:typename:antlr.RuleContext	signature:()
parser.GotoStmtContext.Goto	parser/golang_parser.go	/^func (s *GotoStmtContext) Goto() antlr.TerminalNode {$/;"	f	struct:parser.GotoStmtContext	typeref:typename:antlr.TerminalNode	signature:()
parser.GotoStmtContext.IDENTIFIER	parser/golang_parser.go	/^func (s *GotoStmtContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.GotoStmtContext	typeref:typename:antlr.TerminalNode	signature:()
parser.GotoStmtContext.IsGotoStmtContext	parser/golang_parser.go	/^func (*GotoStmtContext) IsGotoStmtContext() {}$/;"	f	struct:parser.GotoStmtContext	signature:()
parser.GotoStmtContext.ToStringTree	parser/golang_parser.go	/^func (s *GotoStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.GotoStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.GotoStmtContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.GotoStmtContext	typeref:typename:antlr.Parser
parser.IAnonymousFieldContext	parser/golang_parser.go	/^type IAnonymousFieldContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IAnonymousFieldContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IAnonymousFieldContext	typeref:typename:antlr.Parser	signature:()
parser.IAnonymousFieldContext.IsAnonymousFieldContext	parser/golang_parser.go	/^	IsAnonymousFieldContext()$/;"	n	interface:parser.IAnonymousFieldContext	signature:()
parser.IArgumentsContext	parser/golang_parser.go	/^type IArgumentsContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IArgumentsContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IArgumentsContext	typeref:typename:antlr.Parser	signature:()
parser.IArgumentsContext.IsArgumentsContext	parser/golang_parser.go	/^	IsArgumentsContext()$/;"	n	interface:parser.IArgumentsContext	signature:()
parser.IArrayLengthContext	parser/golang_parser.go	/^type IArrayLengthContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IArrayLengthContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IArrayLengthContext	typeref:typename:antlr.Parser	signature:()
parser.IArrayLengthContext.IsArrayLengthContext	parser/golang_parser.go	/^	IsArrayLengthContext()$/;"	n	interface:parser.IArrayLengthContext	signature:()
parser.IArrayTypeContext	parser/golang_parser.go	/^type IArrayTypeContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IArrayTypeContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IArrayTypeContext	typeref:typename:antlr.Parser	signature:()
parser.IArrayTypeContext.IsArrayTypeContext	parser/golang_parser.go	/^	IsArrayTypeContext()$/;"	n	interface:parser.IArrayTypeContext	signature:()
parser.IAssign_opContext	parser/golang_parser.go	/^type IAssign_opContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IAssign_opContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IAssign_opContext	typeref:typename:antlr.Parser	signature:()
parser.IAssign_opContext.IsAssign_opContext	parser/golang_parser.go	/^	IsAssign_opContext()$/;"	n	interface:parser.IAssign_opContext	signature:()
parser.IAssignmentContext	parser/golang_parser.go	/^type IAssignmentContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IAssignmentContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IAssignmentContext	typeref:typename:antlr.Parser	signature:()
parser.IAssignmentContext.IsAssignmentContext	parser/golang_parser.go	/^	IsAssignmentContext()$/;"	n	interface:parser.IAssignmentContext	signature:()
parser.IBasicLitContext	parser/golang_parser.go	/^type IBasicLitContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IBasicLitContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IBasicLitContext	typeref:typename:antlr.Parser	signature:()
parser.IBasicLitContext.IsBasicLitContext	parser/golang_parser.go	/^	IsBasicLitContext()$/;"	n	interface:parser.IBasicLitContext	signature:()
parser.IBlockContext	parser/golang_parser.go	/^type IBlockContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IBlockContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IBlockContext	typeref:typename:antlr.Parser	signature:()
parser.IBlockContext.IsBlockContext	parser/golang_parser.go	/^	IsBlockContext()$/;"	n	interface:parser.IBlockContext	signature:()
parser.IBreakStmtContext	parser/golang_parser.go	/^type IBreakStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IBreakStmtContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IBreakStmtContext	typeref:typename:antlr.Parser	signature:()
parser.IBreakStmtContext.IsBreakStmtContext	parser/golang_parser.go	/^	IsBreakStmtContext()$/;"	n	interface:parser.IBreakStmtContext	signature:()
parser.IChannelTypeContext	parser/golang_parser.go	/^type IChannelTypeContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IChannelTypeContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IChannelTypeContext	typeref:typename:antlr.Parser	signature:()
parser.IChannelTypeContext.IsChannelTypeContext	parser/golang_parser.go	/^	IsChannelTypeContext()$/;"	n	interface:parser.IChannelTypeContext	signature:()
parser.ICommCaseContext	parser/golang_parser.go	/^type ICommCaseContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ICommCaseContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ICommCaseContext	typeref:typename:antlr.Parser	signature:()
parser.ICommCaseContext.IsCommCaseContext	parser/golang_parser.go	/^	IsCommCaseContext()$/;"	n	interface:parser.ICommCaseContext	signature:()
parser.ICommClauseContext	parser/golang_parser.go	/^type ICommClauseContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ICommClauseContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ICommClauseContext	typeref:typename:antlr.Parser	signature:()
parser.ICommClauseContext.IsCommClauseContext	parser/golang_parser.go	/^	IsCommClauseContext()$/;"	n	interface:parser.ICommClauseContext	signature:()
parser.ICompositeLitContext	parser/golang_parser.go	/^type ICompositeLitContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ICompositeLitContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ICompositeLitContext	typeref:typename:antlr.Parser	signature:()
parser.ICompositeLitContext.IsCompositeLitContext	parser/golang_parser.go	/^	IsCompositeLitContext()$/;"	n	interface:parser.ICompositeLitContext	signature:()
parser.IConstDeclContext	parser/golang_parser.go	/^type IConstDeclContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IConstDeclContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IConstDeclContext	typeref:typename:antlr.Parser	signature:()
parser.IConstDeclContext.IsConstDeclContext	parser/golang_parser.go	/^	IsConstDeclContext()$/;"	n	interface:parser.IConstDeclContext	signature:()
parser.IConstSpecContext	parser/golang_parser.go	/^type IConstSpecContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IConstSpecContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IConstSpecContext	typeref:typename:antlr.Parser	signature:()
parser.IConstSpecContext.IsConstSpecContext	parser/golang_parser.go	/^	IsConstSpecContext()$/;"	n	interface:parser.IConstSpecContext	signature:()
parser.IContinueStmtContext	parser/golang_parser.go	/^type IContinueStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IContinueStmtContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IContinueStmtContext	typeref:typename:antlr.Parser	signature:()
parser.IContinueStmtContext.IsContinueStmtContext	parser/golang_parser.go	/^	IsContinueStmtContext()$/;"	n	interface:parser.IContinueStmtContext	signature:()
parser.IConversionContext	parser/golang_parser.go	/^type IConversionContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IConversionContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IConversionContext	typeref:typename:antlr.Parser	signature:()
parser.IConversionContext.IsConversionContext	parser/golang_parser.go	/^	IsConversionContext()$/;"	n	interface:parser.IConversionContext	signature:()
parser.IDeclarationContext	parser/golang_parser.go	/^type IDeclarationContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IDeclarationContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IDeclarationContext	typeref:typename:antlr.Parser	signature:()
parser.IDeclarationContext.IsDeclarationContext	parser/golang_parser.go	/^	IsDeclarationContext()$/;"	n	interface:parser.IDeclarationContext	signature:()
parser.IDeferStmtContext	parser/golang_parser.go	/^type IDeferStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IDeferStmtContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IDeferStmtContext	typeref:typename:antlr.Parser	signature:()
parser.IDeferStmtContext.IsDeferStmtContext	parser/golang_parser.go	/^	IsDeferStmtContext()$/;"	n	interface:parser.IDeferStmtContext	signature:()
parser.IElementContext	parser/golang_parser.go	/^type IElementContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IElementContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IElementContext	typeref:typename:antlr.Parser	signature:()
parser.IElementContext.IsElementContext	parser/golang_parser.go	/^	IsElementContext()$/;"	n	interface:parser.IElementContext	signature:()
parser.IElementListContext	parser/golang_parser.go	/^type IElementListContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IElementListContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IElementListContext	typeref:typename:antlr.Parser	signature:()
parser.IElementListContext.IsElementListContext	parser/golang_parser.go	/^	IsElementListContext()$/;"	n	interface:parser.IElementListContext	signature:()
parser.IElementTypeContext	parser/golang_parser.go	/^type IElementTypeContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IElementTypeContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IElementTypeContext	typeref:typename:antlr.Parser	signature:()
parser.IElementTypeContext.IsElementTypeContext	parser/golang_parser.go	/^	IsElementTypeContext()$/;"	n	interface:parser.IElementTypeContext	signature:()
parser.IEmptyStmtContext	parser/golang_parser.go	/^type IEmptyStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IEmptyStmtContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IEmptyStmtContext	typeref:typename:antlr.Parser	signature:()
parser.IEmptyStmtContext.IsEmptyStmtContext	parser/golang_parser.go	/^	IsEmptyStmtContext()$/;"	n	interface:parser.IEmptyStmtContext	signature:()
parser.IEosContext	parser/golang_parser.go	/^type IEosContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IEosContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IEosContext	typeref:typename:antlr.Parser	signature:()
parser.IEosContext.IsEosContext	parser/golang_parser.go	/^	IsEosContext()$/;"	n	interface:parser.IEosContext	signature:()
parser.IExprCaseClauseContext	parser/golang_parser.go	/^type IExprCaseClauseContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IExprCaseClauseContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IExprCaseClauseContext	typeref:typename:antlr.Parser	signature:()
parser.IExprCaseClauseContext.IsExprCaseClauseContext	parser/golang_parser.go	/^	IsExprCaseClauseContext()$/;"	n	interface:parser.IExprCaseClauseContext	signature:()
parser.IExprSwitchCaseContext	parser/golang_parser.go	/^type IExprSwitchCaseContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IExprSwitchCaseContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IExprSwitchCaseContext	typeref:typename:antlr.Parser	signature:()
parser.IExprSwitchCaseContext.IsExprSwitchCaseContext	parser/golang_parser.go	/^	IsExprSwitchCaseContext()$/;"	n	interface:parser.IExprSwitchCaseContext	signature:()
parser.IExprSwitchStmtContext	parser/golang_parser.go	/^type IExprSwitchStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IExprSwitchStmtContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IExprSwitchStmtContext	typeref:typename:antlr.Parser	signature:()
parser.IExprSwitchStmtContext.IsExprSwitchStmtContext	parser/golang_parser.go	/^	IsExprSwitchStmtContext()$/;"	n	interface:parser.IExprSwitchStmtContext	signature:()
parser.IExpressionContext	parser/golang_parser.go	/^type IExpressionContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IExpressionContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IExpressionContext	typeref:typename:antlr.Parser	signature:()
parser.IExpressionContext.IsExpressionContext	parser/golang_parser.go	/^	IsExpressionContext()$/;"	n	interface:parser.IExpressionContext	signature:()
parser.IExpressionListContext	parser/golang_parser.go	/^type IExpressionListContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IExpressionListContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IExpressionListContext	typeref:typename:antlr.Parser	signature:()
parser.IExpressionListContext.IsExpressionListContext	parser/golang_parser.go	/^	IsExpressionListContext()$/;"	n	interface:parser.IExpressionListContext	signature:()
parser.IExpressionStmtContext	parser/golang_parser.go	/^type IExpressionStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IExpressionStmtContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IExpressionStmtContext	typeref:typename:antlr.Parser	signature:()
parser.IExpressionStmtContext.IsExpressionStmtContext	parser/golang_parser.go	/^	IsExpressionStmtContext()$/;"	n	interface:parser.IExpressionStmtContext	signature:()
parser.IFallthroughStmtContext	parser/golang_parser.go	/^type IFallthroughStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IFallthroughStmtContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IFallthroughStmtContext	typeref:typename:antlr.Parser	signature:()
parser.IFallthroughStmtContext.IsFallthroughStmtContext	parser/golang_parser.go	/^	IsFallthroughStmtContext()$/;"	n	interface:parser.IFallthroughStmtContext	signature:()
parser.IFieldDeclContext	parser/golang_parser.go	/^type IFieldDeclContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IFieldDeclContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IFieldDeclContext	typeref:typename:antlr.Parser	signature:()
parser.IFieldDeclContext.IsFieldDeclContext	parser/golang_parser.go	/^	IsFieldDeclContext()$/;"	n	interface:parser.IFieldDeclContext	signature:()
parser.IForClauseContext	parser/golang_parser.go	/^type IForClauseContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IForClauseContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IForClauseContext	typeref:typename:antlr.Parser	signature:()
parser.IForClauseContext.IsForClauseContext	parser/golang_parser.go	/^	IsForClauseContext()$/;"	n	interface:parser.IForClauseContext	signature:()
parser.IForStmtContext	parser/golang_parser.go	/^type IForStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IForStmtContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IForStmtContext	typeref:typename:antlr.Parser	signature:()
parser.IForStmtContext.IsForStmtContext	parser/golang_parser.go	/^	IsForStmtContext()$/;"	n	interface:parser.IForStmtContext	signature:()
parser.IFunctionContext	parser/golang_parser.go	/^type IFunctionContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IFunctionContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IFunctionContext	typeref:typename:antlr.Parser	signature:()
parser.IFunctionContext.IsFunctionContext	parser/golang_parser.go	/^	IsFunctionContext()$/;"	n	interface:parser.IFunctionContext	signature:()
parser.IFunctionDeclContext	parser/golang_parser.go	/^type IFunctionDeclContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IFunctionDeclContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IFunctionDeclContext	typeref:typename:antlr.Parser	signature:()
parser.IFunctionDeclContext.IsFunctionDeclContext	parser/golang_parser.go	/^	IsFunctionDeclContext()$/;"	n	interface:parser.IFunctionDeclContext	signature:()
parser.IFunctionLitContext	parser/golang_parser.go	/^type IFunctionLitContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IFunctionLitContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IFunctionLitContext	typeref:typename:antlr.Parser	signature:()
parser.IFunctionLitContext.IsFunctionLitContext	parser/golang_parser.go	/^	IsFunctionLitContext()$/;"	n	interface:parser.IFunctionLitContext	signature:()
parser.IFunctionTypeContext	parser/golang_parser.go	/^type IFunctionTypeContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IFunctionTypeContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IFunctionTypeContext	typeref:typename:antlr.Parser	signature:()
parser.IFunctionTypeContext.IsFunctionTypeContext	parser/golang_parser.go	/^	IsFunctionTypeContext()$/;"	n	interface:parser.IFunctionTypeContext	signature:()
parser.IGoStmtContext	parser/golang_parser.go	/^type IGoStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IGoStmtContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IGoStmtContext	typeref:typename:antlr.Parser	signature:()
parser.IGoStmtContext.IsGoStmtContext	parser/golang_parser.go	/^	IsGoStmtContext()$/;"	n	interface:parser.IGoStmtContext	signature:()
parser.IGotoStmtContext	parser/golang_parser.go	/^type IGotoStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IGotoStmtContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IGotoStmtContext	typeref:typename:antlr.Parser	signature:()
parser.IGotoStmtContext.IsGotoStmtContext	parser/golang_parser.go	/^	IsGotoStmtContext()$/;"	n	interface:parser.IGotoStmtContext	signature:()
parser.IIdentifierListContext	parser/golang_parser.go	/^type IIdentifierListContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IIdentifierListContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IIdentifierListContext	typeref:typename:antlr.Parser	signature:()
parser.IIdentifierListContext.IsIdentifierListContext	parser/golang_parser.go	/^	IsIdentifierListContext()$/;"	n	interface:parser.IIdentifierListContext	signature:()
parser.IIfStmtContext	parser/golang_parser.go	/^type IIfStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IIfStmtContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IIfStmtContext	typeref:typename:antlr.Parser	signature:()
parser.IIfStmtContext.IsIfStmtContext	parser/golang_parser.go	/^	IsIfStmtContext()$/;"	n	interface:parser.IIfStmtContext	signature:()
parser.IImportDeclContext	parser/golang_parser.go	/^type IImportDeclContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IImportDeclContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IImportDeclContext	typeref:typename:antlr.Parser	signature:()
parser.IImportDeclContext.IsImportDeclContext	parser/golang_parser.go	/^	IsImportDeclContext()$/;"	n	interface:parser.IImportDeclContext	signature:()
parser.IImportPathContext	parser/golang_parser.go	/^type IImportPathContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IImportPathContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IImportPathContext	typeref:typename:antlr.Parser	signature:()
parser.IImportPathContext.IsImportPathContext	parser/golang_parser.go	/^	IsImportPathContext()$/;"	n	interface:parser.IImportPathContext	signature:()
parser.IImportSpecContext	parser/golang_parser.go	/^type IImportSpecContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IImportSpecContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IImportSpecContext	typeref:typename:antlr.Parser	signature:()
parser.IImportSpecContext.IsImportSpecContext	parser/golang_parser.go	/^	IsImportSpecContext()$/;"	n	interface:parser.IImportSpecContext	signature:()
parser.IIncDecStmtContext	parser/golang_parser.go	/^type IIncDecStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IIncDecStmtContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IIncDecStmtContext	typeref:typename:antlr.Parser	signature:()
parser.IIncDecStmtContext.IsIncDecStmtContext	parser/golang_parser.go	/^	IsIncDecStmtContext()$/;"	n	interface:parser.IIncDecStmtContext	signature:()
parser.IIndexContext	parser/golang_parser.go	/^type IIndexContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IIndexContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IIndexContext	typeref:typename:antlr.Parser	signature:()
parser.IIndexContext.IsIndexContext	parser/golang_parser.go	/^	IsIndexContext()$/;"	n	interface:parser.IIndexContext	signature:()
parser.IInterfaceTypeContext	parser/golang_parser.go	/^type IInterfaceTypeContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IInterfaceTypeContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IInterfaceTypeContext	typeref:typename:antlr.Parser	signature:()
parser.IInterfaceTypeContext.IsInterfaceTypeContext	parser/golang_parser.go	/^	IsInterfaceTypeContext()$/;"	n	interface:parser.IInterfaceTypeContext	signature:()
parser.IKeyContext	parser/golang_parser.go	/^type IKeyContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IKeyContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IKeyContext	typeref:typename:antlr.Parser	signature:()
parser.IKeyContext.IsKeyContext	parser/golang_parser.go	/^	IsKeyContext()$/;"	n	interface:parser.IKeyContext	signature:()
parser.IKeyedElementContext	parser/golang_parser.go	/^type IKeyedElementContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IKeyedElementContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IKeyedElementContext	typeref:typename:antlr.Parser	signature:()
parser.IKeyedElementContext.IsKeyedElementContext	parser/golang_parser.go	/^	IsKeyedElementContext()$/;"	n	interface:parser.IKeyedElementContext	signature:()
parser.ILabeledStmtContext	parser/golang_parser.go	/^type ILabeledStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ILabeledStmtContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ILabeledStmtContext	typeref:typename:antlr.Parser	signature:()
parser.ILabeledStmtContext.IsLabeledStmtContext	parser/golang_parser.go	/^	IsLabeledStmtContext()$/;"	n	interface:parser.ILabeledStmtContext	signature:()
parser.ILiteralContext	parser/golang_parser.go	/^type ILiteralContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ILiteralContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ILiteralContext	typeref:typename:antlr.Parser	signature:()
parser.ILiteralContext.IsLiteralContext	parser/golang_parser.go	/^	IsLiteralContext()$/;"	n	interface:parser.ILiteralContext	signature:()
parser.ILiteralTypeContext	parser/golang_parser.go	/^type ILiteralTypeContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ILiteralTypeContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ILiteralTypeContext	typeref:typename:antlr.Parser	signature:()
parser.ILiteralTypeContext.IsLiteralTypeContext	parser/golang_parser.go	/^	IsLiteralTypeContext()$/;"	n	interface:parser.ILiteralTypeContext	signature:()
parser.ILiteralValueContext	parser/golang_parser.go	/^type ILiteralValueContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ILiteralValueContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ILiteralValueContext	typeref:typename:antlr.Parser	signature:()
parser.ILiteralValueContext.IsLiteralValueContext	parser/golang_parser.go	/^	IsLiteralValueContext()$/;"	n	interface:parser.ILiteralValueContext	signature:()
parser.IMapTypeContext	parser/golang_parser.go	/^type IMapTypeContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IMapTypeContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IMapTypeContext	typeref:typename:antlr.Parser	signature:()
parser.IMapTypeContext.IsMapTypeContext	parser/golang_parser.go	/^	IsMapTypeContext()$/;"	n	interface:parser.IMapTypeContext	signature:()
parser.IMethodDeclContext	parser/golang_parser.go	/^type IMethodDeclContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IMethodDeclContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IMethodDeclContext	typeref:typename:antlr.Parser	signature:()
parser.IMethodDeclContext.IsMethodDeclContext	parser/golang_parser.go	/^	IsMethodDeclContext()$/;"	n	interface:parser.IMethodDeclContext	signature:()
parser.IMethodExprContext	parser/golang_parser.go	/^type IMethodExprContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IMethodExprContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IMethodExprContext	typeref:typename:antlr.Parser	signature:()
parser.IMethodExprContext.IsMethodExprContext	parser/golang_parser.go	/^	IsMethodExprContext()$/;"	n	interface:parser.IMethodExprContext	signature:()
parser.IMethodSpecContext	parser/golang_parser.go	/^type IMethodSpecContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IMethodSpecContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IMethodSpecContext	typeref:typename:antlr.Parser	signature:()
parser.IMethodSpecContext.IsMethodSpecContext	parser/golang_parser.go	/^	IsMethodSpecContext()$/;"	n	interface:parser.IMethodSpecContext	signature:()
parser.IOperandContext	parser/golang_parser.go	/^type IOperandContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IOperandContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IOperandContext	typeref:typename:antlr.Parser	signature:()
parser.IOperandContext.IsOperandContext	parser/golang_parser.go	/^	IsOperandContext()$/;"	n	interface:parser.IOperandContext	signature:()
parser.IOperandNameContext	parser/golang_parser.go	/^type IOperandNameContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IOperandNameContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IOperandNameContext	typeref:typename:antlr.Parser	signature:()
parser.IOperandNameContext.IsOperandNameContext	parser/golang_parser.go	/^	IsOperandNameContext()$/;"	n	interface:parser.IOperandNameContext	signature:()
parser.IPackageClauseContext	parser/golang_parser.go	/^type IPackageClauseContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IPackageClauseContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IPackageClauseContext	typeref:typename:antlr.Parser	signature:()
parser.IPackageClauseContext.IsPackageClauseContext	parser/golang_parser.go	/^	IsPackageClauseContext()$/;"	n	interface:parser.IPackageClauseContext	signature:()
parser.IParameterDeclContext	parser/golang_parser.go	/^type IParameterDeclContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IParameterDeclContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IParameterDeclContext	typeref:typename:antlr.Parser	signature:()
parser.IParameterDeclContext.IsParameterDeclContext	parser/golang_parser.go	/^	IsParameterDeclContext()$/;"	n	interface:parser.IParameterDeclContext	signature:()
parser.IParameterListContext	parser/golang_parser.go	/^type IParameterListContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IParameterListContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IParameterListContext	typeref:typename:antlr.Parser	signature:()
parser.IParameterListContext.IsParameterListContext	parser/golang_parser.go	/^	IsParameterListContext()$/;"	n	interface:parser.IParameterListContext	signature:()
parser.IParametersContext	parser/golang_parser.go	/^type IParametersContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IParametersContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IParametersContext	typeref:typename:antlr.Parser	signature:()
parser.IParametersContext.IsParametersContext	parser/golang_parser.go	/^	IsParametersContext()$/;"	n	interface:parser.IParametersContext	signature:()
parser.IPointerTypeContext	parser/golang_parser.go	/^type IPointerTypeContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IPointerTypeContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IPointerTypeContext	typeref:typename:antlr.Parser	signature:()
parser.IPointerTypeContext.IsPointerTypeContext	parser/golang_parser.go	/^	IsPointerTypeContext()$/;"	n	interface:parser.IPointerTypeContext	signature:()
parser.IPrimaryExprContext	parser/golang_parser.go	/^type IPrimaryExprContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IPrimaryExprContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IPrimaryExprContext	typeref:typename:antlr.Parser	signature:()
parser.IPrimaryExprContext.IsPrimaryExprContext	parser/golang_parser.go	/^	IsPrimaryExprContext()$/;"	n	interface:parser.IPrimaryExprContext	signature:()
parser.IQualifiedIdentContext	parser/golang_parser.go	/^type IQualifiedIdentContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IQualifiedIdentContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IQualifiedIdentContext	typeref:typename:antlr.Parser	signature:()
parser.IQualifiedIdentContext.IsQualifiedIdentContext	parser/golang_parser.go	/^	IsQualifiedIdentContext()$/;"	n	interface:parser.IQualifiedIdentContext	signature:()
parser.IRangeClauseContext	parser/golang_parser.go	/^type IRangeClauseContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IRangeClauseContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IRangeClauseContext	typeref:typename:antlr.Parser	signature:()
parser.IRangeClauseContext.IsRangeClauseContext	parser/golang_parser.go	/^	IsRangeClauseContext()$/;"	n	interface:parser.IRangeClauseContext	signature:()
parser.IReceiverContext	parser/golang_parser.go	/^type IReceiverContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IReceiverContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IReceiverContext	typeref:typename:antlr.Parser	signature:()
parser.IReceiverContext.IsReceiverContext	parser/golang_parser.go	/^	IsReceiverContext()$/;"	n	interface:parser.IReceiverContext	signature:()
parser.IReceiverTypeContext	parser/golang_parser.go	/^type IReceiverTypeContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IReceiverTypeContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IReceiverTypeContext	typeref:typename:antlr.Parser	signature:()
parser.IReceiverTypeContext.IsReceiverTypeContext	parser/golang_parser.go	/^	IsReceiverTypeContext()$/;"	n	interface:parser.IReceiverTypeContext	signature:()
parser.IRecvStmtContext	parser/golang_parser.go	/^type IRecvStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IRecvStmtContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IRecvStmtContext	typeref:typename:antlr.Parser	signature:()
parser.IRecvStmtContext.IsRecvStmtContext	parser/golang_parser.go	/^	IsRecvStmtContext()$/;"	n	interface:parser.IRecvStmtContext	signature:()
parser.IResultContext	parser/golang_parser.go	/^type IResultContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IResultContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IResultContext	typeref:typename:antlr.Parser	signature:()
parser.IResultContext.IsResultContext	parser/golang_parser.go	/^	IsResultContext()$/;"	n	interface:parser.IResultContext	signature:()
parser.IReturnStmtContext	parser/golang_parser.go	/^type IReturnStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IReturnStmtContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IReturnStmtContext	typeref:typename:antlr.Parser	signature:()
parser.IReturnStmtContext.IsReturnStmtContext	parser/golang_parser.go	/^	IsReturnStmtContext()$/;"	n	interface:parser.IReturnStmtContext	signature:()
parser.ISelectStmtContext	parser/golang_parser.go	/^type ISelectStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ISelectStmtContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ISelectStmtContext	typeref:typename:antlr.Parser	signature:()
parser.ISelectStmtContext.IsSelectStmtContext	parser/golang_parser.go	/^	IsSelectStmtContext()$/;"	n	interface:parser.ISelectStmtContext	signature:()
parser.ISelectorContext	parser/golang_parser.go	/^type ISelectorContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ISelectorContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ISelectorContext	typeref:typename:antlr.Parser	signature:()
parser.ISelectorContext.IsSelectorContext	parser/golang_parser.go	/^	IsSelectorContext()$/;"	n	interface:parser.ISelectorContext	signature:()
parser.ISendStmtContext	parser/golang_parser.go	/^type ISendStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ISendStmtContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ISendStmtContext	typeref:typename:antlr.Parser	signature:()
parser.ISendStmtContext.IsSendStmtContext	parser/golang_parser.go	/^	IsSendStmtContext()$/;"	n	interface:parser.ISendStmtContext	signature:()
parser.IShortVarDeclContext	parser/golang_parser.go	/^type IShortVarDeclContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IShortVarDeclContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IShortVarDeclContext	typeref:typename:antlr.Parser	signature:()
parser.IShortVarDeclContext.IsShortVarDeclContext	parser/golang_parser.go	/^	IsShortVarDeclContext()$/;"	n	interface:parser.IShortVarDeclContext	signature:()
parser.ISignatureContext	parser/golang_parser.go	/^type ISignatureContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ISignatureContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ISignatureContext	typeref:typename:antlr.Parser	signature:()
parser.ISignatureContext.IsSignatureContext	parser/golang_parser.go	/^	IsSignatureContext()$/;"	n	interface:parser.ISignatureContext	signature:()
parser.ISimpleStmtContext	parser/golang_parser.go	/^type ISimpleStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ISimpleStmtContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ISimpleStmtContext	typeref:typename:antlr.Parser	signature:()
parser.ISimpleStmtContext.IsSimpleStmtContext	parser/golang_parser.go	/^	IsSimpleStmtContext()$/;"	n	interface:parser.ISimpleStmtContext	signature:()
parser.ISliceContext	parser/golang_parser.go	/^type ISliceContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ISliceContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ISliceContext	typeref:typename:antlr.Parser	signature:()
parser.ISliceContext.IsSliceContext	parser/golang_parser.go	/^	IsSliceContext()$/;"	n	interface:parser.ISliceContext	signature:()
parser.ISliceTypeContext	parser/golang_parser.go	/^type ISliceTypeContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ISliceTypeContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ISliceTypeContext	typeref:typename:antlr.Parser	signature:()
parser.ISliceTypeContext.IsSliceTypeContext	parser/golang_parser.go	/^	IsSliceTypeContext()$/;"	n	interface:parser.ISliceTypeContext	signature:()
parser.ISourceFileContext	parser/golang_parser.go	/^type ISourceFileContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ISourceFileContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ISourceFileContext	typeref:typename:antlr.Parser	signature:()
parser.ISourceFileContext.IsSourceFileContext	parser/golang_parser.go	/^	IsSourceFileContext()$/;"	n	interface:parser.ISourceFileContext	signature:()
parser.IStatementContext	parser/golang_parser.go	/^type IStatementContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IStatementContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IStatementContext	typeref:typename:antlr.Parser	signature:()
parser.IStatementContext.IsStatementContext	parser/golang_parser.go	/^	IsStatementContext()$/;"	n	interface:parser.IStatementContext	signature:()
parser.IStatementListContext	parser/golang_parser.go	/^type IStatementListContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IStatementListContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IStatementListContext	typeref:typename:antlr.Parser	signature:()
parser.IStatementListContext.IsStatementListContext	parser/golang_parser.go	/^	IsStatementListContext()$/;"	n	interface:parser.IStatementListContext	signature:()
parser.IStructTypeContext	parser/golang_parser.go	/^type IStructTypeContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IStructTypeContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IStructTypeContext	typeref:typename:antlr.Parser	signature:()
parser.IStructTypeContext.IsStructTypeContext	parser/golang_parser.go	/^	IsStructTypeContext()$/;"	n	interface:parser.IStructTypeContext	signature:()
parser.ISwitchStmtContext	parser/golang_parser.go	/^type ISwitchStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ISwitchStmtContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ISwitchStmtContext	typeref:typename:antlr.Parser	signature:()
parser.ISwitchStmtContext.IsSwitchStmtContext	parser/golang_parser.go	/^	IsSwitchStmtContext()$/;"	n	interface:parser.ISwitchStmtContext	signature:()
parser.ITopLevelDeclContext	parser/golang_parser.go	/^type ITopLevelDeclContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ITopLevelDeclContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ITopLevelDeclContext	typeref:typename:antlr.Parser	signature:()
parser.ITopLevelDeclContext.IsTopLevelDeclContext	parser/golang_parser.go	/^	IsTopLevelDeclContext()$/;"	n	interface:parser.ITopLevelDeclContext	signature:()
parser.ITypeAssertionContext	parser/golang_parser.go	/^type ITypeAssertionContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ITypeAssertionContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ITypeAssertionContext	typeref:typename:antlr.Parser	signature:()
parser.ITypeAssertionContext.IsTypeAssertionContext	parser/golang_parser.go	/^	IsTypeAssertionContext()$/;"	n	interface:parser.ITypeAssertionContext	signature:()
parser.ITypeCaseClauseContext	parser/golang_parser.go	/^type ITypeCaseClauseContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ITypeCaseClauseContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ITypeCaseClauseContext	typeref:typename:antlr.Parser	signature:()
parser.ITypeCaseClauseContext.IsTypeCaseClauseContext	parser/golang_parser.go	/^	IsTypeCaseClauseContext()$/;"	n	interface:parser.ITypeCaseClauseContext	signature:()
parser.ITypeDeclContext	parser/golang_parser.go	/^type ITypeDeclContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ITypeDeclContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ITypeDeclContext	typeref:typename:antlr.Parser	signature:()
parser.ITypeDeclContext.IsTypeDeclContext	parser/golang_parser.go	/^	IsTypeDeclContext()$/;"	n	interface:parser.ITypeDeclContext	signature:()
parser.ITypeListContext	parser/golang_parser.go	/^type ITypeListContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ITypeListContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ITypeListContext	typeref:typename:antlr.Parser	signature:()
parser.ITypeListContext.IsTypeListContext	parser/golang_parser.go	/^	IsTypeListContext()$/;"	n	interface:parser.ITypeListContext	signature:()
parser.ITypeLitContext	parser/golang_parser.go	/^type ITypeLitContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ITypeLitContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ITypeLitContext	typeref:typename:antlr.Parser	signature:()
parser.ITypeLitContext.IsTypeLitContext	parser/golang_parser.go	/^	IsTypeLitContext()$/;"	n	interface:parser.ITypeLitContext	signature:()
parser.ITypeNameContext	parser/golang_parser.go	/^type ITypeNameContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ITypeNameContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ITypeNameContext	typeref:typename:antlr.Parser	signature:()
parser.ITypeNameContext.IsTypeNameContext	parser/golang_parser.go	/^	IsTypeNameContext()$/;"	n	interface:parser.ITypeNameContext	signature:()
parser.ITypeSpecContext	parser/golang_parser.go	/^type ITypeSpecContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ITypeSpecContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ITypeSpecContext	typeref:typename:antlr.Parser	signature:()
parser.ITypeSpecContext.IsTypeSpecContext	parser/golang_parser.go	/^	IsTypeSpecContext()$/;"	n	interface:parser.ITypeSpecContext	signature:()
parser.ITypeSwitchCaseContext	parser/golang_parser.go	/^type ITypeSwitchCaseContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ITypeSwitchCaseContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ITypeSwitchCaseContext	typeref:typename:antlr.Parser	signature:()
parser.ITypeSwitchCaseContext.IsTypeSwitchCaseContext	parser/golang_parser.go	/^	IsTypeSwitchCaseContext()$/;"	n	interface:parser.ITypeSwitchCaseContext	signature:()
parser.ITypeSwitchGuardContext	parser/golang_parser.go	/^type ITypeSwitchGuardContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ITypeSwitchGuardContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ITypeSwitchGuardContext	typeref:typename:antlr.Parser	signature:()
parser.ITypeSwitchGuardContext.IsTypeSwitchGuardContext	parser/golang_parser.go	/^	IsTypeSwitchGuardContext()$/;"	n	interface:parser.ITypeSwitchGuardContext	signature:()
parser.ITypeSwitchStmtContext	parser/golang_parser.go	/^type ITypeSwitchStmtContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.ITypeSwitchStmtContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.ITypeSwitchStmtContext	typeref:typename:antlr.Parser	signature:()
parser.ITypeSwitchStmtContext.IsTypeSwitchStmtContext	parser/golang_parser.go	/^	IsTypeSwitchStmtContext()$/;"	n	interface:parser.ITypeSwitchStmtContext	signature:()
parser.IType_Context	parser/golang_parser.go	/^type IType_Context interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IType_Context.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IType_Context	typeref:typename:antlr.Parser	signature:()
parser.IType_Context.IsType_Context	parser/golang_parser.go	/^	IsType_Context()$/;"	n	interface:parser.IType_Context	signature:()
parser.IUnaryExprContext	parser/golang_parser.go	/^type IUnaryExprContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IUnaryExprContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IUnaryExprContext	typeref:typename:antlr.Parser	signature:()
parser.IUnaryExprContext.IsUnaryExprContext	parser/golang_parser.go	/^	IsUnaryExprContext()$/;"	n	interface:parser.IUnaryExprContext	signature:()
parser.IVarDeclContext	parser/golang_parser.go	/^type IVarDeclContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IVarDeclContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IVarDeclContext	typeref:typename:antlr.Parser	signature:()
parser.IVarDeclContext.IsVarDeclContext	parser/golang_parser.go	/^	IsVarDeclContext()$/;"	n	interface:parser.IVarDeclContext	signature:()
parser.IVarSpecContext	parser/golang_parser.go	/^type IVarSpecContext interface {$/;"	i	package:parser	inherits:antlr.ParserRuleContext
parser.IVarSpecContext.GetParser	parser/golang_parser.go	/^	GetParser() antlr.Parser$/;"	n	interface:parser.IVarSpecContext	typeref:typename:antlr.Parser	signature:()
parser.IVarSpecContext.IsVarSpecContext	parser/golang_parser.go	/^	IsVarSpecContext()$/;"	n	interface:parser.IVarSpecContext	signature:()
parser.IdentifierListContext	parser/golang_parser.go	/^type IdentifierListContext struct {$/;"	s	package:parser
parser.IdentifierListContext.AllIDENTIFIER	parser/golang_parser.go	/^func (s *IdentifierListContext) AllIDENTIFIER() []antlr.TerminalNode {$/;"	f	struct:parser.IdentifierListContext	typeref:typename:[]antlr.TerminalNode	signature:()
parser.IdentifierListContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.IdentifierListContext	typeref:typename:*antlr.BaseParserRuleContext
parser.IdentifierListContext.EnterRule	parser/golang_parser.go	/^func (s *IdentifierListContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.IdentifierListContext	signature:(listener antlr.ParseTreeListener)
parser.IdentifierListContext.ExitRule	parser/golang_parser.go	/^func (s *IdentifierListContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.IdentifierListContext	signature:(listener antlr.ParseTreeListener)
parser.IdentifierListContext.GetParser	parser/golang_parser.go	/^func (s *IdentifierListContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.IdentifierListContext	typeref:typename:antlr.Parser	signature:()
parser.IdentifierListContext.GetRuleContext	parser/golang_parser.go	/^func (s *IdentifierListContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.IdentifierListContext	typeref:typename:antlr.RuleContext	signature:()
parser.IdentifierListContext.IDENTIFIER	parser/golang_parser.go	/^func (s *IdentifierListContext) IDENTIFIER(i int) antlr.TerminalNode {$/;"	f	struct:parser.IdentifierListContext	typeref:typename:antlr.TerminalNode	signature:(i int)
parser.IdentifierListContext.IsIdentifierListContext	parser/golang_parser.go	/^func (*IdentifierListContext) IsIdentifierListContext() {}$/;"	f	struct:parser.IdentifierListContext	signature:()
parser.IdentifierListContext.ToStringTree	parser/golang_parser.go	/^func (s *IdentifierListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string /;"	f	struct:parser.IdentifierListContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.IdentifierListContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.IdentifierListContext	typeref:typename:antlr.Parser
parser.IfStmtContext	parser/golang_parser.go	/^type IfStmtContext struct {$/;"	s	package:parser
parser.IfStmtContext.AllBlock	parser/golang_parser.go	/^func (s *IfStmtContext) AllBlock() []IBlockContext {$/;"	f	struct:parser.IfStmtContext	typeref:typename:[]IBlockContext	signature:()
parser.IfStmtContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.IfStmtContext	typeref:typename:*antlr.BaseParserRuleContext
parser.IfStmtContext.Block	parser/golang_parser.go	/^func (s *IfStmtContext) Block(i int) IBlockContext {$/;"	f	struct:parser.IfStmtContext	typeref:typename:IBlockContext	signature:(i int)
parser.IfStmtContext.Else	parser/golang_parser.go	/^func (s *IfStmtContext) Else() antlr.TerminalNode {$/;"	f	struct:parser.IfStmtContext	typeref:typename:antlr.TerminalNode	signature:()
parser.IfStmtContext.EnterRule	parser/golang_parser.go	/^func (s *IfStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.IfStmtContext	signature:(listener antlr.ParseTreeListener)
parser.IfStmtContext.ExitRule	parser/golang_parser.go	/^func (s *IfStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.IfStmtContext	signature:(listener antlr.ParseTreeListener)
parser.IfStmtContext.Expression	parser/golang_parser.go	/^func (s *IfStmtContext) Expression() IExpressionContext {$/;"	f	struct:parser.IfStmtContext	typeref:typename:IExpressionContext	signature:()
parser.IfStmtContext.GetParser	parser/golang_parser.go	/^func (s *IfStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.IfStmtContext	typeref:typename:antlr.Parser	signature:()
parser.IfStmtContext.GetRuleContext	parser/golang_parser.go	/^func (s *IfStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.IfStmtContext	typeref:typename:antlr.RuleContext	signature:()
parser.IfStmtContext.If	parser/golang_parser.go	/^func (s *IfStmtContext) If() antlr.TerminalNode {$/;"	f	struct:parser.IfStmtContext	typeref:typename:antlr.TerminalNode	signature:()
parser.IfStmtContext.IfStmt	parser/golang_parser.go	/^func (s *IfStmtContext) IfStmt() IIfStmtContext {$/;"	f	struct:parser.IfStmtContext	typeref:typename:IIfStmtContext	signature:()
parser.IfStmtContext.IsIfStmtContext	parser/golang_parser.go	/^func (*IfStmtContext) IsIfStmtContext() {}$/;"	f	struct:parser.IfStmtContext	signature:()
parser.IfStmtContext.SimpleStmt	parser/golang_parser.go	/^func (s *IfStmtContext) SimpleStmt() ISimpleStmtContext {$/;"	f	struct:parser.IfStmtContext	typeref:typename:ISimpleStmtContext	signature:()
parser.IfStmtContext.ToStringTree	parser/golang_parser.go	/^func (s *IfStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.IfStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.IfStmtContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.IfStmtContext	typeref:typename:antlr.Parser
parser.ImportDeclContext	parser/golang_parser.go	/^type ImportDeclContext struct {$/;"	s	package:parser
parser.ImportDeclContext.AllEos	parser/golang_parser.go	/^func (s *ImportDeclContext) AllEos() []IEosContext {$/;"	f	struct:parser.ImportDeclContext	typeref:typename:[]IEosContext	signature:()
parser.ImportDeclContext.AllImportSpec	parser/golang_parser.go	/^func (s *ImportDeclContext) AllImportSpec() []IImportSpecContext {$/;"	f	struct:parser.ImportDeclContext	typeref:typename:[]IImportSpecContext	signature:()
parser.ImportDeclContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ImportDeclContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ImportDeclContext.EnterRule	parser/golang_parser.go	/^func (s *ImportDeclContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ImportDeclContext	signature:(listener antlr.ParseTreeListener)
parser.ImportDeclContext.Eos	parser/golang_parser.go	/^func (s *ImportDeclContext) Eos(i int) IEosContext {$/;"	f	struct:parser.ImportDeclContext	typeref:typename:IEosContext	signature:(i int)
parser.ImportDeclContext.ExitRule	parser/golang_parser.go	/^func (s *ImportDeclContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ImportDeclContext	signature:(listener antlr.ParseTreeListener)
parser.ImportDeclContext.GetParser	parser/golang_parser.go	/^func (s *ImportDeclContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ImportDeclContext	typeref:typename:antlr.Parser	signature:()
parser.ImportDeclContext.GetRuleContext	parser/golang_parser.go	/^func (s *ImportDeclContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ImportDeclContext	typeref:typename:antlr.RuleContext	signature:()
parser.ImportDeclContext.Import	parser/golang_parser.go	/^func (s *ImportDeclContext) Import() antlr.TerminalNode {$/;"	f	struct:parser.ImportDeclContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ImportDeclContext.ImportSpec	parser/golang_parser.go	/^func (s *ImportDeclContext) ImportSpec(i int) IImportSpecContext {$/;"	f	struct:parser.ImportDeclContext	typeref:typename:IImportSpecContext	signature:(i int)
parser.ImportDeclContext.IsImportDeclContext	parser/golang_parser.go	/^func (*ImportDeclContext) IsImportDeclContext() {}$/;"	f	struct:parser.ImportDeclContext	signature:()
parser.ImportDeclContext.ToStringTree	parser/golang_parser.go	/^func (s *ImportDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ImportDeclContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ImportDeclContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ImportDeclContext	typeref:typename:antlr.Parser
parser.ImportPathContext	parser/golang_parser.go	/^type ImportPathContext struct {$/;"	s	package:parser
parser.ImportPathContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ImportPathContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ImportPathContext.EnterRule	parser/golang_parser.go	/^func (s *ImportPathContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ImportPathContext	signature:(listener antlr.ParseTreeListener)
parser.ImportPathContext.ExitRule	parser/golang_parser.go	/^func (s *ImportPathContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ImportPathContext	signature:(listener antlr.ParseTreeListener)
parser.ImportPathContext.GetParser	parser/golang_parser.go	/^func (s *ImportPathContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ImportPathContext	typeref:typename:antlr.Parser	signature:()
parser.ImportPathContext.GetRuleContext	parser/golang_parser.go	/^func (s *ImportPathContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ImportPathContext	typeref:typename:antlr.RuleContext	signature:()
parser.ImportPathContext.IsImportPathContext	parser/golang_parser.go	/^func (*ImportPathContext) IsImportPathContext() {}$/;"	f	struct:parser.ImportPathContext	signature:()
parser.ImportPathContext.STRING_LIT	parser/golang_parser.go	/^func (s *ImportPathContext) STRING_LIT() antlr.TerminalNode {$/;"	f	struct:parser.ImportPathContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ImportPathContext.ToStringTree	parser/golang_parser.go	/^func (s *ImportPathContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ImportPathContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ImportPathContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ImportPathContext	typeref:typename:antlr.Parser
parser.ImportSpecContext	parser/golang_parser.go	/^type ImportSpecContext struct {$/;"	s	package:parser
parser.ImportSpecContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ImportSpecContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ImportSpecContext.EnterRule	parser/golang_parser.go	/^func (s *ImportSpecContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ImportSpecContext	signature:(listener antlr.ParseTreeListener)
parser.ImportSpecContext.ExitRule	parser/golang_parser.go	/^func (s *ImportSpecContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ImportSpecContext	signature:(listener antlr.ParseTreeListener)
parser.ImportSpecContext.GetParser	parser/golang_parser.go	/^func (s *ImportSpecContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ImportSpecContext	typeref:typename:antlr.Parser	signature:()
parser.ImportSpecContext.GetRuleContext	parser/golang_parser.go	/^func (s *ImportSpecContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ImportSpecContext	typeref:typename:antlr.RuleContext	signature:()
parser.ImportSpecContext.IDENTIFIER	parser/golang_parser.go	/^func (s *ImportSpecContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.ImportSpecContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ImportSpecContext.ImportPath	parser/golang_parser.go	/^func (s *ImportSpecContext) ImportPath() IImportPathContext {$/;"	f	struct:parser.ImportSpecContext	typeref:typename:IImportPathContext	signature:()
parser.ImportSpecContext.IsImportSpecContext	parser/golang_parser.go	/^func (*ImportSpecContext) IsImportSpecContext() {}$/;"	f	struct:parser.ImportSpecContext	signature:()
parser.ImportSpecContext.ToStringTree	parser/golang_parser.go	/^func (s *ImportSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ImportSpecContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ImportSpecContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ImportSpecContext	typeref:typename:antlr.Parser
parser.IncDecStmtContext	parser/golang_parser.go	/^type IncDecStmtContext struct {$/;"	s	package:parser
parser.IncDecStmtContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.IncDecStmtContext	typeref:typename:*antlr.BaseParserRuleContext
parser.IncDecStmtContext.EnterRule	parser/golang_parser.go	/^func (s *IncDecStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.IncDecStmtContext	signature:(listener antlr.ParseTreeListener)
parser.IncDecStmtContext.ExitRule	parser/golang_parser.go	/^func (s *IncDecStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.IncDecStmtContext	signature:(listener antlr.ParseTreeListener)
parser.IncDecStmtContext.Expression	parser/golang_parser.go	/^func (s *IncDecStmtContext) Expression() IExpressionContext {$/;"	f	struct:parser.IncDecStmtContext	typeref:typename:IExpressionContext	signature:()
parser.IncDecStmtContext.GetParser	parser/golang_parser.go	/^func (s *IncDecStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.IncDecStmtContext	typeref:typename:antlr.Parser	signature:()
parser.IncDecStmtContext.GetRuleContext	parser/golang_parser.go	/^func (s *IncDecStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.IncDecStmtContext	typeref:typename:antlr.RuleContext	signature:()
parser.IncDecStmtContext.IsIncDecStmtContext	parser/golang_parser.go	/^func (*IncDecStmtContext) IsIncDecStmtContext() {}$/;"	f	struct:parser.IncDecStmtContext	signature:()
parser.IncDecStmtContext.MinusMinus	parser/golang_parser.go	/^func (s *IncDecStmtContext) MinusMinus() antlr.TerminalNode {$/;"	f	struct:parser.IncDecStmtContext	typeref:typename:antlr.TerminalNode	signature:()
parser.IncDecStmtContext.PlusPlus	parser/golang_parser.go	/^func (s *IncDecStmtContext) PlusPlus() antlr.TerminalNode {$/;"	f	struct:parser.IncDecStmtContext	typeref:typename:antlr.TerminalNode	signature:()
parser.IncDecStmtContext.ToStringTree	parser/golang_parser.go	/^func (s *IncDecStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.IncDecStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.IncDecStmtContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.IncDecStmtContext	typeref:typename:antlr.Parser
parser.IndexContext	parser/golang_parser.go	/^type IndexContext struct {$/;"	s	package:parser
parser.IndexContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.IndexContext	typeref:typename:*antlr.BaseParserRuleContext
parser.IndexContext.EnterRule	parser/golang_parser.go	/^func (s *IndexContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.IndexContext	signature:(listener antlr.ParseTreeListener)
parser.IndexContext.ExitRule	parser/golang_parser.go	/^func (s *IndexContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.IndexContext	signature:(listener antlr.ParseTreeListener)
parser.IndexContext.Expression	parser/golang_parser.go	/^func (s *IndexContext) Expression() IExpressionContext {$/;"	f	struct:parser.IndexContext	typeref:typename:IExpressionContext	signature:()
parser.IndexContext.GetParser	parser/golang_parser.go	/^func (s *IndexContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.IndexContext	typeref:typename:antlr.Parser	signature:()
parser.IndexContext.GetRuleContext	parser/golang_parser.go	/^func (s *IndexContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.IndexContext	typeref:typename:antlr.RuleContext	signature:()
parser.IndexContext.IsIndexContext	parser/golang_parser.go	/^func (*IndexContext) IsIndexContext() {}$/;"	f	struct:parser.IndexContext	signature:()
parser.IndexContext.ToStringTree	parser/golang_parser.go	/^func (s *IndexContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.IndexContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.IndexContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.IndexContext	typeref:typename:antlr.Parser
parser.InterfaceTypeContext	parser/golang_parser.go	/^type InterfaceTypeContext struct {$/;"	s	package:parser
parser.InterfaceTypeContext.AllEos	parser/golang_parser.go	/^func (s *InterfaceTypeContext) AllEos() []IEosContext {$/;"	f	struct:parser.InterfaceTypeContext	typeref:typename:[]IEosContext	signature:()
parser.InterfaceTypeContext.AllMethodSpec	parser/golang_parser.go	/^func (s *InterfaceTypeContext) AllMethodSpec() []IMethodSpecContext {$/;"	f	struct:parser.InterfaceTypeContext	typeref:typename:[]IMethodSpecContext	signature:()
parser.InterfaceTypeContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.InterfaceTypeContext	typeref:typename:*antlr.BaseParserRuleContext
parser.InterfaceTypeContext.EnterRule	parser/golang_parser.go	/^func (s *InterfaceTypeContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.InterfaceTypeContext	signature:(listener antlr.ParseTreeListener)
parser.InterfaceTypeContext.Eos	parser/golang_parser.go	/^func (s *InterfaceTypeContext) Eos(i int) IEosContext {$/;"	f	struct:parser.InterfaceTypeContext	typeref:typename:IEosContext	signature:(i int)
parser.InterfaceTypeContext.ExitRule	parser/golang_parser.go	/^func (s *InterfaceTypeContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.InterfaceTypeContext	signature:(listener antlr.ParseTreeListener)
parser.InterfaceTypeContext.GetParser	parser/golang_parser.go	/^func (s *InterfaceTypeContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.InterfaceTypeContext	typeref:typename:antlr.Parser	signature:()
parser.InterfaceTypeContext.GetRuleContext	parser/golang_parser.go	/^func (s *InterfaceTypeContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.InterfaceTypeContext	typeref:typename:antlr.RuleContext	signature:()
parser.InterfaceTypeContext.Interface	parser/golang_parser.go	/^func (s *InterfaceTypeContext) Interface() antlr.TerminalNode {$/;"	f	struct:parser.InterfaceTypeContext	typeref:typename:antlr.TerminalNode	signature:()
parser.InterfaceTypeContext.IsInterfaceTypeContext	parser/golang_parser.go	/^func (*InterfaceTypeContext) IsInterfaceTypeContext() {}$/;"	f	struct:parser.InterfaceTypeContext	signature:()
parser.InterfaceTypeContext.MethodSpec	parser/golang_parser.go	/^func (s *InterfaceTypeContext) MethodSpec(i int) IMethodSpecContext {$/;"	f	struct:parser.InterfaceTypeContext	typeref:typename:IMethodSpecContext	signature:(i int)
parser.InterfaceTypeContext.ToStringTree	parser/golang_parser.go	/^func (s *InterfaceTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.InterfaceTypeContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.InterfaceTypeContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.InterfaceTypeContext	typeref:typename:antlr.Parser
parser.KeyContext	parser/golang_parser.go	/^type KeyContext struct {$/;"	s	package:parser
parser.KeyContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.KeyContext	typeref:typename:*antlr.BaseParserRuleContext
parser.KeyContext.EnterRule	parser/golang_parser.go	/^func (s *KeyContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.KeyContext	signature:(listener antlr.ParseTreeListener)
parser.KeyContext.ExitRule	parser/golang_parser.go	/^func (s *KeyContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.KeyContext	signature:(listener antlr.ParseTreeListener)
parser.KeyContext.Expression	parser/golang_parser.go	/^func (s *KeyContext) Expression() IExpressionContext {$/;"	f	struct:parser.KeyContext	typeref:typename:IExpressionContext	signature:()
parser.KeyContext.GetParser	parser/golang_parser.go	/^func (s *KeyContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.KeyContext	typeref:typename:antlr.Parser	signature:()
parser.KeyContext.GetRuleContext	parser/golang_parser.go	/^func (s *KeyContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.KeyContext	typeref:typename:antlr.RuleContext	signature:()
parser.KeyContext.IDENTIFIER	parser/golang_parser.go	/^func (s *KeyContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.KeyContext	typeref:typename:antlr.TerminalNode	signature:()
parser.KeyContext.IsKeyContext	parser/golang_parser.go	/^func (*KeyContext) IsKeyContext() {}$/;"	f	struct:parser.KeyContext	signature:()
parser.KeyContext.LiteralValue	parser/golang_parser.go	/^func (s *KeyContext) LiteralValue() ILiteralValueContext {$/;"	f	struct:parser.KeyContext	typeref:typename:ILiteralValueContext	signature:()
parser.KeyContext.ToStringTree	parser/golang_parser.go	/^func (s *KeyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.KeyContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.KeyContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.KeyContext	typeref:typename:antlr.Parser
parser.KeyedElementContext	parser/golang_parser.go	/^type KeyedElementContext struct {$/;"	s	package:parser
parser.KeyedElementContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.KeyedElementContext	typeref:typename:*antlr.BaseParserRuleContext
parser.KeyedElementContext.Element	parser/golang_parser.go	/^func (s *KeyedElementContext) Element() IElementContext {$/;"	f	struct:parser.KeyedElementContext	typeref:typename:IElementContext	signature:()
parser.KeyedElementContext.EnterRule	parser/golang_parser.go	/^func (s *KeyedElementContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.KeyedElementContext	signature:(listener antlr.ParseTreeListener)
parser.KeyedElementContext.ExitRule	parser/golang_parser.go	/^func (s *KeyedElementContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.KeyedElementContext	signature:(listener antlr.ParseTreeListener)
parser.KeyedElementContext.GetParser	parser/golang_parser.go	/^func (s *KeyedElementContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.KeyedElementContext	typeref:typename:antlr.Parser	signature:()
parser.KeyedElementContext.GetRuleContext	parser/golang_parser.go	/^func (s *KeyedElementContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.KeyedElementContext	typeref:typename:antlr.RuleContext	signature:()
parser.KeyedElementContext.IsKeyedElementContext	parser/golang_parser.go	/^func (*KeyedElementContext) IsKeyedElementContext() {}$/;"	f	struct:parser.KeyedElementContext	signature:()
parser.KeyedElementContext.Key	parser/golang_parser.go	/^func (s *KeyedElementContext) Key() IKeyContext {$/;"	f	struct:parser.KeyedElementContext	typeref:typename:IKeyContext	signature:()
parser.KeyedElementContext.ToStringTree	parser/golang_parser.go	/^func (s *KeyedElementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.KeyedElementContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.KeyedElementContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.KeyedElementContext	typeref:typename:antlr.Parser
parser.LabeledStmtContext	parser/golang_parser.go	/^type LabeledStmtContext struct {$/;"	s	package:parser
parser.LabeledStmtContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.LabeledStmtContext	typeref:typename:*antlr.BaseParserRuleContext
parser.LabeledStmtContext.EnterRule	parser/golang_parser.go	/^func (s *LabeledStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.LabeledStmtContext	signature:(listener antlr.ParseTreeListener)
parser.LabeledStmtContext.ExitRule	parser/golang_parser.go	/^func (s *LabeledStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.LabeledStmtContext	signature:(listener antlr.ParseTreeListener)
parser.LabeledStmtContext.GetParser	parser/golang_parser.go	/^func (s *LabeledStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.LabeledStmtContext	typeref:typename:antlr.Parser	signature:()
parser.LabeledStmtContext.GetRuleContext	parser/golang_parser.go	/^func (s *LabeledStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.LabeledStmtContext	typeref:typename:antlr.RuleContext	signature:()
parser.LabeledStmtContext.IDENTIFIER	parser/golang_parser.go	/^func (s *LabeledStmtContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.LabeledStmtContext	typeref:typename:antlr.TerminalNode	signature:()
parser.LabeledStmtContext.IsLabeledStmtContext	parser/golang_parser.go	/^func (*LabeledStmtContext) IsLabeledStmtContext() {}$/;"	f	struct:parser.LabeledStmtContext	signature:()
parser.LabeledStmtContext.Statement	parser/golang_parser.go	/^func (s *LabeledStmtContext) Statement() IStatementContext {$/;"	f	struct:parser.LabeledStmtContext	typeref:typename:IStatementContext	signature:()
parser.LabeledStmtContext.ToStringTree	parser/golang_parser.go	/^func (s *LabeledStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.LabeledStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.LabeledStmtContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.LabeledStmtContext	typeref:typename:antlr.Parser
parser.LiteralContext	parser/golang_parser.go	/^type LiteralContext struct {$/;"	s	package:parser
parser.LiteralContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.LiteralContext	typeref:typename:*antlr.BaseParserRuleContext
parser.LiteralContext.BasicLit	parser/golang_parser.go	/^func (s *LiteralContext) BasicLit() IBasicLitContext {$/;"	f	struct:parser.LiteralContext	typeref:typename:IBasicLitContext	signature:()
parser.LiteralContext.CompositeLit	parser/golang_parser.go	/^func (s *LiteralContext) CompositeLit() ICompositeLitContext {$/;"	f	struct:parser.LiteralContext	typeref:typename:ICompositeLitContext	signature:()
parser.LiteralContext.EnterRule	parser/golang_parser.go	/^func (s *LiteralContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.LiteralContext	signature:(listener antlr.ParseTreeListener)
parser.LiteralContext.ExitRule	parser/golang_parser.go	/^func (s *LiteralContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.LiteralContext	signature:(listener antlr.ParseTreeListener)
parser.LiteralContext.FunctionLit	parser/golang_parser.go	/^func (s *LiteralContext) FunctionLit() IFunctionLitContext {$/;"	f	struct:parser.LiteralContext	typeref:typename:IFunctionLitContext	signature:()
parser.LiteralContext.GetParser	parser/golang_parser.go	/^func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.LiteralContext	typeref:typename:antlr.Parser	signature:()
parser.LiteralContext.GetRuleContext	parser/golang_parser.go	/^func (s *LiteralContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.LiteralContext	typeref:typename:antlr.RuleContext	signature:()
parser.LiteralContext.IsLiteralContext	parser/golang_parser.go	/^func (*LiteralContext) IsLiteralContext() {}$/;"	f	struct:parser.LiteralContext	signature:()
parser.LiteralContext.ToStringTree	parser/golang_parser.go	/^func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.LiteralContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.LiteralContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.LiteralContext	typeref:typename:antlr.Parser
parser.LiteralTypeContext	parser/golang_parser.go	/^type LiteralTypeContext struct {$/;"	s	package:parser
parser.LiteralTypeContext.ArrayType	parser/golang_parser.go	/^func (s *LiteralTypeContext) ArrayType() IArrayTypeContext {$/;"	f	struct:parser.LiteralTypeContext	typeref:typename:IArrayTypeContext	signature:()
parser.LiteralTypeContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.LiteralTypeContext	typeref:typename:*antlr.BaseParserRuleContext
parser.LiteralTypeContext.ElementType	parser/golang_parser.go	/^func (s *LiteralTypeContext) ElementType() IElementTypeContext {$/;"	f	struct:parser.LiteralTypeContext	typeref:typename:IElementTypeContext	signature:()
parser.LiteralTypeContext.Ellipsis	parser/golang_parser.go	/^func (s *LiteralTypeContext) Ellipsis() antlr.TerminalNode {$/;"	f	struct:parser.LiteralTypeContext	typeref:typename:antlr.TerminalNode	signature:()
parser.LiteralTypeContext.EnterRule	parser/golang_parser.go	/^func (s *LiteralTypeContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.LiteralTypeContext	signature:(listener antlr.ParseTreeListener)
parser.LiteralTypeContext.ExitRule	parser/golang_parser.go	/^func (s *LiteralTypeContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.LiteralTypeContext	signature:(listener antlr.ParseTreeListener)
parser.LiteralTypeContext.GetParser	parser/golang_parser.go	/^func (s *LiteralTypeContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.LiteralTypeContext	typeref:typename:antlr.Parser	signature:()
parser.LiteralTypeContext.GetRuleContext	parser/golang_parser.go	/^func (s *LiteralTypeContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.LiteralTypeContext	typeref:typename:antlr.RuleContext	signature:()
parser.LiteralTypeContext.IsLiteralTypeContext	parser/golang_parser.go	/^func (*LiteralTypeContext) IsLiteralTypeContext() {}$/;"	f	struct:parser.LiteralTypeContext	signature:()
parser.LiteralTypeContext.MapType	parser/golang_parser.go	/^func (s *LiteralTypeContext) MapType() IMapTypeContext {$/;"	f	struct:parser.LiteralTypeContext	typeref:typename:IMapTypeContext	signature:()
parser.LiteralTypeContext.SliceType	parser/golang_parser.go	/^func (s *LiteralTypeContext) SliceType() ISliceTypeContext {$/;"	f	struct:parser.LiteralTypeContext	typeref:typename:ISliceTypeContext	signature:()
parser.LiteralTypeContext.StructType	parser/golang_parser.go	/^func (s *LiteralTypeContext) StructType() IStructTypeContext {$/;"	f	struct:parser.LiteralTypeContext	typeref:typename:IStructTypeContext	signature:()
parser.LiteralTypeContext.ToStringTree	parser/golang_parser.go	/^func (s *LiteralTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.LiteralTypeContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.LiteralTypeContext.TypeName	parser/golang_parser.go	/^func (s *LiteralTypeContext) TypeName() ITypeNameContext {$/;"	f	struct:parser.LiteralTypeContext	typeref:typename:ITypeNameContext	signature:()
parser.LiteralTypeContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.LiteralTypeContext	typeref:typename:antlr.Parser
parser.LiteralValueContext	parser/golang_parser.go	/^type LiteralValueContext struct {$/;"	s	package:parser
parser.LiteralValueContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.LiteralValueContext	typeref:typename:*antlr.BaseParserRuleContext
parser.LiteralValueContext.ElementList	parser/golang_parser.go	/^func (s *LiteralValueContext) ElementList() IElementListContext {$/;"	f	struct:parser.LiteralValueContext	typeref:typename:IElementListContext	signature:()
parser.LiteralValueContext.EnterRule	parser/golang_parser.go	/^func (s *LiteralValueContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.LiteralValueContext	signature:(listener antlr.ParseTreeListener)
parser.LiteralValueContext.ExitRule	parser/golang_parser.go	/^func (s *LiteralValueContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.LiteralValueContext	signature:(listener antlr.ParseTreeListener)
parser.LiteralValueContext.GetParser	parser/golang_parser.go	/^func (s *LiteralValueContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.LiteralValueContext	typeref:typename:antlr.Parser	signature:()
parser.LiteralValueContext.GetRuleContext	parser/golang_parser.go	/^func (s *LiteralValueContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.LiteralValueContext	typeref:typename:antlr.RuleContext	signature:()
parser.LiteralValueContext.IsLiteralValueContext	parser/golang_parser.go	/^func (*LiteralValueContext) IsLiteralValueContext() {}$/;"	f	struct:parser.LiteralValueContext	signature:()
parser.LiteralValueContext.ToStringTree	parser/golang_parser.go	/^func (s *LiteralValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.LiteralValueContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.LiteralValueContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.LiteralValueContext	typeref:typename:antlr.Parser
parser.MapTypeContext	parser/golang_parser.go	/^type MapTypeContext struct {$/;"	s	package:parser
parser.MapTypeContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.MapTypeContext	typeref:typename:*antlr.BaseParserRuleContext
parser.MapTypeContext.ElementType	parser/golang_parser.go	/^func (s *MapTypeContext) ElementType() IElementTypeContext {$/;"	f	struct:parser.MapTypeContext	typeref:typename:IElementTypeContext	signature:()
parser.MapTypeContext.EnterRule	parser/golang_parser.go	/^func (s *MapTypeContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.MapTypeContext	signature:(listener antlr.ParseTreeListener)
parser.MapTypeContext.ExitRule	parser/golang_parser.go	/^func (s *MapTypeContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.MapTypeContext	signature:(listener antlr.ParseTreeListener)
parser.MapTypeContext.GetParser	parser/golang_parser.go	/^func (s *MapTypeContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.MapTypeContext	typeref:typename:antlr.Parser	signature:()
parser.MapTypeContext.GetRuleContext	parser/golang_parser.go	/^func (s *MapTypeContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.MapTypeContext	typeref:typename:antlr.RuleContext	signature:()
parser.MapTypeContext.IsMapTypeContext	parser/golang_parser.go	/^func (*MapTypeContext) IsMapTypeContext() {}$/;"	f	struct:parser.MapTypeContext	signature:()
parser.MapTypeContext.Map	parser/golang_parser.go	/^func (s *MapTypeContext) Map() antlr.TerminalNode {$/;"	f	struct:parser.MapTypeContext	typeref:typename:antlr.TerminalNode	signature:()
parser.MapTypeContext.ToStringTree	parser/golang_parser.go	/^func (s *MapTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.MapTypeContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.MapTypeContext.Type_	parser/golang_parser.go	/^func (s *MapTypeContext) Type_() IType_Context {$/;"	f	struct:parser.MapTypeContext	typeref:typename:IType_Context	signature:()
parser.MapTypeContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.MapTypeContext	typeref:typename:antlr.Parser
parser.MethodDeclContext	parser/golang_parser.go	/^type MethodDeclContext struct {$/;"	s	package:parser
parser.MethodDeclContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.MethodDeclContext	typeref:typename:*antlr.BaseParserRuleContext
parser.MethodDeclContext.EnterRule	parser/golang_parser.go	/^func (s *MethodDeclContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.MethodDeclContext	signature:(listener antlr.ParseTreeListener)
parser.MethodDeclContext.ExitRule	parser/golang_parser.go	/^func (s *MethodDeclContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.MethodDeclContext	signature:(listener antlr.ParseTreeListener)
parser.MethodDeclContext.Func	parser/golang_parser.go	/^func (s *MethodDeclContext) Func() antlr.TerminalNode {$/;"	f	struct:parser.MethodDeclContext	typeref:typename:antlr.TerminalNode	signature:()
parser.MethodDeclContext.Function	parser/golang_parser.go	/^func (s *MethodDeclContext) Function() IFunctionContext {$/;"	f	struct:parser.MethodDeclContext	typeref:typename:IFunctionContext	signature:()
parser.MethodDeclContext.GetParser	parser/golang_parser.go	/^func (s *MethodDeclContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.MethodDeclContext	typeref:typename:antlr.Parser	signature:()
parser.MethodDeclContext.GetRuleContext	parser/golang_parser.go	/^func (s *MethodDeclContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.MethodDeclContext	typeref:typename:antlr.RuleContext	signature:()
parser.MethodDeclContext.IDENTIFIER	parser/golang_parser.go	/^func (s *MethodDeclContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.MethodDeclContext	typeref:typename:antlr.TerminalNode	signature:()
parser.MethodDeclContext.IsMethodDeclContext	parser/golang_parser.go	/^func (*MethodDeclContext) IsMethodDeclContext() {}$/;"	f	struct:parser.MethodDeclContext	signature:()
parser.MethodDeclContext.Receiver	parser/golang_parser.go	/^func (s *MethodDeclContext) Receiver() IReceiverContext {$/;"	f	struct:parser.MethodDeclContext	typeref:typename:IReceiverContext	signature:()
parser.MethodDeclContext.Signature	parser/golang_parser.go	/^func (s *MethodDeclContext) Signature() ISignatureContext {$/;"	f	struct:parser.MethodDeclContext	typeref:typename:ISignatureContext	signature:()
parser.MethodDeclContext.ToStringTree	parser/golang_parser.go	/^func (s *MethodDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.MethodDeclContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.MethodDeclContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.MethodDeclContext	typeref:typename:antlr.Parser
parser.MethodExprContext	parser/golang_parser.go	/^type MethodExprContext struct {$/;"	s	package:parser
parser.MethodExprContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.MethodExprContext	typeref:typename:*antlr.BaseParserRuleContext
parser.MethodExprContext.EnterRule	parser/golang_parser.go	/^func (s *MethodExprContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.MethodExprContext	signature:(listener antlr.ParseTreeListener)
parser.MethodExprContext.ExitRule	parser/golang_parser.go	/^func (s *MethodExprContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.MethodExprContext	signature:(listener antlr.ParseTreeListener)
parser.MethodExprContext.GetParser	parser/golang_parser.go	/^func (s *MethodExprContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.MethodExprContext	typeref:typename:antlr.Parser	signature:()
parser.MethodExprContext.GetRuleContext	parser/golang_parser.go	/^func (s *MethodExprContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.MethodExprContext	typeref:typename:antlr.RuleContext	signature:()
parser.MethodExprContext.IDENTIFIER	parser/golang_parser.go	/^func (s *MethodExprContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.MethodExprContext	typeref:typename:antlr.TerminalNode	signature:()
parser.MethodExprContext.IsMethodExprContext	parser/golang_parser.go	/^func (*MethodExprContext) IsMethodExprContext() {}$/;"	f	struct:parser.MethodExprContext	signature:()
parser.MethodExprContext.ReceiverType	parser/golang_parser.go	/^func (s *MethodExprContext) ReceiverType() IReceiverTypeContext {$/;"	f	struct:parser.MethodExprContext	typeref:typename:IReceiverTypeContext	signature:()
parser.MethodExprContext.ToStringTree	parser/golang_parser.go	/^func (s *MethodExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.MethodExprContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.MethodExprContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.MethodExprContext	typeref:typename:antlr.Parser
parser.MethodSpecContext	parser/golang_parser.go	/^type MethodSpecContext struct {$/;"	s	package:parser
parser.MethodSpecContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.MethodSpecContext	typeref:typename:*antlr.BaseParserRuleContext
parser.MethodSpecContext.EnterRule	parser/golang_parser.go	/^func (s *MethodSpecContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.MethodSpecContext	signature:(listener antlr.ParseTreeListener)
parser.MethodSpecContext.ExitRule	parser/golang_parser.go	/^func (s *MethodSpecContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.MethodSpecContext	signature:(listener antlr.ParseTreeListener)
parser.MethodSpecContext.GetParser	parser/golang_parser.go	/^func (s *MethodSpecContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.MethodSpecContext	typeref:typename:antlr.Parser	signature:()
parser.MethodSpecContext.GetRuleContext	parser/golang_parser.go	/^func (s *MethodSpecContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.MethodSpecContext	typeref:typename:antlr.RuleContext	signature:()
parser.MethodSpecContext.IDENTIFIER	parser/golang_parser.go	/^func (s *MethodSpecContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.MethodSpecContext	typeref:typename:antlr.TerminalNode	signature:()
parser.MethodSpecContext.IsMethodSpecContext	parser/golang_parser.go	/^func (*MethodSpecContext) IsMethodSpecContext() {}$/;"	f	struct:parser.MethodSpecContext	signature:()
parser.MethodSpecContext.Parameters	parser/golang_parser.go	/^func (s *MethodSpecContext) Parameters() IParametersContext {$/;"	f	struct:parser.MethodSpecContext	typeref:typename:IParametersContext	signature:()
parser.MethodSpecContext.Result	parser/golang_parser.go	/^func (s *MethodSpecContext) Result() IResultContext {$/;"	f	struct:parser.MethodSpecContext	typeref:typename:IResultContext	signature:()
parser.MethodSpecContext.ToStringTree	parser/golang_parser.go	/^func (s *MethodSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.MethodSpecContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.MethodSpecContext.TypeName	parser/golang_parser.go	/^func (s *MethodSpecContext) TypeName() ITypeNameContext {$/;"	f	struct:parser.MethodSpecContext	typeref:typename:ITypeNameContext	signature:()
parser.MethodSpecContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.MethodSpecContext	typeref:typename:antlr.Parser
parser.NewAnonymousFieldContext	parser/golang_parser.go	/^func NewAnonymousFieldContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState/;"	f	package:parser	typeref:typename:*AnonymousFieldContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewArgumentsContext	parser/golang_parser.go	/^func NewArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*ArgumentsContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewArrayLengthContext	parser/golang_parser.go	/^func NewArrayLengthContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState in/;"	f	package:parser	typeref:typename:*ArrayLengthContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewArrayTypeContext	parser/golang_parser.go	/^func NewArrayTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*ArrayTypeContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewAssign_opContext	parser/golang_parser.go	/^func NewAssign_opContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*Assign_opContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewAssignmentContext	parser/golang_parser.go	/^func NewAssignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*AssignmentContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewBasicLitContext	parser/golang_parser.go	/^func NewBasicLitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) /;"	f	package:parser	typeref:typename:*BasicLitContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewBlockContext	parser/golang_parser.go	/^func NewBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Bl/;"	f	package:parser	typeref:typename:*BlockContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewBreakStmtContext	parser/golang_parser.go	/^func NewBreakStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*BreakStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewChannelTypeContext	parser/golang_parser.go	/^func NewChannelTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState in/;"	f	package:parser	typeref:typename:*ChannelTypeContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewCommCaseContext	parser/golang_parser.go	/^func NewCommCaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) /;"	f	package:parser	typeref:typename:*CommCaseContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewCommClauseContext	parser/golang_parser.go	/^func NewCommClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*CommClauseContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewCompositeLitContext	parser/golang_parser.go	/^func NewCompositeLitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState i/;"	f	package:parser	typeref:typename:*CompositeLitContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewConstDeclContext	parser/golang_parser.go	/^func NewConstDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*ConstDeclContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewConstSpecContext	parser/golang_parser.go	/^func NewConstSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*ConstSpecContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewContinueStmtContext	parser/golang_parser.go	/^func NewContinueStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState i/;"	f	package:parser	typeref:typename:*ContinueStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewConversionContext	parser/golang_parser.go	/^func NewConversionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*ConversionContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewDeclarationContext	parser/golang_parser.go	/^func NewDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState in/;"	f	package:parser	typeref:typename:*DeclarationContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewDeferStmtContext	parser/golang_parser.go	/^func NewDeferStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*DeferStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewElementContext	parser/golang_parser.go	/^func NewElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) */;"	f	package:parser	typeref:typename:*ElementContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewElementListContext	parser/golang_parser.go	/^func NewElementListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState in/;"	f	package:parser	typeref:typename:*ElementListContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewElementTypeContext	parser/golang_parser.go	/^func NewElementTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState in/;"	f	package:parser	typeref:typename:*ElementTypeContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewEmptyAnonymousFieldContext	parser/golang_parser.go	/^func NewEmptyAnonymousFieldContext() *AnonymousFieldContext {$/;"	f	package:parser	typeref:typename:*AnonymousFieldContext	signature:()
parser.NewEmptyArgumentsContext	parser/golang_parser.go	/^func NewEmptyArgumentsContext() *ArgumentsContext {$/;"	f	package:parser	typeref:typename:*ArgumentsContext	signature:()
parser.NewEmptyArrayLengthContext	parser/golang_parser.go	/^func NewEmptyArrayLengthContext() *ArrayLengthContext {$/;"	f	package:parser	typeref:typename:*ArrayLengthContext	signature:()
parser.NewEmptyArrayTypeContext	parser/golang_parser.go	/^func NewEmptyArrayTypeContext() *ArrayTypeContext {$/;"	f	package:parser	typeref:typename:*ArrayTypeContext	signature:()
parser.NewEmptyAssign_opContext	parser/golang_parser.go	/^func NewEmptyAssign_opContext() *Assign_opContext {$/;"	f	package:parser	typeref:typename:*Assign_opContext	signature:()
parser.NewEmptyAssignmentContext	parser/golang_parser.go	/^func NewEmptyAssignmentContext() *AssignmentContext {$/;"	f	package:parser	typeref:typename:*AssignmentContext	signature:()
parser.NewEmptyBasicLitContext	parser/golang_parser.go	/^func NewEmptyBasicLitContext() *BasicLitContext {$/;"	f	package:parser	typeref:typename:*BasicLitContext	signature:()
parser.NewEmptyBlockContext	parser/golang_parser.go	/^func NewEmptyBlockContext() *BlockContext {$/;"	f	package:parser	typeref:typename:*BlockContext	signature:()
parser.NewEmptyBreakStmtContext	parser/golang_parser.go	/^func NewEmptyBreakStmtContext() *BreakStmtContext {$/;"	f	package:parser	typeref:typename:*BreakStmtContext	signature:()
parser.NewEmptyChannelTypeContext	parser/golang_parser.go	/^func NewEmptyChannelTypeContext() *ChannelTypeContext {$/;"	f	package:parser	typeref:typename:*ChannelTypeContext	signature:()
parser.NewEmptyCommCaseContext	parser/golang_parser.go	/^func NewEmptyCommCaseContext() *CommCaseContext {$/;"	f	package:parser	typeref:typename:*CommCaseContext	signature:()
parser.NewEmptyCommClauseContext	parser/golang_parser.go	/^func NewEmptyCommClauseContext() *CommClauseContext {$/;"	f	package:parser	typeref:typename:*CommClauseContext	signature:()
parser.NewEmptyCompositeLitContext	parser/golang_parser.go	/^func NewEmptyCompositeLitContext() *CompositeLitContext {$/;"	f	package:parser	typeref:typename:*CompositeLitContext	signature:()
parser.NewEmptyConstDeclContext	parser/golang_parser.go	/^func NewEmptyConstDeclContext() *ConstDeclContext {$/;"	f	package:parser	typeref:typename:*ConstDeclContext	signature:()
parser.NewEmptyConstSpecContext	parser/golang_parser.go	/^func NewEmptyConstSpecContext() *ConstSpecContext {$/;"	f	package:parser	typeref:typename:*ConstSpecContext	signature:()
parser.NewEmptyContinueStmtContext	parser/golang_parser.go	/^func NewEmptyContinueStmtContext() *ContinueStmtContext {$/;"	f	package:parser	typeref:typename:*ContinueStmtContext	signature:()
parser.NewEmptyConversionContext	parser/golang_parser.go	/^func NewEmptyConversionContext() *ConversionContext {$/;"	f	package:parser	typeref:typename:*ConversionContext	signature:()
parser.NewEmptyDeclarationContext	parser/golang_parser.go	/^func NewEmptyDeclarationContext() *DeclarationContext {$/;"	f	package:parser	typeref:typename:*DeclarationContext	signature:()
parser.NewEmptyDeferStmtContext	parser/golang_parser.go	/^func NewEmptyDeferStmtContext() *DeferStmtContext {$/;"	f	package:parser	typeref:typename:*DeferStmtContext	signature:()
parser.NewEmptyElementContext	parser/golang_parser.go	/^func NewEmptyElementContext() *ElementContext {$/;"	f	package:parser	typeref:typename:*ElementContext	signature:()
parser.NewEmptyElementListContext	parser/golang_parser.go	/^func NewEmptyElementListContext() *ElementListContext {$/;"	f	package:parser	typeref:typename:*ElementListContext	signature:()
parser.NewEmptyElementTypeContext	parser/golang_parser.go	/^func NewEmptyElementTypeContext() *ElementTypeContext {$/;"	f	package:parser	typeref:typename:*ElementTypeContext	signature:()
parser.NewEmptyEmptyStmtContext	parser/golang_parser.go	/^func NewEmptyEmptyStmtContext() *EmptyStmtContext {$/;"	f	package:parser	typeref:typename:*EmptyStmtContext	signature:()
parser.NewEmptyEosContext	parser/golang_parser.go	/^func NewEmptyEosContext() *EosContext {$/;"	f	package:parser	typeref:typename:*EosContext	signature:()
parser.NewEmptyExprCaseClauseContext	parser/golang_parser.go	/^func NewEmptyExprCaseClauseContext() *ExprCaseClauseContext {$/;"	f	package:parser	typeref:typename:*ExprCaseClauseContext	signature:()
parser.NewEmptyExprSwitchCaseContext	parser/golang_parser.go	/^func NewEmptyExprSwitchCaseContext() *ExprSwitchCaseContext {$/;"	f	package:parser	typeref:typename:*ExprSwitchCaseContext	signature:()
parser.NewEmptyExprSwitchStmtContext	parser/golang_parser.go	/^func NewEmptyExprSwitchStmtContext() *ExprSwitchStmtContext {$/;"	f	package:parser	typeref:typename:*ExprSwitchStmtContext	signature:()
parser.NewEmptyExpressionContext	parser/golang_parser.go	/^func NewEmptyExpressionContext() *ExpressionContext {$/;"	f	package:parser	typeref:typename:*ExpressionContext	signature:()
parser.NewEmptyExpressionListContext	parser/golang_parser.go	/^func NewEmptyExpressionListContext() *ExpressionListContext {$/;"	f	package:parser	typeref:typename:*ExpressionListContext	signature:()
parser.NewEmptyExpressionStmtContext	parser/golang_parser.go	/^func NewEmptyExpressionStmtContext() *ExpressionStmtContext {$/;"	f	package:parser	typeref:typename:*ExpressionStmtContext	signature:()
parser.NewEmptyFallthroughStmtContext	parser/golang_parser.go	/^func NewEmptyFallthroughStmtContext() *FallthroughStmtContext {$/;"	f	package:parser	typeref:typename:*FallthroughStmtContext	signature:()
parser.NewEmptyFieldDeclContext	parser/golang_parser.go	/^func NewEmptyFieldDeclContext() *FieldDeclContext {$/;"	f	package:parser	typeref:typename:*FieldDeclContext	signature:()
parser.NewEmptyForClauseContext	parser/golang_parser.go	/^func NewEmptyForClauseContext() *ForClauseContext {$/;"	f	package:parser	typeref:typename:*ForClauseContext	signature:()
parser.NewEmptyForStmtContext	parser/golang_parser.go	/^func NewEmptyForStmtContext() *ForStmtContext {$/;"	f	package:parser	typeref:typename:*ForStmtContext	signature:()
parser.NewEmptyFunctionContext	parser/golang_parser.go	/^func NewEmptyFunctionContext() *FunctionContext {$/;"	f	package:parser	typeref:typename:*FunctionContext	signature:()
parser.NewEmptyFunctionDeclContext	parser/golang_parser.go	/^func NewEmptyFunctionDeclContext() *FunctionDeclContext {$/;"	f	package:parser	typeref:typename:*FunctionDeclContext	signature:()
parser.NewEmptyFunctionLitContext	parser/golang_parser.go	/^func NewEmptyFunctionLitContext() *FunctionLitContext {$/;"	f	package:parser	typeref:typename:*FunctionLitContext	signature:()
parser.NewEmptyFunctionTypeContext	parser/golang_parser.go	/^func NewEmptyFunctionTypeContext() *FunctionTypeContext {$/;"	f	package:parser	typeref:typename:*FunctionTypeContext	signature:()
parser.NewEmptyGoStmtContext	parser/golang_parser.go	/^func NewEmptyGoStmtContext() *GoStmtContext {$/;"	f	package:parser	typeref:typename:*GoStmtContext	signature:()
parser.NewEmptyGotoStmtContext	parser/golang_parser.go	/^func NewEmptyGotoStmtContext() *GotoStmtContext {$/;"	f	package:parser	typeref:typename:*GotoStmtContext	signature:()
parser.NewEmptyIdentifierListContext	parser/golang_parser.go	/^func NewEmptyIdentifierListContext() *IdentifierListContext {$/;"	f	package:parser	typeref:typename:*IdentifierListContext	signature:()
parser.NewEmptyIfStmtContext	parser/golang_parser.go	/^func NewEmptyIfStmtContext() *IfStmtContext {$/;"	f	package:parser	typeref:typename:*IfStmtContext	signature:()
parser.NewEmptyImportDeclContext	parser/golang_parser.go	/^func NewEmptyImportDeclContext() *ImportDeclContext {$/;"	f	package:parser	typeref:typename:*ImportDeclContext	signature:()
parser.NewEmptyImportPathContext	parser/golang_parser.go	/^func NewEmptyImportPathContext() *ImportPathContext {$/;"	f	package:parser	typeref:typename:*ImportPathContext	signature:()
parser.NewEmptyImportSpecContext	parser/golang_parser.go	/^func NewEmptyImportSpecContext() *ImportSpecContext {$/;"	f	package:parser	typeref:typename:*ImportSpecContext	signature:()
parser.NewEmptyIncDecStmtContext	parser/golang_parser.go	/^func NewEmptyIncDecStmtContext() *IncDecStmtContext {$/;"	f	package:parser	typeref:typename:*IncDecStmtContext	signature:()
parser.NewEmptyIndexContext	parser/golang_parser.go	/^func NewEmptyIndexContext() *IndexContext {$/;"	f	package:parser	typeref:typename:*IndexContext	signature:()
parser.NewEmptyInterfaceTypeContext	parser/golang_parser.go	/^func NewEmptyInterfaceTypeContext() *InterfaceTypeContext {$/;"	f	package:parser	typeref:typename:*InterfaceTypeContext	signature:()
parser.NewEmptyKeyContext	parser/golang_parser.go	/^func NewEmptyKeyContext() *KeyContext {$/;"	f	package:parser	typeref:typename:*KeyContext	signature:()
parser.NewEmptyKeyedElementContext	parser/golang_parser.go	/^func NewEmptyKeyedElementContext() *KeyedElementContext {$/;"	f	package:parser	typeref:typename:*KeyedElementContext	signature:()
parser.NewEmptyLabeledStmtContext	parser/golang_parser.go	/^func NewEmptyLabeledStmtContext() *LabeledStmtContext {$/;"	f	package:parser	typeref:typename:*LabeledStmtContext	signature:()
parser.NewEmptyLiteralContext	parser/golang_parser.go	/^func NewEmptyLiteralContext() *LiteralContext {$/;"	f	package:parser	typeref:typename:*LiteralContext	signature:()
parser.NewEmptyLiteralTypeContext	parser/golang_parser.go	/^func NewEmptyLiteralTypeContext() *LiteralTypeContext {$/;"	f	package:parser	typeref:typename:*LiteralTypeContext	signature:()
parser.NewEmptyLiteralValueContext	parser/golang_parser.go	/^func NewEmptyLiteralValueContext() *LiteralValueContext {$/;"	f	package:parser	typeref:typename:*LiteralValueContext	signature:()
parser.NewEmptyMapTypeContext	parser/golang_parser.go	/^func NewEmptyMapTypeContext() *MapTypeContext {$/;"	f	package:parser	typeref:typename:*MapTypeContext	signature:()
parser.NewEmptyMethodDeclContext	parser/golang_parser.go	/^func NewEmptyMethodDeclContext() *MethodDeclContext {$/;"	f	package:parser	typeref:typename:*MethodDeclContext	signature:()
parser.NewEmptyMethodExprContext	parser/golang_parser.go	/^func NewEmptyMethodExprContext() *MethodExprContext {$/;"	f	package:parser	typeref:typename:*MethodExprContext	signature:()
parser.NewEmptyMethodSpecContext	parser/golang_parser.go	/^func NewEmptyMethodSpecContext() *MethodSpecContext {$/;"	f	package:parser	typeref:typename:*MethodSpecContext	signature:()
parser.NewEmptyOperandContext	parser/golang_parser.go	/^func NewEmptyOperandContext() *OperandContext {$/;"	f	package:parser	typeref:typename:*OperandContext	signature:()
parser.NewEmptyOperandNameContext	parser/golang_parser.go	/^func NewEmptyOperandNameContext() *OperandNameContext {$/;"	f	package:parser	typeref:typename:*OperandNameContext	signature:()
parser.NewEmptyPackageClauseContext	parser/golang_parser.go	/^func NewEmptyPackageClauseContext() *PackageClauseContext {$/;"	f	package:parser	typeref:typename:*PackageClauseContext	signature:()
parser.NewEmptyParameterDeclContext	parser/golang_parser.go	/^func NewEmptyParameterDeclContext() *ParameterDeclContext {$/;"	f	package:parser	typeref:typename:*ParameterDeclContext	signature:()
parser.NewEmptyParameterListContext	parser/golang_parser.go	/^func NewEmptyParameterListContext() *ParameterListContext {$/;"	f	package:parser	typeref:typename:*ParameterListContext	signature:()
parser.NewEmptyParametersContext	parser/golang_parser.go	/^func NewEmptyParametersContext() *ParametersContext {$/;"	f	package:parser	typeref:typename:*ParametersContext	signature:()
parser.NewEmptyPointerTypeContext	parser/golang_parser.go	/^func NewEmptyPointerTypeContext() *PointerTypeContext {$/;"	f	package:parser	typeref:typename:*PointerTypeContext	signature:()
parser.NewEmptyPrimaryExprContext	parser/golang_parser.go	/^func NewEmptyPrimaryExprContext() *PrimaryExprContext {$/;"	f	package:parser	typeref:typename:*PrimaryExprContext	signature:()
parser.NewEmptyQualifiedIdentContext	parser/golang_parser.go	/^func NewEmptyQualifiedIdentContext() *QualifiedIdentContext {$/;"	f	package:parser	typeref:typename:*QualifiedIdentContext	signature:()
parser.NewEmptyRangeClauseContext	parser/golang_parser.go	/^func NewEmptyRangeClauseContext() *RangeClauseContext {$/;"	f	package:parser	typeref:typename:*RangeClauseContext	signature:()
parser.NewEmptyReceiverContext	parser/golang_parser.go	/^func NewEmptyReceiverContext() *ReceiverContext {$/;"	f	package:parser	typeref:typename:*ReceiverContext	signature:()
parser.NewEmptyReceiverTypeContext	parser/golang_parser.go	/^func NewEmptyReceiverTypeContext() *ReceiverTypeContext {$/;"	f	package:parser	typeref:typename:*ReceiverTypeContext	signature:()
parser.NewEmptyRecvStmtContext	parser/golang_parser.go	/^func NewEmptyRecvStmtContext() *RecvStmtContext {$/;"	f	package:parser	typeref:typename:*RecvStmtContext	signature:()
parser.NewEmptyResultContext	parser/golang_parser.go	/^func NewEmptyResultContext() *ResultContext {$/;"	f	package:parser	typeref:typename:*ResultContext	signature:()
parser.NewEmptyReturnStmtContext	parser/golang_parser.go	/^func NewEmptyReturnStmtContext() *ReturnStmtContext {$/;"	f	package:parser	typeref:typename:*ReturnStmtContext	signature:()
parser.NewEmptySelectStmtContext	parser/golang_parser.go	/^func NewEmptySelectStmtContext() *SelectStmtContext {$/;"	f	package:parser	typeref:typename:*SelectStmtContext	signature:()
parser.NewEmptySelectorContext	parser/golang_parser.go	/^func NewEmptySelectorContext() *SelectorContext {$/;"	f	package:parser	typeref:typename:*SelectorContext	signature:()
parser.NewEmptySendStmtContext	parser/golang_parser.go	/^func NewEmptySendStmtContext() *SendStmtContext {$/;"	f	package:parser	typeref:typename:*SendStmtContext	signature:()
parser.NewEmptyShortVarDeclContext	parser/golang_parser.go	/^func NewEmptyShortVarDeclContext() *ShortVarDeclContext {$/;"	f	package:parser	typeref:typename:*ShortVarDeclContext	signature:()
parser.NewEmptySignatureContext	parser/golang_parser.go	/^func NewEmptySignatureContext() *SignatureContext {$/;"	f	package:parser	typeref:typename:*SignatureContext	signature:()
parser.NewEmptySimpleStmtContext	parser/golang_parser.go	/^func NewEmptySimpleStmtContext() *SimpleStmtContext {$/;"	f	package:parser	typeref:typename:*SimpleStmtContext	signature:()
parser.NewEmptySliceContext	parser/golang_parser.go	/^func NewEmptySliceContext() *SliceContext {$/;"	f	package:parser	typeref:typename:*SliceContext	signature:()
parser.NewEmptySliceTypeContext	parser/golang_parser.go	/^func NewEmptySliceTypeContext() *SliceTypeContext {$/;"	f	package:parser	typeref:typename:*SliceTypeContext	signature:()
parser.NewEmptySourceFileContext	parser/golang_parser.go	/^func NewEmptySourceFileContext() *SourceFileContext {$/;"	f	package:parser	typeref:typename:*SourceFileContext	signature:()
parser.NewEmptyStatementContext	parser/golang_parser.go	/^func NewEmptyStatementContext() *StatementContext {$/;"	f	package:parser	typeref:typename:*StatementContext	signature:()
parser.NewEmptyStatementListContext	parser/golang_parser.go	/^func NewEmptyStatementListContext() *StatementListContext {$/;"	f	package:parser	typeref:typename:*StatementListContext	signature:()
parser.NewEmptyStmtContext	parser/golang_parser.go	/^func NewEmptyStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*EmptyStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewEmptyStructTypeContext	parser/golang_parser.go	/^func NewEmptyStructTypeContext() *StructTypeContext {$/;"	f	package:parser	typeref:typename:*StructTypeContext	signature:()
parser.NewEmptySwitchStmtContext	parser/golang_parser.go	/^func NewEmptySwitchStmtContext() *SwitchStmtContext {$/;"	f	package:parser	typeref:typename:*SwitchStmtContext	signature:()
parser.NewEmptyTopLevelDeclContext	parser/golang_parser.go	/^func NewEmptyTopLevelDeclContext() *TopLevelDeclContext {$/;"	f	package:parser	typeref:typename:*TopLevelDeclContext	signature:()
parser.NewEmptyTypeAssertionContext	parser/golang_parser.go	/^func NewEmptyTypeAssertionContext() *TypeAssertionContext {$/;"	f	package:parser	typeref:typename:*TypeAssertionContext	signature:()
parser.NewEmptyTypeCaseClauseContext	parser/golang_parser.go	/^func NewEmptyTypeCaseClauseContext() *TypeCaseClauseContext {$/;"	f	package:parser	typeref:typename:*TypeCaseClauseContext	signature:()
parser.NewEmptyTypeDeclContext	parser/golang_parser.go	/^func NewEmptyTypeDeclContext() *TypeDeclContext {$/;"	f	package:parser	typeref:typename:*TypeDeclContext	signature:()
parser.NewEmptyTypeListContext	parser/golang_parser.go	/^func NewEmptyTypeListContext() *TypeListContext {$/;"	f	package:parser	typeref:typename:*TypeListContext	signature:()
parser.NewEmptyTypeLitContext	parser/golang_parser.go	/^func NewEmptyTypeLitContext() *TypeLitContext {$/;"	f	package:parser	typeref:typename:*TypeLitContext	signature:()
parser.NewEmptyTypeNameContext	parser/golang_parser.go	/^func NewEmptyTypeNameContext() *TypeNameContext {$/;"	f	package:parser	typeref:typename:*TypeNameContext	signature:()
parser.NewEmptyTypeSpecContext	parser/golang_parser.go	/^func NewEmptyTypeSpecContext() *TypeSpecContext {$/;"	f	package:parser	typeref:typename:*TypeSpecContext	signature:()
parser.NewEmptyTypeSwitchCaseContext	parser/golang_parser.go	/^func NewEmptyTypeSwitchCaseContext() *TypeSwitchCaseContext {$/;"	f	package:parser	typeref:typename:*TypeSwitchCaseContext	signature:()
parser.NewEmptyTypeSwitchGuardContext	parser/golang_parser.go	/^func NewEmptyTypeSwitchGuardContext() *TypeSwitchGuardContext {$/;"	f	package:parser	typeref:typename:*TypeSwitchGuardContext	signature:()
parser.NewEmptyTypeSwitchStmtContext	parser/golang_parser.go	/^func NewEmptyTypeSwitchStmtContext() *TypeSwitchStmtContext {$/;"	f	package:parser	typeref:typename:*TypeSwitchStmtContext	signature:()
parser.NewEmptyType_Context	parser/golang_parser.go	/^func NewEmptyType_Context() *Type_Context {$/;"	f	package:parser	typeref:typename:*Type_Context	signature:()
parser.NewEmptyUnaryExprContext	parser/golang_parser.go	/^func NewEmptyUnaryExprContext() *UnaryExprContext {$/;"	f	package:parser	typeref:typename:*UnaryExprContext	signature:()
parser.NewEmptyVarDeclContext	parser/golang_parser.go	/^func NewEmptyVarDeclContext() *VarDeclContext {$/;"	f	package:parser	typeref:typename:*VarDeclContext	signature:()
parser.NewEmptyVarSpecContext	parser/golang_parser.go	/^func NewEmptyVarSpecContext() *VarSpecContext {$/;"	f	package:parser	typeref:typename:*VarSpecContext	signature:()
parser.NewEosContext	parser/golang_parser.go	/^func NewEosContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EosC/;"	f	package:parser	typeref:typename:*EosContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewExprCaseClauseContext	parser/golang_parser.go	/^func NewExprCaseClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState/;"	f	package:parser	typeref:typename:*ExprCaseClauseContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewExprSwitchCaseContext	parser/golang_parser.go	/^func NewExprSwitchCaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState/;"	f	package:parser	typeref:typename:*ExprSwitchCaseContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewExprSwitchStmtContext	parser/golang_parser.go	/^func NewExprSwitchStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState/;"	f	package:parser	typeref:typename:*ExprSwitchStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewExpressionContext	parser/golang_parser.go	/^func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*ExpressionContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewExpressionListContext	parser/golang_parser.go	/^func NewExpressionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState/;"	f	package:parser	typeref:typename:*ExpressionListContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewExpressionStmtContext	parser/golang_parser.go	/^func NewExpressionStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState/;"	f	package:parser	typeref:typename:*ExpressionStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewFallthroughStmtContext	parser/golang_parser.go	/^func NewFallthroughStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingStat/;"	f	package:parser	typeref:typename:*FallthroughStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewFieldDeclContext	parser/golang_parser.go	/^func NewFieldDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*FieldDeclContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewForClauseContext	parser/golang_parser.go	/^func NewForClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*ForClauseContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewForStmtContext	parser/golang_parser.go	/^func NewForStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) */;"	f	package:parser	typeref:typename:*ForStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewFunctionContext	parser/golang_parser.go	/^func NewFunctionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) /;"	f	package:parser	typeref:typename:*FunctionContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewFunctionDeclContext	parser/golang_parser.go	/^func NewFunctionDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState i/;"	f	package:parser	typeref:typename:*FunctionDeclContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewFunctionLitContext	parser/golang_parser.go	/^func NewFunctionLitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState in/;"	f	package:parser	typeref:typename:*FunctionLitContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewFunctionTypeContext	parser/golang_parser.go	/^func NewFunctionTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState i/;"	f	package:parser	typeref:typename:*FunctionTypeContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewGoStmtContext	parser/golang_parser.go	/^func NewGoStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *G/;"	f	package:parser	typeref:typename:*GoStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewGolangLexer	parser/golang_lexer.go	/^func NewGolangLexer(input antlr.CharStream) *GolangLexer {$/;"	f	package:parser	typeref:typename:*GolangLexer	signature:(input antlr.CharStream)
parser.NewGolangParser	parser/golang_parser.go	/^func NewGolangParser(input antlr.TokenStream) *GolangParser {$/;"	f	package:parser	typeref:typename:*GolangParser	signature:(input antlr.TokenStream)
parser.NewGotoStmtContext	parser/golang_parser.go	/^func NewGotoStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) /;"	f	package:parser	typeref:typename:*GotoStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewIdentifierListContext	parser/golang_parser.go	/^func NewIdentifierListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState/;"	f	package:parser	typeref:typename:*IdentifierListContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewIfStmtContext	parser/golang_parser.go	/^func NewIfStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *I/;"	f	package:parser	typeref:typename:*IfStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewImportDeclContext	parser/golang_parser.go	/^func NewImportDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*ImportDeclContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewImportPathContext	parser/golang_parser.go	/^func NewImportPathContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*ImportPathContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewImportSpecContext	parser/golang_parser.go	/^func NewImportSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*ImportSpecContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewIncDecStmtContext	parser/golang_parser.go	/^func NewIncDecStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*IncDecStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewIndexContext	parser/golang_parser.go	/^func NewIndexContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *In/;"	f	package:parser	typeref:typename:*IndexContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewInterfaceTypeContext	parser/golang_parser.go	/^func NewInterfaceTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState /;"	f	package:parser	typeref:typename:*InterfaceTypeContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewKeyContext	parser/golang_parser.go	/^func NewKeyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeyC/;"	f	package:parser	typeref:typename:*KeyContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewKeyedElementContext	parser/golang_parser.go	/^func NewKeyedElementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState i/;"	f	package:parser	typeref:typename:*KeyedElementContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewLabeledStmtContext	parser/golang_parser.go	/^func NewLabeledStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState in/;"	f	package:parser	typeref:typename:*LabeledStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewLiteralContext	parser/golang_parser.go	/^func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) */;"	f	package:parser	typeref:typename:*LiteralContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewLiteralTypeContext	parser/golang_parser.go	/^func NewLiteralTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState in/;"	f	package:parser	typeref:typename:*LiteralTypeContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewLiteralValueContext	parser/golang_parser.go	/^func NewLiteralValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState i/;"	f	package:parser	typeref:typename:*LiteralValueContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewMapTypeContext	parser/golang_parser.go	/^func NewMapTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) */;"	f	package:parser	typeref:typename:*MapTypeContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewMethodDeclContext	parser/golang_parser.go	/^func NewMethodDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*MethodDeclContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewMethodExprContext	parser/golang_parser.go	/^func NewMethodExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*MethodExprContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewMethodSpecContext	parser/golang_parser.go	/^func NewMethodSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*MethodSpecContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewOperandContext	parser/golang_parser.go	/^func NewOperandContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) */;"	f	package:parser	typeref:typename:*OperandContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewOperandNameContext	parser/golang_parser.go	/^func NewOperandNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState in/;"	f	package:parser	typeref:typename:*OperandNameContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewPackageClauseContext	parser/golang_parser.go	/^func NewPackageClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState /;"	f	package:parser	typeref:typename:*PackageClauseContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewParameterDeclContext	parser/golang_parser.go	/^func NewParameterDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState /;"	f	package:parser	typeref:typename:*ParameterDeclContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewParameterListContext	parser/golang_parser.go	/^func NewParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState /;"	f	package:parser	typeref:typename:*ParameterListContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewParametersContext	parser/golang_parser.go	/^func NewParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*ParametersContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewPointerTypeContext	parser/golang_parser.go	/^func NewPointerTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState in/;"	f	package:parser	typeref:typename:*PointerTypeContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewPrimaryExprContext	parser/golang_parser.go	/^func NewPrimaryExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState in/;"	f	package:parser	typeref:typename:*PrimaryExprContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewQualifiedIdentContext	parser/golang_parser.go	/^func NewQualifiedIdentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState/;"	f	package:parser	typeref:typename:*QualifiedIdentContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewRangeClauseContext	parser/golang_parser.go	/^func NewRangeClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState in/;"	f	package:parser	typeref:typename:*RangeClauseContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewReceiverContext	parser/golang_parser.go	/^func NewReceiverContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) /;"	f	package:parser	typeref:typename:*ReceiverContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewReceiverTypeContext	parser/golang_parser.go	/^func NewReceiverTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState i/;"	f	package:parser	typeref:typename:*ReceiverTypeContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewRecvStmtContext	parser/golang_parser.go	/^func NewRecvStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) /;"	f	package:parser	typeref:typename:*RecvStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewResultContext	parser/golang_parser.go	/^func NewResultContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *R/;"	f	package:parser	typeref:typename:*ResultContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewReturnStmtContext	parser/golang_parser.go	/^func NewReturnStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*ReturnStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewSelectStmtContext	parser/golang_parser.go	/^func NewSelectStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*SelectStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewSelectorContext	parser/golang_parser.go	/^func NewSelectorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) /;"	f	package:parser	typeref:typename:*SelectorContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewSendStmtContext	parser/golang_parser.go	/^func NewSendStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) /;"	f	package:parser	typeref:typename:*SendStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewShortVarDeclContext	parser/golang_parser.go	/^func NewShortVarDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState i/;"	f	package:parser	typeref:typename:*ShortVarDeclContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewSignatureContext	parser/golang_parser.go	/^func NewSignatureContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*SignatureContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewSimpleStmtContext	parser/golang_parser.go	/^func NewSimpleStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*SimpleStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewSliceContext	parser/golang_parser.go	/^func NewSliceContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Sl/;"	f	package:parser	typeref:typename:*SliceContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewSliceTypeContext	parser/golang_parser.go	/^func NewSliceTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*SliceTypeContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewSourceFileContext	parser/golang_parser.go	/^func NewSourceFileContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*SourceFileContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewStatementContext	parser/golang_parser.go	/^func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*StatementContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewStatementListContext	parser/golang_parser.go	/^func NewStatementListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState /;"	f	package:parser	typeref:typename:*StatementListContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewStructTypeContext	parser/golang_parser.go	/^func NewStructTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*StructTypeContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewSwitchStmtContext	parser/golang_parser.go	/^func NewSwitchStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int/;"	f	package:parser	typeref:typename:*SwitchStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewTopLevelDeclContext	parser/golang_parser.go	/^func NewTopLevelDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState i/;"	f	package:parser	typeref:typename:*TopLevelDeclContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewTypeAssertionContext	parser/golang_parser.go	/^func NewTypeAssertionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState /;"	f	package:parser	typeref:typename:*TypeAssertionContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewTypeCaseClauseContext	parser/golang_parser.go	/^func NewTypeCaseClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState/;"	f	package:parser	typeref:typename:*TypeCaseClauseContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewTypeDeclContext	parser/golang_parser.go	/^func NewTypeDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) /;"	f	package:parser	typeref:typename:*TypeDeclContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewTypeListContext	parser/golang_parser.go	/^func NewTypeListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) /;"	f	package:parser	typeref:typename:*TypeListContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewTypeLitContext	parser/golang_parser.go	/^func NewTypeLitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) */;"	f	package:parser	typeref:typename:*TypeLitContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewTypeNameContext	parser/golang_parser.go	/^func NewTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) /;"	f	package:parser	typeref:typename:*TypeNameContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewTypeSpecContext	parser/golang_parser.go	/^func NewTypeSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) /;"	f	package:parser	typeref:typename:*TypeSpecContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewTypeSwitchCaseContext	parser/golang_parser.go	/^func NewTypeSwitchCaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState/;"	f	package:parser	typeref:typename:*TypeSwitchCaseContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewTypeSwitchGuardContext	parser/golang_parser.go	/^func NewTypeSwitchGuardContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingStat/;"	f	package:parser	typeref:typename:*TypeSwitchGuardContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewTypeSwitchStmtContext	parser/golang_parser.go	/^func NewTypeSwitchStmtContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState/;"	f	package:parser	typeref:typename:*TypeSwitchStmtContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewType_Context	parser/golang_parser.go	/^func NewType_Context(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *Ty/;"	f	package:parser	typeref:typename:*Type_Context	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewUnaryExprContext	parser/golang_parser.go	/^func NewUnaryExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)/;"	f	package:parser	typeref:typename:*UnaryExprContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewVarDeclContext	parser/golang_parser.go	/^func NewVarDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) */;"	f	package:parser	typeref:typename:*VarDeclContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.NewVarSpecContext	parser/golang_parser.go	/^func NewVarSpecContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) */;"	f	package:parser	typeref:typename:*VarSpecContext	signature:(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int)
parser.OperandContext	parser/golang_parser.go	/^type OperandContext struct {$/;"	s	package:parser
parser.OperandContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.OperandContext	typeref:typename:*antlr.BaseParserRuleContext
parser.OperandContext.EnterRule	parser/golang_parser.go	/^func (s *OperandContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.OperandContext	signature:(listener antlr.ParseTreeListener)
parser.OperandContext.ExitRule	parser/golang_parser.go	/^func (s *OperandContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.OperandContext	signature:(listener antlr.ParseTreeListener)
parser.OperandContext.Expression	parser/golang_parser.go	/^func (s *OperandContext) Expression() IExpressionContext {$/;"	f	struct:parser.OperandContext	typeref:typename:IExpressionContext	signature:()
parser.OperandContext.GetParser	parser/golang_parser.go	/^func (s *OperandContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.OperandContext	typeref:typename:antlr.Parser	signature:()
parser.OperandContext.GetRuleContext	parser/golang_parser.go	/^func (s *OperandContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.OperandContext	typeref:typename:antlr.RuleContext	signature:()
parser.OperandContext.IsOperandContext	parser/golang_parser.go	/^func (*OperandContext) IsOperandContext() {}$/;"	f	struct:parser.OperandContext	signature:()
parser.OperandContext.Literal	parser/golang_parser.go	/^func (s *OperandContext) Literal() ILiteralContext {$/;"	f	struct:parser.OperandContext	typeref:typename:ILiteralContext	signature:()
parser.OperandContext.MethodExpr	parser/golang_parser.go	/^func (s *OperandContext) MethodExpr() IMethodExprContext {$/;"	f	struct:parser.OperandContext	typeref:typename:IMethodExprContext	signature:()
parser.OperandContext.OperandName	parser/golang_parser.go	/^func (s *OperandContext) OperandName() IOperandNameContext {$/;"	f	struct:parser.OperandContext	typeref:typename:IOperandNameContext	signature:()
parser.OperandContext.ToStringTree	parser/golang_parser.go	/^func (s *OperandContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.OperandContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.OperandContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.OperandContext	typeref:typename:antlr.Parser
parser.OperandNameContext	parser/golang_parser.go	/^type OperandNameContext struct {$/;"	s	package:parser
parser.OperandNameContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.OperandNameContext	typeref:typename:*antlr.BaseParserRuleContext
parser.OperandNameContext.EnterRule	parser/golang_parser.go	/^func (s *OperandNameContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.OperandNameContext	signature:(listener antlr.ParseTreeListener)
parser.OperandNameContext.ExitRule	parser/golang_parser.go	/^func (s *OperandNameContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.OperandNameContext	signature:(listener antlr.ParseTreeListener)
parser.OperandNameContext.GetParser	parser/golang_parser.go	/^func (s *OperandNameContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.OperandNameContext	typeref:typename:antlr.Parser	signature:()
parser.OperandNameContext.GetRuleContext	parser/golang_parser.go	/^func (s *OperandNameContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.OperandNameContext	typeref:typename:antlr.RuleContext	signature:()
parser.OperandNameContext.IDENTIFIER	parser/golang_parser.go	/^func (s *OperandNameContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.OperandNameContext	typeref:typename:antlr.TerminalNode	signature:()
parser.OperandNameContext.IsOperandNameContext	parser/golang_parser.go	/^func (*OperandNameContext) IsOperandNameContext() {}$/;"	f	struct:parser.OperandNameContext	signature:()
parser.OperandNameContext.QualifiedIdent	parser/golang_parser.go	/^func (s *OperandNameContext) QualifiedIdent() IQualifiedIdentContext {$/;"	f	struct:parser.OperandNameContext	typeref:typename:IQualifiedIdentContext	signature:()
parser.OperandNameContext.ToStringTree	parser/golang_parser.go	/^func (s *OperandNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.OperandNameContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.OperandNameContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.OperandNameContext	typeref:typename:antlr.Parser
parser.PackageClauseContext	parser/golang_parser.go	/^type PackageClauseContext struct {$/;"	s	package:parser
parser.PackageClauseContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.PackageClauseContext	typeref:typename:*antlr.BaseParserRuleContext
parser.PackageClauseContext.EnterRule	parser/golang_parser.go	/^func (s *PackageClauseContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.PackageClauseContext	signature:(listener antlr.ParseTreeListener)
parser.PackageClauseContext.ExitRule	parser/golang_parser.go	/^func (s *PackageClauseContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.PackageClauseContext	signature:(listener antlr.ParseTreeListener)
parser.PackageClauseContext.GetParser	parser/golang_parser.go	/^func (s *PackageClauseContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.PackageClauseContext	typeref:typename:antlr.Parser	signature:()
parser.PackageClauseContext.GetRuleContext	parser/golang_parser.go	/^func (s *PackageClauseContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.PackageClauseContext	typeref:typename:antlr.RuleContext	signature:()
parser.PackageClauseContext.IDENTIFIER	parser/golang_parser.go	/^func (s *PackageClauseContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.PackageClauseContext	typeref:typename:antlr.TerminalNode	signature:()
parser.PackageClauseContext.IsPackageClauseContext	parser/golang_parser.go	/^func (*PackageClauseContext) IsPackageClauseContext() {}$/;"	f	struct:parser.PackageClauseContext	signature:()
parser.PackageClauseContext.Package	parser/golang_parser.go	/^func (s *PackageClauseContext) Package() antlr.TerminalNode {$/;"	f	struct:parser.PackageClauseContext	typeref:typename:antlr.TerminalNode	signature:()
parser.PackageClauseContext.ToStringTree	parser/golang_parser.go	/^func (s *PackageClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.PackageClauseContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.PackageClauseContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.PackageClauseContext	typeref:typename:antlr.Parser
parser.ParameterDeclContext	parser/golang_parser.go	/^type ParameterDeclContext struct {$/;"	s	package:parser
parser.ParameterDeclContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ParameterDeclContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ParameterDeclContext.Ellipsis	parser/golang_parser.go	/^func (s *ParameterDeclContext) Ellipsis() antlr.TerminalNode {$/;"	f	struct:parser.ParameterDeclContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ParameterDeclContext.EnterRule	parser/golang_parser.go	/^func (s *ParameterDeclContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ParameterDeclContext	signature:(listener antlr.ParseTreeListener)
parser.ParameterDeclContext.ExitRule	parser/golang_parser.go	/^func (s *ParameterDeclContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ParameterDeclContext	signature:(listener antlr.ParseTreeListener)
parser.ParameterDeclContext.GetParser	parser/golang_parser.go	/^func (s *ParameterDeclContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ParameterDeclContext	typeref:typename:antlr.Parser	signature:()
parser.ParameterDeclContext.GetRuleContext	parser/golang_parser.go	/^func (s *ParameterDeclContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ParameterDeclContext	typeref:typename:antlr.RuleContext	signature:()
parser.ParameterDeclContext.IdentifierList	parser/golang_parser.go	/^func (s *ParameterDeclContext) IdentifierList() IIdentifierListContext {$/;"	f	struct:parser.ParameterDeclContext	typeref:typename:IIdentifierListContext	signature:()
parser.ParameterDeclContext.IsParameterDeclContext	parser/golang_parser.go	/^func (*ParameterDeclContext) IsParameterDeclContext() {}$/;"	f	struct:parser.ParameterDeclContext	signature:()
parser.ParameterDeclContext.ToStringTree	parser/golang_parser.go	/^func (s *ParameterDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ParameterDeclContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ParameterDeclContext.Type_	parser/golang_parser.go	/^func (s *ParameterDeclContext) Type_() IType_Context {$/;"	f	struct:parser.ParameterDeclContext	typeref:typename:IType_Context	signature:()
parser.ParameterDeclContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ParameterDeclContext	typeref:typename:antlr.Parser
parser.ParameterListContext	parser/golang_parser.go	/^type ParameterListContext struct {$/;"	s	package:parser
parser.ParameterListContext.AllParameterDecl	parser/golang_parser.go	/^func (s *ParameterListContext) AllParameterDecl() []IParameterDeclContext {$/;"	f	struct:parser.ParameterListContext	typeref:typename:[]IParameterDeclContext	signature:()
parser.ParameterListContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ParameterListContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ParameterListContext.EnterRule	parser/golang_parser.go	/^func (s *ParameterListContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ParameterListContext	signature:(listener antlr.ParseTreeListener)
parser.ParameterListContext.ExitRule	parser/golang_parser.go	/^func (s *ParameterListContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ParameterListContext	signature:(listener antlr.ParseTreeListener)
parser.ParameterListContext.GetParser	parser/golang_parser.go	/^func (s *ParameterListContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ParameterListContext	typeref:typename:antlr.Parser	signature:()
parser.ParameterListContext.GetRuleContext	parser/golang_parser.go	/^func (s *ParameterListContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ParameterListContext	typeref:typename:antlr.RuleContext	signature:()
parser.ParameterListContext.IsParameterListContext	parser/golang_parser.go	/^func (*ParameterListContext) IsParameterListContext() {}$/;"	f	struct:parser.ParameterListContext	signature:()
parser.ParameterListContext.ParameterDecl	parser/golang_parser.go	/^func (s *ParameterListContext) ParameterDecl(i int) IParameterDeclContext {$/;"	f	struct:parser.ParameterListContext	typeref:typename:IParameterDeclContext	signature:(i int)
parser.ParameterListContext.ToStringTree	parser/golang_parser.go	/^func (s *ParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ParameterListContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ParameterListContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ParameterListContext	typeref:typename:antlr.Parser
parser.ParametersContext	parser/golang_parser.go	/^type ParametersContext struct {$/;"	s	package:parser
parser.ParametersContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ParametersContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ParametersContext.EnterRule	parser/golang_parser.go	/^func (s *ParametersContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ParametersContext	signature:(listener antlr.ParseTreeListener)
parser.ParametersContext.ExitRule	parser/golang_parser.go	/^func (s *ParametersContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ParametersContext	signature:(listener antlr.ParseTreeListener)
parser.ParametersContext.GetParser	parser/golang_parser.go	/^func (s *ParametersContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ParametersContext	typeref:typename:antlr.Parser	signature:()
parser.ParametersContext.GetRuleContext	parser/golang_parser.go	/^func (s *ParametersContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ParametersContext	typeref:typename:antlr.RuleContext	signature:()
parser.ParametersContext.IsParametersContext	parser/golang_parser.go	/^func (*ParametersContext) IsParametersContext() {}$/;"	f	struct:parser.ParametersContext	signature:()
parser.ParametersContext.ParameterList	parser/golang_parser.go	/^func (s *ParametersContext) ParameterList() IParameterListContext {$/;"	f	struct:parser.ParametersContext	typeref:typename:IParameterListContext	signature:()
parser.ParametersContext.ToStringTree	parser/golang_parser.go	/^func (s *ParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ParametersContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ParametersContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ParametersContext	typeref:typename:antlr.Parser
parser.PointerTypeContext	parser/golang_parser.go	/^type PointerTypeContext struct {$/;"	s	package:parser
parser.PointerTypeContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.PointerTypeContext	typeref:typename:*antlr.BaseParserRuleContext
parser.PointerTypeContext.EnterRule	parser/golang_parser.go	/^func (s *PointerTypeContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.PointerTypeContext	signature:(listener antlr.ParseTreeListener)
parser.PointerTypeContext.ExitRule	parser/golang_parser.go	/^func (s *PointerTypeContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.PointerTypeContext	signature:(listener antlr.ParseTreeListener)
parser.PointerTypeContext.GetParser	parser/golang_parser.go	/^func (s *PointerTypeContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.PointerTypeContext	typeref:typename:antlr.Parser	signature:()
parser.PointerTypeContext.GetRuleContext	parser/golang_parser.go	/^func (s *PointerTypeContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.PointerTypeContext	typeref:typename:antlr.RuleContext	signature:()
parser.PointerTypeContext.IsPointerTypeContext	parser/golang_parser.go	/^func (*PointerTypeContext) IsPointerTypeContext() {}$/;"	f	struct:parser.PointerTypeContext	signature:()
parser.PointerTypeContext.ToStringTree	parser/golang_parser.go	/^func (s *PointerTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.PointerTypeContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.PointerTypeContext.Type_	parser/golang_parser.go	/^func (s *PointerTypeContext) Type_() IType_Context {$/;"	f	struct:parser.PointerTypeContext	typeref:typename:IType_Context	signature:()
parser.PointerTypeContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.PointerTypeContext	typeref:typename:antlr.Parser
parser.PrimaryExprContext	parser/golang_parser.go	/^type PrimaryExprContext struct {$/;"	s	package:parser
parser.PrimaryExprContext.Arguments	parser/golang_parser.go	/^func (s *PrimaryExprContext) Arguments() IArgumentsContext {$/;"	f	struct:parser.PrimaryExprContext	typeref:typename:IArgumentsContext	signature:()
parser.PrimaryExprContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.PrimaryExprContext	typeref:typename:*antlr.BaseParserRuleContext
parser.PrimaryExprContext.Conversion	parser/golang_parser.go	/^func (s *PrimaryExprContext) Conversion() IConversionContext {$/;"	f	struct:parser.PrimaryExprContext	typeref:typename:IConversionContext	signature:()
parser.PrimaryExprContext.EnterRule	parser/golang_parser.go	/^func (s *PrimaryExprContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.PrimaryExprContext	signature:(listener antlr.ParseTreeListener)
parser.PrimaryExprContext.ExitRule	parser/golang_parser.go	/^func (s *PrimaryExprContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.PrimaryExprContext	signature:(listener antlr.ParseTreeListener)
parser.PrimaryExprContext.GetParser	parser/golang_parser.go	/^func (s *PrimaryExprContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.PrimaryExprContext	typeref:typename:antlr.Parser	signature:()
parser.PrimaryExprContext.GetRuleContext	parser/golang_parser.go	/^func (s *PrimaryExprContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.PrimaryExprContext	typeref:typename:antlr.RuleContext	signature:()
parser.PrimaryExprContext.Index	parser/golang_parser.go	/^func (s *PrimaryExprContext) Index() IIndexContext {$/;"	f	struct:parser.PrimaryExprContext	typeref:typename:IIndexContext	signature:()
parser.PrimaryExprContext.IsPrimaryExprContext	parser/golang_parser.go	/^func (*PrimaryExprContext) IsPrimaryExprContext() {}$/;"	f	struct:parser.PrimaryExprContext	signature:()
parser.PrimaryExprContext.Operand	parser/golang_parser.go	/^func (s *PrimaryExprContext) Operand() IOperandContext {$/;"	f	struct:parser.PrimaryExprContext	typeref:typename:IOperandContext	signature:()
parser.PrimaryExprContext.PrimaryExpr	parser/golang_parser.go	/^func (s *PrimaryExprContext) PrimaryExpr() IPrimaryExprContext {$/;"	f	struct:parser.PrimaryExprContext	typeref:typename:IPrimaryExprContext	signature:()
parser.PrimaryExprContext.Selector	parser/golang_parser.go	/^func (s *PrimaryExprContext) Selector() ISelectorContext {$/;"	f	struct:parser.PrimaryExprContext	typeref:typename:ISelectorContext	signature:()
parser.PrimaryExprContext.Slice	parser/golang_parser.go	/^func (s *PrimaryExprContext) Slice() ISliceContext {$/;"	f	struct:parser.PrimaryExprContext	typeref:typename:ISliceContext	signature:()
parser.PrimaryExprContext.ToStringTree	parser/golang_parser.go	/^func (s *PrimaryExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.PrimaryExprContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.PrimaryExprContext.TypeAssertion	parser/golang_parser.go	/^func (s *PrimaryExprContext) TypeAssertion() ITypeAssertionContext {$/;"	f	struct:parser.PrimaryExprContext	typeref:typename:ITypeAssertionContext	signature:()
parser.PrimaryExprContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.PrimaryExprContext	typeref:typename:antlr.Parser
parser.QualifiedIdentContext	parser/golang_parser.go	/^type QualifiedIdentContext struct {$/;"	s	package:parser
parser.QualifiedIdentContext.AllIDENTIFIER	parser/golang_parser.go	/^func (s *QualifiedIdentContext) AllIDENTIFIER() []antlr.TerminalNode {$/;"	f	struct:parser.QualifiedIdentContext	typeref:typename:[]antlr.TerminalNode	signature:()
parser.QualifiedIdentContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.QualifiedIdentContext	typeref:typename:*antlr.BaseParserRuleContext
parser.QualifiedIdentContext.EnterRule	parser/golang_parser.go	/^func (s *QualifiedIdentContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.QualifiedIdentContext	signature:(listener antlr.ParseTreeListener)
parser.QualifiedIdentContext.ExitRule	parser/golang_parser.go	/^func (s *QualifiedIdentContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.QualifiedIdentContext	signature:(listener antlr.ParseTreeListener)
parser.QualifiedIdentContext.GetParser	parser/golang_parser.go	/^func (s *QualifiedIdentContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.QualifiedIdentContext	typeref:typename:antlr.Parser	signature:()
parser.QualifiedIdentContext.GetRuleContext	parser/golang_parser.go	/^func (s *QualifiedIdentContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.QualifiedIdentContext	typeref:typename:antlr.RuleContext	signature:()
parser.QualifiedIdentContext.IDENTIFIER	parser/golang_parser.go	/^func (s *QualifiedIdentContext) IDENTIFIER(i int) antlr.TerminalNode {$/;"	f	struct:parser.QualifiedIdentContext	typeref:typename:antlr.TerminalNode	signature:(i int)
parser.QualifiedIdentContext.IsQualifiedIdentContext	parser/golang_parser.go	/^func (*QualifiedIdentContext) IsQualifiedIdentContext() {}$/;"	f	struct:parser.QualifiedIdentContext	signature:()
parser.QualifiedIdentContext.ToStringTree	parser/golang_parser.go	/^func (s *QualifiedIdentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string /;"	f	struct:parser.QualifiedIdentContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.QualifiedIdentContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.QualifiedIdentContext	typeref:typename:antlr.Parser
parser.RangeClauseContext	parser/golang_parser.go	/^type RangeClauseContext struct {$/;"	s	package:parser
parser.RangeClauseContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.RangeClauseContext	typeref:typename:*antlr.BaseParserRuleContext
parser.RangeClauseContext.EnterRule	parser/golang_parser.go	/^func (s *RangeClauseContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.RangeClauseContext	signature:(listener antlr.ParseTreeListener)
parser.RangeClauseContext.ExitRule	parser/golang_parser.go	/^func (s *RangeClauseContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.RangeClauseContext	signature:(listener antlr.ParseTreeListener)
parser.RangeClauseContext.Expression	parser/golang_parser.go	/^func (s *RangeClauseContext) Expression() IExpressionContext {$/;"	f	struct:parser.RangeClauseContext	typeref:typename:IExpressionContext	signature:()
parser.RangeClauseContext.ExpressionList	parser/golang_parser.go	/^func (s *RangeClauseContext) ExpressionList() IExpressionListContext {$/;"	f	struct:parser.RangeClauseContext	typeref:typename:IExpressionListContext	signature:()
parser.RangeClauseContext.GetParser	parser/golang_parser.go	/^func (s *RangeClauseContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.RangeClauseContext	typeref:typename:antlr.Parser	signature:()
parser.RangeClauseContext.GetRuleContext	parser/golang_parser.go	/^func (s *RangeClauseContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.RangeClauseContext	typeref:typename:antlr.RuleContext	signature:()
parser.RangeClauseContext.IdentifierList	parser/golang_parser.go	/^func (s *RangeClauseContext) IdentifierList() IIdentifierListContext {$/;"	f	struct:parser.RangeClauseContext	typeref:typename:IIdentifierListContext	signature:()
parser.RangeClauseContext.IsRangeClauseContext	parser/golang_parser.go	/^func (*RangeClauseContext) IsRangeClauseContext() {}$/;"	f	struct:parser.RangeClauseContext	signature:()
parser.RangeClauseContext.Range	parser/golang_parser.go	/^func (s *RangeClauseContext) Range() antlr.TerminalNode {$/;"	f	struct:parser.RangeClauseContext	typeref:typename:antlr.TerminalNode	signature:()
parser.RangeClauseContext.ToStringTree	parser/golang_parser.go	/^func (s *RangeClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.RangeClauseContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.RangeClauseContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.RangeClauseContext	typeref:typename:antlr.Parser
parser.ReceiverContext	parser/golang_parser.go	/^type ReceiverContext struct {$/;"	s	package:parser
parser.ReceiverContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ReceiverContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ReceiverContext.EnterRule	parser/golang_parser.go	/^func (s *ReceiverContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ReceiverContext	signature:(listener antlr.ParseTreeListener)
parser.ReceiverContext.ExitRule	parser/golang_parser.go	/^func (s *ReceiverContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ReceiverContext	signature:(listener antlr.ParseTreeListener)
parser.ReceiverContext.GetParser	parser/golang_parser.go	/^func (s *ReceiverContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ReceiverContext	typeref:typename:antlr.Parser	signature:()
parser.ReceiverContext.GetRuleContext	parser/golang_parser.go	/^func (s *ReceiverContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ReceiverContext	typeref:typename:antlr.RuleContext	signature:()
parser.ReceiverContext.IsReceiverContext	parser/golang_parser.go	/^func (*ReceiverContext) IsReceiverContext() {}$/;"	f	struct:parser.ReceiverContext	signature:()
parser.ReceiverContext.Parameters	parser/golang_parser.go	/^func (s *ReceiverContext) Parameters() IParametersContext {$/;"	f	struct:parser.ReceiverContext	typeref:typename:IParametersContext	signature:()
parser.ReceiverContext.ToStringTree	parser/golang_parser.go	/^func (s *ReceiverContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ReceiverContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ReceiverContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ReceiverContext	typeref:typename:antlr.Parser
parser.ReceiverTypeContext	parser/golang_parser.go	/^type ReceiverTypeContext struct {$/;"	s	package:parser
parser.ReceiverTypeContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ReceiverTypeContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ReceiverTypeContext.EnterRule	parser/golang_parser.go	/^func (s *ReceiverTypeContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ReceiverTypeContext	signature:(listener antlr.ParseTreeListener)
parser.ReceiverTypeContext.ExitRule	parser/golang_parser.go	/^func (s *ReceiverTypeContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ReceiverTypeContext	signature:(listener antlr.ParseTreeListener)
parser.ReceiverTypeContext.GetParser	parser/golang_parser.go	/^func (s *ReceiverTypeContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ReceiverTypeContext	typeref:typename:antlr.Parser	signature:()
parser.ReceiverTypeContext.GetRuleContext	parser/golang_parser.go	/^func (s *ReceiverTypeContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ReceiverTypeContext	typeref:typename:antlr.RuleContext	signature:()
parser.ReceiverTypeContext.IsReceiverTypeContext	parser/golang_parser.go	/^func (*ReceiverTypeContext) IsReceiverTypeContext() {}$/;"	f	struct:parser.ReceiverTypeContext	signature:()
parser.ReceiverTypeContext.ReceiverType	parser/golang_parser.go	/^func (s *ReceiverTypeContext) ReceiverType() IReceiverTypeContext {$/;"	f	struct:parser.ReceiverTypeContext	typeref:typename:IReceiverTypeContext	signature:()
parser.ReceiverTypeContext.ToStringTree	parser/golang_parser.go	/^func (s *ReceiverTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ReceiverTypeContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ReceiverTypeContext.TypeName	parser/golang_parser.go	/^func (s *ReceiverTypeContext) TypeName() ITypeNameContext {$/;"	f	struct:parser.ReceiverTypeContext	typeref:typename:ITypeNameContext	signature:()
parser.ReceiverTypeContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ReceiverTypeContext	typeref:typename:antlr.Parser
parser.RecvStmtContext	parser/golang_parser.go	/^type RecvStmtContext struct {$/;"	s	package:parser
parser.RecvStmtContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.RecvStmtContext	typeref:typename:*antlr.BaseParserRuleContext
parser.RecvStmtContext.EnterRule	parser/golang_parser.go	/^func (s *RecvStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.RecvStmtContext	signature:(listener antlr.ParseTreeListener)
parser.RecvStmtContext.ExitRule	parser/golang_parser.go	/^func (s *RecvStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.RecvStmtContext	signature:(listener antlr.ParseTreeListener)
parser.RecvStmtContext.Expression	parser/golang_parser.go	/^func (s *RecvStmtContext) Expression() IExpressionContext {$/;"	f	struct:parser.RecvStmtContext	typeref:typename:IExpressionContext	signature:()
parser.RecvStmtContext.ExpressionList	parser/golang_parser.go	/^func (s *RecvStmtContext) ExpressionList() IExpressionListContext {$/;"	f	struct:parser.RecvStmtContext	typeref:typename:IExpressionListContext	signature:()
parser.RecvStmtContext.GetParser	parser/golang_parser.go	/^func (s *RecvStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.RecvStmtContext	typeref:typename:antlr.Parser	signature:()
parser.RecvStmtContext.GetRuleContext	parser/golang_parser.go	/^func (s *RecvStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.RecvStmtContext	typeref:typename:antlr.RuleContext	signature:()
parser.RecvStmtContext.IdentifierList	parser/golang_parser.go	/^func (s *RecvStmtContext) IdentifierList() IIdentifierListContext {$/;"	f	struct:parser.RecvStmtContext	typeref:typename:IIdentifierListContext	signature:()
parser.RecvStmtContext.IsRecvStmtContext	parser/golang_parser.go	/^func (*RecvStmtContext) IsRecvStmtContext() {}$/;"	f	struct:parser.RecvStmtContext	signature:()
parser.RecvStmtContext.ToStringTree	parser/golang_parser.go	/^func (s *RecvStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.RecvStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.RecvStmtContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.RecvStmtContext	typeref:typename:antlr.Parser
parser.ResultContext	parser/golang_parser.go	/^type ResultContext struct {$/;"	s	package:parser
parser.ResultContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ResultContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ResultContext.EnterRule	parser/golang_parser.go	/^func (s *ResultContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ResultContext	signature:(listener antlr.ParseTreeListener)
parser.ResultContext.ExitRule	parser/golang_parser.go	/^func (s *ResultContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ResultContext	signature:(listener antlr.ParseTreeListener)
parser.ResultContext.GetParser	parser/golang_parser.go	/^func (s *ResultContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ResultContext	typeref:typename:antlr.Parser	signature:()
parser.ResultContext.GetRuleContext	parser/golang_parser.go	/^func (s *ResultContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ResultContext	typeref:typename:antlr.RuleContext	signature:()
parser.ResultContext.IsResultContext	parser/golang_parser.go	/^func (*ResultContext) IsResultContext() {}$/;"	f	struct:parser.ResultContext	signature:()
parser.ResultContext.Parameters	parser/golang_parser.go	/^func (s *ResultContext) Parameters() IParametersContext {$/;"	f	struct:parser.ResultContext	typeref:typename:IParametersContext	signature:()
parser.ResultContext.ToStringTree	parser/golang_parser.go	/^func (s *ResultContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ResultContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ResultContext.Type_	parser/golang_parser.go	/^func (s *ResultContext) Type_() IType_Context {$/;"	f	struct:parser.ResultContext	typeref:typename:IType_Context	signature:()
parser.ResultContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ResultContext	typeref:typename:antlr.Parser
parser.ReturnStmtContext	parser/golang_parser.go	/^type ReturnStmtContext struct {$/;"	s	package:parser
parser.ReturnStmtContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ReturnStmtContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ReturnStmtContext.EnterRule	parser/golang_parser.go	/^func (s *ReturnStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ReturnStmtContext	signature:(listener antlr.ParseTreeListener)
parser.ReturnStmtContext.ExitRule	parser/golang_parser.go	/^func (s *ReturnStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ReturnStmtContext	signature:(listener antlr.ParseTreeListener)
parser.ReturnStmtContext.ExpressionList	parser/golang_parser.go	/^func (s *ReturnStmtContext) ExpressionList() IExpressionListContext {$/;"	f	struct:parser.ReturnStmtContext	typeref:typename:IExpressionListContext	signature:()
parser.ReturnStmtContext.GetParser	parser/golang_parser.go	/^func (s *ReturnStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ReturnStmtContext	typeref:typename:antlr.Parser	signature:()
parser.ReturnStmtContext.GetRuleContext	parser/golang_parser.go	/^func (s *ReturnStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ReturnStmtContext	typeref:typename:antlr.RuleContext	signature:()
parser.ReturnStmtContext.IsReturnStmtContext	parser/golang_parser.go	/^func (*ReturnStmtContext) IsReturnStmtContext() {}$/;"	f	struct:parser.ReturnStmtContext	signature:()
parser.ReturnStmtContext.Return	parser/golang_parser.go	/^func (s *ReturnStmtContext) Return() antlr.TerminalNode {$/;"	f	struct:parser.ReturnStmtContext	typeref:typename:antlr.TerminalNode	signature:()
parser.ReturnStmtContext.ToStringTree	parser/golang_parser.go	/^func (s *ReturnStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ReturnStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ReturnStmtContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ReturnStmtContext	typeref:typename:antlr.Parser
parser.SelectStmtContext	parser/golang_parser.go	/^type SelectStmtContext struct {$/;"	s	package:parser
parser.SelectStmtContext.AllCommClause	parser/golang_parser.go	/^func (s *SelectStmtContext) AllCommClause() []ICommClauseContext {$/;"	f	struct:parser.SelectStmtContext	typeref:typename:[]ICommClauseContext	signature:()
parser.SelectStmtContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.SelectStmtContext	typeref:typename:*antlr.BaseParserRuleContext
parser.SelectStmtContext.CommClause	parser/golang_parser.go	/^func (s *SelectStmtContext) CommClause(i int) ICommClauseContext {$/;"	f	struct:parser.SelectStmtContext	typeref:typename:ICommClauseContext	signature:(i int)
parser.SelectStmtContext.EnterRule	parser/golang_parser.go	/^func (s *SelectStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SelectStmtContext	signature:(listener antlr.ParseTreeListener)
parser.SelectStmtContext.ExitRule	parser/golang_parser.go	/^func (s *SelectStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SelectStmtContext	signature:(listener antlr.ParseTreeListener)
parser.SelectStmtContext.GetParser	parser/golang_parser.go	/^func (s *SelectStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.SelectStmtContext	typeref:typename:antlr.Parser	signature:()
parser.SelectStmtContext.GetRuleContext	parser/golang_parser.go	/^func (s *SelectStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.SelectStmtContext	typeref:typename:antlr.RuleContext	signature:()
parser.SelectStmtContext.IsSelectStmtContext	parser/golang_parser.go	/^func (*SelectStmtContext) IsSelectStmtContext() {}$/;"	f	struct:parser.SelectStmtContext	signature:()
parser.SelectStmtContext.Select	parser/golang_parser.go	/^func (s *SelectStmtContext) Select() antlr.TerminalNode {$/;"	f	struct:parser.SelectStmtContext	typeref:typename:antlr.TerminalNode	signature:()
parser.SelectStmtContext.ToStringTree	parser/golang_parser.go	/^func (s *SelectStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.SelectStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.SelectStmtContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.SelectStmtContext	typeref:typename:antlr.Parser
parser.SelectorContext	parser/golang_parser.go	/^type SelectorContext struct {$/;"	s	package:parser
parser.SelectorContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.SelectorContext	typeref:typename:*antlr.BaseParserRuleContext
parser.SelectorContext.EnterRule	parser/golang_parser.go	/^func (s *SelectorContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SelectorContext	signature:(listener antlr.ParseTreeListener)
parser.SelectorContext.ExitRule	parser/golang_parser.go	/^func (s *SelectorContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SelectorContext	signature:(listener antlr.ParseTreeListener)
parser.SelectorContext.GetParser	parser/golang_parser.go	/^func (s *SelectorContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.SelectorContext	typeref:typename:antlr.Parser	signature:()
parser.SelectorContext.GetRuleContext	parser/golang_parser.go	/^func (s *SelectorContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.SelectorContext	typeref:typename:antlr.RuleContext	signature:()
parser.SelectorContext.IDENTIFIER	parser/golang_parser.go	/^func (s *SelectorContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.SelectorContext	typeref:typename:antlr.TerminalNode	signature:()
parser.SelectorContext.IsSelectorContext	parser/golang_parser.go	/^func (*SelectorContext) IsSelectorContext() {}$/;"	f	struct:parser.SelectorContext	signature:()
parser.SelectorContext.ToStringTree	parser/golang_parser.go	/^func (s *SelectorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.SelectorContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.SelectorContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.SelectorContext	typeref:typename:antlr.Parser
parser.SendStmtContext	parser/golang_parser.go	/^type SendStmtContext struct {$/;"	s	package:parser
parser.SendStmtContext.AllExpression	parser/golang_parser.go	/^func (s *SendStmtContext) AllExpression() []IExpressionContext {$/;"	f	struct:parser.SendStmtContext	typeref:typename:[]IExpressionContext	signature:()
parser.SendStmtContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.SendStmtContext	typeref:typename:*antlr.BaseParserRuleContext
parser.SendStmtContext.ChanOp	parser/golang_parser.go	/^func (s *SendStmtContext) ChanOp() antlr.TerminalNode {$/;"	f	struct:parser.SendStmtContext	typeref:typename:antlr.TerminalNode	signature:()
parser.SendStmtContext.EnterRule	parser/golang_parser.go	/^func (s *SendStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SendStmtContext	signature:(listener antlr.ParseTreeListener)
parser.SendStmtContext.ExitRule	parser/golang_parser.go	/^func (s *SendStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SendStmtContext	signature:(listener antlr.ParseTreeListener)
parser.SendStmtContext.Expression	parser/golang_parser.go	/^func (s *SendStmtContext) Expression(i int) IExpressionContext {$/;"	f	struct:parser.SendStmtContext	typeref:typename:IExpressionContext	signature:(i int)
parser.SendStmtContext.GetParser	parser/golang_parser.go	/^func (s *SendStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.SendStmtContext	typeref:typename:antlr.Parser	signature:()
parser.SendStmtContext.GetRuleContext	parser/golang_parser.go	/^func (s *SendStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.SendStmtContext	typeref:typename:antlr.RuleContext	signature:()
parser.SendStmtContext.IsSendStmtContext	parser/golang_parser.go	/^func (*SendStmtContext) IsSendStmtContext() {}$/;"	f	struct:parser.SendStmtContext	signature:()
parser.SendStmtContext.ToStringTree	parser/golang_parser.go	/^func (s *SendStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.SendStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.SendStmtContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.SendStmtContext	typeref:typename:antlr.Parser
parser.ShortVarDeclContext	parser/golang_parser.go	/^type ShortVarDeclContext struct {$/;"	s	package:parser
parser.ShortVarDeclContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.ShortVarDeclContext	typeref:typename:*antlr.BaseParserRuleContext
parser.ShortVarDeclContext.EnterRule	parser/golang_parser.go	/^func (s *ShortVarDeclContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ShortVarDeclContext	signature:(listener antlr.ParseTreeListener)
parser.ShortVarDeclContext.ExitRule	parser/golang_parser.go	/^func (s *ShortVarDeclContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.ShortVarDeclContext	signature:(listener antlr.ParseTreeListener)
parser.ShortVarDeclContext.ExpressionList	parser/golang_parser.go	/^func (s *ShortVarDeclContext) ExpressionList() IExpressionListContext {$/;"	f	struct:parser.ShortVarDeclContext	typeref:typename:IExpressionListContext	signature:()
parser.ShortVarDeclContext.GetParser	parser/golang_parser.go	/^func (s *ShortVarDeclContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.ShortVarDeclContext	typeref:typename:antlr.Parser	signature:()
parser.ShortVarDeclContext.GetRuleContext	parser/golang_parser.go	/^func (s *ShortVarDeclContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.ShortVarDeclContext	typeref:typename:antlr.RuleContext	signature:()
parser.ShortVarDeclContext.IdentifierList	parser/golang_parser.go	/^func (s *ShortVarDeclContext) IdentifierList() IIdentifierListContext {$/;"	f	struct:parser.ShortVarDeclContext	typeref:typename:IIdentifierListContext	signature:()
parser.ShortVarDeclContext.IsShortVarDeclContext	parser/golang_parser.go	/^func (*ShortVarDeclContext) IsShortVarDeclContext() {}$/;"	f	struct:parser.ShortVarDeclContext	signature:()
parser.ShortVarDeclContext.ToStringTree	parser/golang_parser.go	/^func (s *ShortVarDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.ShortVarDeclContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.ShortVarDeclContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.ShortVarDeclContext	typeref:typename:antlr.Parser
parser.SignatureContext	parser/golang_parser.go	/^type SignatureContext struct {$/;"	s	package:parser
parser.SignatureContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.SignatureContext	typeref:typename:*antlr.BaseParserRuleContext
parser.SignatureContext.EnterRule	parser/golang_parser.go	/^func (s *SignatureContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SignatureContext	signature:(listener antlr.ParseTreeListener)
parser.SignatureContext.ExitRule	parser/golang_parser.go	/^func (s *SignatureContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SignatureContext	signature:(listener antlr.ParseTreeListener)
parser.SignatureContext.GetParser	parser/golang_parser.go	/^func (s *SignatureContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.SignatureContext	typeref:typename:antlr.Parser	signature:()
parser.SignatureContext.GetRuleContext	parser/golang_parser.go	/^func (s *SignatureContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.SignatureContext	typeref:typename:antlr.RuleContext	signature:()
parser.SignatureContext.IsSignatureContext	parser/golang_parser.go	/^func (*SignatureContext) IsSignatureContext() {}$/;"	f	struct:parser.SignatureContext	signature:()
parser.SignatureContext.Parameters	parser/golang_parser.go	/^func (s *SignatureContext) Parameters() IParametersContext {$/;"	f	struct:parser.SignatureContext	typeref:typename:IParametersContext	signature:()
parser.SignatureContext.Result	parser/golang_parser.go	/^func (s *SignatureContext) Result() IResultContext {$/;"	f	struct:parser.SignatureContext	typeref:typename:IResultContext	signature:()
parser.SignatureContext.ToStringTree	parser/golang_parser.go	/^func (s *SignatureContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.SignatureContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.SignatureContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.SignatureContext	typeref:typename:antlr.Parser
parser.SimpleStmtContext	parser/golang_parser.go	/^type SimpleStmtContext struct {$/;"	s	package:parser
parser.SimpleStmtContext.Assignment	parser/golang_parser.go	/^func (s *SimpleStmtContext) Assignment() IAssignmentContext {$/;"	f	struct:parser.SimpleStmtContext	typeref:typename:IAssignmentContext	signature:()
parser.SimpleStmtContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.SimpleStmtContext	typeref:typename:*antlr.BaseParserRuleContext
parser.SimpleStmtContext.EmptyStmt	parser/golang_parser.go	/^func (s *SimpleStmtContext) EmptyStmt() IEmptyStmtContext {$/;"	f	struct:parser.SimpleStmtContext	typeref:typename:IEmptyStmtContext	signature:()
parser.SimpleStmtContext.EnterRule	parser/golang_parser.go	/^func (s *SimpleStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SimpleStmtContext	signature:(listener antlr.ParseTreeListener)
parser.SimpleStmtContext.ExitRule	parser/golang_parser.go	/^func (s *SimpleStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SimpleStmtContext	signature:(listener antlr.ParseTreeListener)
parser.SimpleStmtContext.ExpressionStmt	parser/golang_parser.go	/^func (s *SimpleStmtContext) ExpressionStmt() IExpressionStmtContext {$/;"	f	struct:parser.SimpleStmtContext	typeref:typename:IExpressionStmtContext	signature:()
parser.SimpleStmtContext.GetParser	parser/golang_parser.go	/^func (s *SimpleStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.SimpleStmtContext	typeref:typename:antlr.Parser	signature:()
parser.SimpleStmtContext.GetRuleContext	parser/golang_parser.go	/^func (s *SimpleStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.SimpleStmtContext	typeref:typename:antlr.RuleContext	signature:()
parser.SimpleStmtContext.IncDecStmt	parser/golang_parser.go	/^func (s *SimpleStmtContext) IncDecStmt() IIncDecStmtContext {$/;"	f	struct:parser.SimpleStmtContext	typeref:typename:IIncDecStmtContext	signature:()
parser.SimpleStmtContext.IsSimpleStmtContext	parser/golang_parser.go	/^func (*SimpleStmtContext) IsSimpleStmtContext() {}$/;"	f	struct:parser.SimpleStmtContext	signature:()
parser.SimpleStmtContext.SendStmt	parser/golang_parser.go	/^func (s *SimpleStmtContext) SendStmt() ISendStmtContext {$/;"	f	struct:parser.SimpleStmtContext	typeref:typename:ISendStmtContext	signature:()
parser.SimpleStmtContext.ShortVarDecl	parser/golang_parser.go	/^func (s *SimpleStmtContext) ShortVarDecl() IShortVarDeclContext {$/;"	f	struct:parser.SimpleStmtContext	typeref:typename:IShortVarDeclContext	signature:()
parser.SimpleStmtContext.ToStringTree	parser/golang_parser.go	/^func (s *SimpleStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.SimpleStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.SimpleStmtContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.SimpleStmtContext	typeref:typename:antlr.Parser
parser.SliceContext	parser/golang_parser.go	/^type SliceContext struct {$/;"	s	package:parser
parser.SliceContext.AllExpression	parser/golang_parser.go	/^func (s *SliceContext) AllExpression() []IExpressionContext {$/;"	f	struct:parser.SliceContext	typeref:typename:[]IExpressionContext	signature:()
parser.SliceContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.SliceContext	typeref:typename:*antlr.BaseParserRuleContext
parser.SliceContext.EnterRule	parser/golang_parser.go	/^func (s *SliceContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SliceContext	signature:(listener antlr.ParseTreeListener)
parser.SliceContext.ExitRule	parser/golang_parser.go	/^func (s *SliceContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SliceContext	signature:(listener antlr.ParseTreeListener)
parser.SliceContext.Expression	parser/golang_parser.go	/^func (s *SliceContext) Expression(i int) IExpressionContext {$/;"	f	struct:parser.SliceContext	typeref:typename:IExpressionContext	signature:(i int)
parser.SliceContext.GetParser	parser/golang_parser.go	/^func (s *SliceContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.SliceContext	typeref:typename:antlr.Parser	signature:()
parser.SliceContext.GetRuleContext	parser/golang_parser.go	/^func (s *SliceContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.SliceContext	typeref:typename:antlr.RuleContext	signature:()
parser.SliceContext.IsSliceContext	parser/golang_parser.go	/^func (*SliceContext) IsSliceContext() {}$/;"	f	struct:parser.SliceContext	signature:()
parser.SliceContext.ToStringTree	parser/golang_parser.go	/^func (s *SliceContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.SliceContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.SliceContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.SliceContext	typeref:typename:antlr.Parser
parser.SliceTypeContext	parser/golang_parser.go	/^type SliceTypeContext struct {$/;"	s	package:parser
parser.SliceTypeContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.SliceTypeContext	typeref:typename:*antlr.BaseParserRuleContext
parser.SliceTypeContext.ElementType	parser/golang_parser.go	/^func (s *SliceTypeContext) ElementType() IElementTypeContext {$/;"	f	struct:parser.SliceTypeContext	typeref:typename:IElementTypeContext	signature:()
parser.SliceTypeContext.EnterRule	parser/golang_parser.go	/^func (s *SliceTypeContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SliceTypeContext	signature:(listener antlr.ParseTreeListener)
parser.SliceTypeContext.ExitRule	parser/golang_parser.go	/^func (s *SliceTypeContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SliceTypeContext	signature:(listener antlr.ParseTreeListener)
parser.SliceTypeContext.GetParser	parser/golang_parser.go	/^func (s *SliceTypeContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.SliceTypeContext	typeref:typename:antlr.Parser	signature:()
parser.SliceTypeContext.GetRuleContext	parser/golang_parser.go	/^func (s *SliceTypeContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.SliceTypeContext	typeref:typename:antlr.RuleContext	signature:()
parser.SliceTypeContext.IsSliceTypeContext	parser/golang_parser.go	/^func (*SliceTypeContext) IsSliceTypeContext() {}$/;"	f	struct:parser.SliceTypeContext	signature:()
parser.SliceTypeContext.ToStringTree	parser/golang_parser.go	/^func (s *SliceTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.SliceTypeContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.SliceTypeContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.SliceTypeContext	typeref:typename:antlr.Parser
parser.SourceFileContext	parser/golang_parser.go	/^type SourceFileContext struct {$/;"	s	package:parser
parser.SourceFileContext.AllEos	parser/golang_parser.go	/^func (s *SourceFileContext) AllEos() []IEosContext {$/;"	f	struct:parser.SourceFileContext	typeref:typename:[]IEosContext	signature:()
parser.SourceFileContext.AllImportDecl	parser/golang_parser.go	/^func (s *SourceFileContext) AllImportDecl() []IImportDeclContext {$/;"	f	struct:parser.SourceFileContext	typeref:typename:[]IImportDeclContext	signature:()
parser.SourceFileContext.AllTopLevelDecl	parser/golang_parser.go	/^func (s *SourceFileContext) AllTopLevelDecl() []ITopLevelDeclContext {$/;"	f	struct:parser.SourceFileContext	typeref:typename:[]ITopLevelDeclContext	signature:()
parser.SourceFileContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.SourceFileContext	typeref:typename:*antlr.BaseParserRuleContext
parser.SourceFileContext.EnterRule	parser/golang_parser.go	/^func (s *SourceFileContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SourceFileContext	signature:(listener antlr.ParseTreeListener)
parser.SourceFileContext.Eos	parser/golang_parser.go	/^func (s *SourceFileContext) Eos(i int) IEosContext {$/;"	f	struct:parser.SourceFileContext	typeref:typename:IEosContext	signature:(i int)
parser.SourceFileContext.ExitRule	parser/golang_parser.go	/^func (s *SourceFileContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SourceFileContext	signature:(listener antlr.ParseTreeListener)
parser.SourceFileContext.GetParser	parser/golang_parser.go	/^func (s *SourceFileContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.SourceFileContext	typeref:typename:antlr.Parser	signature:()
parser.SourceFileContext.GetRuleContext	parser/golang_parser.go	/^func (s *SourceFileContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.SourceFileContext	typeref:typename:antlr.RuleContext	signature:()
parser.SourceFileContext.ImportDecl	parser/golang_parser.go	/^func (s *SourceFileContext) ImportDecl(i int) IImportDeclContext {$/;"	f	struct:parser.SourceFileContext	typeref:typename:IImportDeclContext	signature:(i int)
parser.SourceFileContext.IsSourceFileContext	parser/golang_parser.go	/^func (*SourceFileContext) IsSourceFileContext() {}$/;"	f	struct:parser.SourceFileContext	signature:()
parser.SourceFileContext.PackageClause	parser/golang_parser.go	/^func (s *SourceFileContext) PackageClause() IPackageClauseContext {$/;"	f	struct:parser.SourceFileContext	typeref:typename:IPackageClauseContext	signature:()
parser.SourceFileContext.ToStringTree	parser/golang_parser.go	/^func (s *SourceFileContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.SourceFileContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.SourceFileContext.TopLevelDecl	parser/golang_parser.go	/^func (s *SourceFileContext) TopLevelDecl(i int) ITopLevelDeclContext {$/;"	f	struct:parser.SourceFileContext	typeref:typename:ITopLevelDeclContext	signature:(i int)
parser.SourceFileContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.SourceFileContext	typeref:typename:antlr.Parser
parser.StatementContext	parser/golang_parser.go	/^type StatementContext struct {$/;"	s	package:parser
parser.StatementContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.StatementContext	typeref:typename:*antlr.BaseParserRuleContext
parser.StatementContext.Block	parser/golang_parser.go	/^func (s *StatementContext) Block() IBlockContext {$/;"	f	struct:parser.StatementContext	typeref:typename:IBlockContext	signature:()
parser.StatementContext.BreakStmt	parser/golang_parser.go	/^func (s *StatementContext) BreakStmt() IBreakStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:IBreakStmtContext	signature:()
parser.StatementContext.ContinueStmt	parser/golang_parser.go	/^func (s *StatementContext) ContinueStmt() IContinueStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:IContinueStmtContext	signature:()
parser.StatementContext.Declaration	parser/golang_parser.go	/^func (s *StatementContext) Declaration() IDeclarationContext {$/;"	f	struct:parser.StatementContext	typeref:typename:IDeclarationContext	signature:()
parser.StatementContext.DeferStmt	parser/golang_parser.go	/^func (s *StatementContext) DeferStmt() IDeferStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:IDeferStmtContext	signature:()
parser.StatementContext.EnterRule	parser/golang_parser.go	/^func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.StatementContext	signature:(listener antlr.ParseTreeListener)
parser.StatementContext.ExitRule	parser/golang_parser.go	/^func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.StatementContext	signature:(listener antlr.ParseTreeListener)
parser.StatementContext.FallthroughStmt	parser/golang_parser.go	/^func (s *StatementContext) FallthroughStmt() IFallthroughStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:IFallthroughStmtContext	signature:()
parser.StatementContext.ForStmt	parser/golang_parser.go	/^func (s *StatementContext) ForStmt() IForStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:IForStmtContext	signature:()
parser.StatementContext.GetParser	parser/golang_parser.go	/^func (s *StatementContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.StatementContext	typeref:typename:antlr.Parser	signature:()
parser.StatementContext.GetRuleContext	parser/golang_parser.go	/^func (s *StatementContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.StatementContext	typeref:typename:antlr.RuleContext	signature:()
parser.StatementContext.GoStmt	parser/golang_parser.go	/^func (s *StatementContext) GoStmt() IGoStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:IGoStmtContext	signature:()
parser.StatementContext.GotoStmt	parser/golang_parser.go	/^func (s *StatementContext) GotoStmt() IGotoStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:IGotoStmtContext	signature:()
parser.StatementContext.IfStmt	parser/golang_parser.go	/^func (s *StatementContext) IfStmt() IIfStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:IIfStmtContext	signature:()
parser.StatementContext.IsStatementContext	parser/golang_parser.go	/^func (*StatementContext) IsStatementContext() {}$/;"	f	struct:parser.StatementContext	signature:()
parser.StatementContext.LabeledStmt	parser/golang_parser.go	/^func (s *StatementContext) LabeledStmt() ILabeledStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:ILabeledStmtContext	signature:()
parser.StatementContext.ReturnStmt	parser/golang_parser.go	/^func (s *StatementContext) ReturnStmt() IReturnStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:IReturnStmtContext	signature:()
parser.StatementContext.SelectStmt	parser/golang_parser.go	/^func (s *StatementContext) SelectStmt() ISelectStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:ISelectStmtContext	signature:()
parser.StatementContext.SimpleStmt	parser/golang_parser.go	/^func (s *StatementContext) SimpleStmt() ISimpleStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:ISimpleStmtContext	signature:()
parser.StatementContext.SwitchStmt	parser/golang_parser.go	/^func (s *StatementContext) SwitchStmt() ISwitchStmtContext {$/;"	f	struct:parser.StatementContext	typeref:typename:ISwitchStmtContext	signature:()
parser.StatementContext.ToStringTree	parser/golang_parser.go	/^func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.StatementContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.StatementContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.StatementContext	typeref:typename:antlr.Parser
parser.StatementListContext	parser/golang_parser.go	/^type StatementListContext struct {$/;"	s	package:parser
parser.StatementListContext.AllEos	parser/golang_parser.go	/^func (s *StatementListContext) AllEos() []IEosContext {$/;"	f	struct:parser.StatementListContext	typeref:typename:[]IEosContext	signature:()
parser.StatementListContext.AllStatement	parser/golang_parser.go	/^func (s *StatementListContext) AllStatement() []IStatementContext {$/;"	f	struct:parser.StatementListContext	typeref:typename:[]IStatementContext	signature:()
parser.StatementListContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.StatementListContext	typeref:typename:*antlr.BaseParserRuleContext
parser.StatementListContext.EnterRule	parser/golang_parser.go	/^func (s *StatementListContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.StatementListContext	signature:(listener antlr.ParseTreeListener)
parser.StatementListContext.Eos	parser/golang_parser.go	/^func (s *StatementListContext) Eos(i int) IEosContext {$/;"	f	struct:parser.StatementListContext	typeref:typename:IEosContext	signature:(i int)
parser.StatementListContext.ExitRule	parser/golang_parser.go	/^func (s *StatementListContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.StatementListContext	signature:(listener antlr.ParseTreeListener)
parser.StatementListContext.GetParser	parser/golang_parser.go	/^func (s *StatementListContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.StatementListContext	typeref:typename:antlr.Parser	signature:()
parser.StatementListContext.GetRuleContext	parser/golang_parser.go	/^func (s *StatementListContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.StatementListContext	typeref:typename:antlr.RuleContext	signature:()
parser.StatementListContext.IsStatementListContext	parser/golang_parser.go	/^func (*StatementListContext) IsStatementListContext() {}$/;"	f	struct:parser.StatementListContext	signature:()
parser.StatementListContext.Statement	parser/golang_parser.go	/^func (s *StatementListContext) Statement(i int) IStatementContext {$/;"	f	struct:parser.StatementListContext	typeref:typename:IStatementContext	signature:(i int)
parser.StatementListContext.ToStringTree	parser/golang_parser.go	/^func (s *StatementListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.StatementListContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.StatementListContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.StatementListContext	typeref:typename:antlr.Parser
parser.StructTypeContext	parser/golang_parser.go	/^type StructTypeContext struct {$/;"	s	package:parser
parser.StructTypeContext.AllEos	parser/golang_parser.go	/^func (s *StructTypeContext) AllEos() []IEosContext {$/;"	f	struct:parser.StructTypeContext	typeref:typename:[]IEosContext	signature:()
parser.StructTypeContext.AllFieldDecl	parser/golang_parser.go	/^func (s *StructTypeContext) AllFieldDecl() []IFieldDeclContext {$/;"	f	struct:parser.StructTypeContext	typeref:typename:[]IFieldDeclContext	signature:()
parser.StructTypeContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.StructTypeContext	typeref:typename:*antlr.BaseParserRuleContext
parser.StructTypeContext.EnterRule	parser/golang_parser.go	/^func (s *StructTypeContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.StructTypeContext	signature:(listener antlr.ParseTreeListener)
parser.StructTypeContext.Eos	parser/golang_parser.go	/^func (s *StructTypeContext) Eos(i int) IEosContext {$/;"	f	struct:parser.StructTypeContext	typeref:typename:IEosContext	signature:(i int)
parser.StructTypeContext.ExitRule	parser/golang_parser.go	/^func (s *StructTypeContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.StructTypeContext	signature:(listener antlr.ParseTreeListener)
parser.StructTypeContext.FieldDecl	parser/golang_parser.go	/^func (s *StructTypeContext) FieldDecl(i int) IFieldDeclContext {$/;"	f	struct:parser.StructTypeContext	typeref:typename:IFieldDeclContext	signature:(i int)
parser.StructTypeContext.GetParser	parser/golang_parser.go	/^func (s *StructTypeContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.StructTypeContext	typeref:typename:antlr.Parser	signature:()
parser.StructTypeContext.GetRuleContext	parser/golang_parser.go	/^func (s *StructTypeContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.StructTypeContext	typeref:typename:antlr.RuleContext	signature:()
parser.StructTypeContext.IsStructTypeContext	parser/golang_parser.go	/^func (*StructTypeContext) IsStructTypeContext() {}$/;"	f	struct:parser.StructTypeContext	signature:()
parser.StructTypeContext.Struct	parser/golang_parser.go	/^func (s *StructTypeContext) Struct() antlr.TerminalNode {$/;"	f	struct:parser.StructTypeContext	typeref:typename:antlr.TerminalNode	signature:()
parser.StructTypeContext.ToStringTree	parser/golang_parser.go	/^func (s *StructTypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.StructTypeContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.StructTypeContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.StructTypeContext	typeref:typename:antlr.Parser
parser.SwitchStmtContext	parser/golang_parser.go	/^type SwitchStmtContext struct {$/;"	s	package:parser
parser.SwitchStmtContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.SwitchStmtContext	typeref:typename:*antlr.BaseParserRuleContext
parser.SwitchStmtContext.EnterRule	parser/golang_parser.go	/^func (s *SwitchStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SwitchStmtContext	signature:(listener antlr.ParseTreeListener)
parser.SwitchStmtContext.ExitRule	parser/golang_parser.go	/^func (s *SwitchStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.SwitchStmtContext	signature:(listener antlr.ParseTreeListener)
parser.SwitchStmtContext.ExprSwitchStmt	parser/golang_parser.go	/^func (s *SwitchStmtContext) ExprSwitchStmt() IExprSwitchStmtContext {$/;"	f	struct:parser.SwitchStmtContext	typeref:typename:IExprSwitchStmtContext	signature:()
parser.SwitchStmtContext.GetParser	parser/golang_parser.go	/^func (s *SwitchStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.SwitchStmtContext	typeref:typename:antlr.Parser	signature:()
parser.SwitchStmtContext.GetRuleContext	parser/golang_parser.go	/^func (s *SwitchStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.SwitchStmtContext	typeref:typename:antlr.RuleContext	signature:()
parser.SwitchStmtContext.IsSwitchStmtContext	parser/golang_parser.go	/^func (*SwitchStmtContext) IsSwitchStmtContext() {}$/;"	f	struct:parser.SwitchStmtContext	signature:()
parser.SwitchStmtContext.ToStringTree	parser/golang_parser.go	/^func (s *SwitchStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.SwitchStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.SwitchStmtContext.TypeSwitchStmt	parser/golang_parser.go	/^func (s *SwitchStmtContext) TypeSwitchStmt() ITypeSwitchStmtContext {$/;"	f	struct:parser.SwitchStmtContext	typeref:typename:ITypeSwitchStmtContext	signature:()
parser.SwitchStmtContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.SwitchStmtContext	typeref:typename:antlr.Parser
parser.TopLevelDeclContext	parser/golang_parser.go	/^type TopLevelDeclContext struct {$/;"	s	package:parser
parser.TopLevelDeclContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.TopLevelDeclContext	typeref:typename:*antlr.BaseParserRuleContext
parser.TopLevelDeclContext.Declaration	parser/golang_parser.go	/^func (s *TopLevelDeclContext) Declaration() IDeclarationContext {$/;"	f	struct:parser.TopLevelDeclContext	typeref:typename:IDeclarationContext	signature:()
parser.TopLevelDeclContext.EnterRule	parser/golang_parser.go	/^func (s *TopLevelDeclContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TopLevelDeclContext	signature:(listener antlr.ParseTreeListener)
parser.TopLevelDeclContext.ExitRule	parser/golang_parser.go	/^func (s *TopLevelDeclContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TopLevelDeclContext	signature:(listener antlr.ParseTreeListener)
parser.TopLevelDeclContext.FunctionDecl	parser/golang_parser.go	/^func (s *TopLevelDeclContext) FunctionDecl() IFunctionDeclContext {$/;"	f	struct:parser.TopLevelDeclContext	typeref:typename:IFunctionDeclContext	signature:()
parser.TopLevelDeclContext.GetParser	parser/golang_parser.go	/^func (s *TopLevelDeclContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.TopLevelDeclContext	typeref:typename:antlr.Parser	signature:()
parser.TopLevelDeclContext.GetRuleContext	parser/golang_parser.go	/^func (s *TopLevelDeclContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.TopLevelDeclContext	typeref:typename:antlr.RuleContext	signature:()
parser.TopLevelDeclContext.IsTopLevelDeclContext	parser/golang_parser.go	/^func (*TopLevelDeclContext) IsTopLevelDeclContext() {}$/;"	f	struct:parser.TopLevelDeclContext	signature:()
parser.TopLevelDeclContext.MethodDecl	parser/golang_parser.go	/^func (s *TopLevelDeclContext) MethodDecl() IMethodDeclContext {$/;"	f	struct:parser.TopLevelDeclContext	typeref:typename:IMethodDeclContext	signature:()
parser.TopLevelDeclContext.ToStringTree	parser/golang_parser.go	/^func (s *TopLevelDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.TopLevelDeclContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.TopLevelDeclContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.TopLevelDeclContext	typeref:typename:antlr.Parser
parser.TypeAssertionContext	parser/golang_parser.go	/^type TypeAssertionContext struct {$/;"	s	package:parser
parser.TypeAssertionContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.TypeAssertionContext	typeref:typename:*antlr.BaseParserRuleContext
parser.TypeAssertionContext.EnterRule	parser/golang_parser.go	/^func (s *TypeAssertionContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeAssertionContext	signature:(listener antlr.ParseTreeListener)
parser.TypeAssertionContext.ExitRule	parser/golang_parser.go	/^func (s *TypeAssertionContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeAssertionContext	signature:(listener antlr.ParseTreeListener)
parser.TypeAssertionContext.GetParser	parser/golang_parser.go	/^func (s *TypeAssertionContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.TypeAssertionContext	typeref:typename:antlr.Parser	signature:()
parser.TypeAssertionContext.GetRuleContext	parser/golang_parser.go	/^func (s *TypeAssertionContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.TypeAssertionContext	typeref:typename:antlr.RuleContext	signature:()
parser.TypeAssertionContext.IsTypeAssertionContext	parser/golang_parser.go	/^func (*TypeAssertionContext) IsTypeAssertionContext() {}$/;"	f	struct:parser.TypeAssertionContext	signature:()
parser.TypeAssertionContext.ToStringTree	parser/golang_parser.go	/^func (s *TypeAssertionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.TypeAssertionContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.TypeAssertionContext.Type_	parser/golang_parser.go	/^func (s *TypeAssertionContext) Type_() IType_Context {$/;"	f	struct:parser.TypeAssertionContext	typeref:typename:IType_Context	signature:()
parser.TypeAssertionContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.TypeAssertionContext	typeref:typename:antlr.Parser
parser.TypeCaseClauseContext	parser/golang_parser.go	/^type TypeCaseClauseContext struct {$/;"	s	package:parser
parser.TypeCaseClauseContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.TypeCaseClauseContext	typeref:typename:*antlr.BaseParserRuleContext
parser.TypeCaseClauseContext.EnterRule	parser/golang_parser.go	/^func (s *TypeCaseClauseContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeCaseClauseContext	signature:(listener antlr.ParseTreeListener)
parser.TypeCaseClauseContext.ExitRule	parser/golang_parser.go	/^func (s *TypeCaseClauseContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeCaseClauseContext	signature:(listener antlr.ParseTreeListener)
parser.TypeCaseClauseContext.GetParser	parser/golang_parser.go	/^func (s *TypeCaseClauseContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.TypeCaseClauseContext	typeref:typename:antlr.Parser	signature:()
parser.TypeCaseClauseContext.GetRuleContext	parser/golang_parser.go	/^func (s *TypeCaseClauseContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.TypeCaseClauseContext	typeref:typename:antlr.RuleContext	signature:()
parser.TypeCaseClauseContext.IsTypeCaseClauseContext	parser/golang_parser.go	/^func (*TypeCaseClauseContext) IsTypeCaseClauseContext() {}$/;"	f	struct:parser.TypeCaseClauseContext	signature:()
parser.TypeCaseClauseContext.StatementList	parser/golang_parser.go	/^func (s *TypeCaseClauseContext) StatementList() IStatementListContext {$/;"	f	struct:parser.TypeCaseClauseContext	typeref:typename:IStatementListContext	signature:()
parser.TypeCaseClauseContext.ToStringTree	parser/golang_parser.go	/^func (s *TypeCaseClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string /;"	f	struct:parser.TypeCaseClauseContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.TypeCaseClauseContext.TypeSwitchCase	parser/golang_parser.go	/^func (s *TypeCaseClauseContext) TypeSwitchCase() ITypeSwitchCaseContext {$/;"	f	struct:parser.TypeCaseClauseContext	typeref:typename:ITypeSwitchCaseContext	signature:()
parser.TypeCaseClauseContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.TypeCaseClauseContext	typeref:typename:antlr.Parser
parser.TypeDeclContext	parser/golang_parser.go	/^type TypeDeclContext struct {$/;"	s	package:parser
parser.TypeDeclContext.AllEos	parser/golang_parser.go	/^func (s *TypeDeclContext) AllEos() []IEosContext {$/;"	f	struct:parser.TypeDeclContext	typeref:typename:[]IEosContext	signature:()
parser.TypeDeclContext.AllTypeSpec	parser/golang_parser.go	/^func (s *TypeDeclContext) AllTypeSpec() []ITypeSpecContext {$/;"	f	struct:parser.TypeDeclContext	typeref:typename:[]ITypeSpecContext	signature:()
parser.TypeDeclContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.TypeDeclContext	typeref:typename:*antlr.BaseParserRuleContext
parser.TypeDeclContext.EnterRule	parser/golang_parser.go	/^func (s *TypeDeclContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeDeclContext	signature:(listener antlr.ParseTreeListener)
parser.TypeDeclContext.Eos	parser/golang_parser.go	/^func (s *TypeDeclContext) Eos(i int) IEosContext {$/;"	f	struct:parser.TypeDeclContext	typeref:typename:IEosContext	signature:(i int)
parser.TypeDeclContext.ExitRule	parser/golang_parser.go	/^func (s *TypeDeclContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeDeclContext	signature:(listener antlr.ParseTreeListener)
parser.TypeDeclContext.GetParser	parser/golang_parser.go	/^func (s *TypeDeclContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.TypeDeclContext	typeref:typename:antlr.Parser	signature:()
parser.TypeDeclContext.GetRuleContext	parser/golang_parser.go	/^func (s *TypeDeclContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.TypeDeclContext	typeref:typename:antlr.RuleContext	signature:()
parser.TypeDeclContext.IsTypeDeclContext	parser/golang_parser.go	/^func (*TypeDeclContext) IsTypeDeclContext() {}$/;"	f	struct:parser.TypeDeclContext	signature:()
parser.TypeDeclContext.ToStringTree	parser/golang_parser.go	/^func (s *TypeDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.TypeDeclContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.TypeDeclContext.Type	parser/golang_parser.go	/^func (s *TypeDeclContext) Type() antlr.TerminalNode {$/;"	f	struct:parser.TypeDeclContext	typeref:typename:antlr.TerminalNode	signature:()
parser.TypeDeclContext.TypeSpec	parser/golang_parser.go	/^func (s *TypeDeclContext) TypeSpec(i int) ITypeSpecContext {$/;"	f	struct:parser.TypeDeclContext	typeref:typename:ITypeSpecContext	signature:(i int)
parser.TypeDeclContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.TypeDeclContext	typeref:typename:antlr.Parser
parser.TypeListContext	parser/golang_parser.go	/^type TypeListContext struct {$/;"	s	package:parser
parser.TypeListContext.AllType_	parser/golang_parser.go	/^func (s *TypeListContext) AllType_() []IType_Context {$/;"	f	struct:parser.TypeListContext	typeref:typename:[]IType_Context	signature:()
parser.TypeListContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.TypeListContext	typeref:typename:*antlr.BaseParserRuleContext
parser.TypeListContext.EnterRule	parser/golang_parser.go	/^func (s *TypeListContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeListContext	signature:(listener antlr.ParseTreeListener)
parser.TypeListContext.ExitRule	parser/golang_parser.go	/^func (s *TypeListContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeListContext	signature:(listener antlr.ParseTreeListener)
parser.TypeListContext.GetParser	parser/golang_parser.go	/^func (s *TypeListContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.TypeListContext	typeref:typename:antlr.Parser	signature:()
parser.TypeListContext.GetRuleContext	parser/golang_parser.go	/^func (s *TypeListContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.TypeListContext	typeref:typename:antlr.RuleContext	signature:()
parser.TypeListContext.IsTypeListContext	parser/golang_parser.go	/^func (*TypeListContext) IsTypeListContext() {}$/;"	f	struct:parser.TypeListContext	signature:()
parser.TypeListContext.ToStringTree	parser/golang_parser.go	/^func (s *TypeListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.TypeListContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.TypeListContext.Type_	parser/golang_parser.go	/^func (s *TypeListContext) Type_(i int) IType_Context {$/;"	f	struct:parser.TypeListContext	typeref:typename:IType_Context	signature:(i int)
parser.TypeListContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.TypeListContext	typeref:typename:antlr.Parser
parser.TypeLitContext	parser/golang_parser.go	/^type TypeLitContext struct {$/;"	s	package:parser
parser.TypeLitContext.ArrayType	parser/golang_parser.go	/^func (s *TypeLitContext) ArrayType() IArrayTypeContext {$/;"	f	struct:parser.TypeLitContext	typeref:typename:IArrayTypeContext	signature:()
parser.TypeLitContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.TypeLitContext	typeref:typename:*antlr.BaseParserRuleContext
parser.TypeLitContext.ChannelType	parser/golang_parser.go	/^func (s *TypeLitContext) ChannelType() IChannelTypeContext {$/;"	f	struct:parser.TypeLitContext	typeref:typename:IChannelTypeContext	signature:()
parser.TypeLitContext.EnterRule	parser/golang_parser.go	/^func (s *TypeLitContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeLitContext	signature:(listener antlr.ParseTreeListener)
parser.TypeLitContext.ExitRule	parser/golang_parser.go	/^func (s *TypeLitContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeLitContext	signature:(listener antlr.ParseTreeListener)
parser.TypeLitContext.FunctionType	parser/golang_parser.go	/^func (s *TypeLitContext) FunctionType() IFunctionTypeContext {$/;"	f	struct:parser.TypeLitContext	typeref:typename:IFunctionTypeContext	signature:()
parser.TypeLitContext.GetParser	parser/golang_parser.go	/^func (s *TypeLitContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.TypeLitContext	typeref:typename:antlr.Parser	signature:()
parser.TypeLitContext.GetRuleContext	parser/golang_parser.go	/^func (s *TypeLitContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.TypeLitContext	typeref:typename:antlr.RuleContext	signature:()
parser.TypeLitContext.InterfaceType	parser/golang_parser.go	/^func (s *TypeLitContext) InterfaceType() IInterfaceTypeContext {$/;"	f	struct:parser.TypeLitContext	typeref:typename:IInterfaceTypeContext	signature:()
parser.TypeLitContext.IsTypeLitContext	parser/golang_parser.go	/^func (*TypeLitContext) IsTypeLitContext() {}$/;"	f	struct:parser.TypeLitContext	signature:()
parser.TypeLitContext.MapType	parser/golang_parser.go	/^func (s *TypeLitContext) MapType() IMapTypeContext {$/;"	f	struct:parser.TypeLitContext	typeref:typename:IMapTypeContext	signature:()
parser.TypeLitContext.PointerType	parser/golang_parser.go	/^func (s *TypeLitContext) PointerType() IPointerTypeContext {$/;"	f	struct:parser.TypeLitContext	typeref:typename:IPointerTypeContext	signature:()
parser.TypeLitContext.SliceType	parser/golang_parser.go	/^func (s *TypeLitContext) SliceType() ISliceTypeContext {$/;"	f	struct:parser.TypeLitContext	typeref:typename:ISliceTypeContext	signature:()
parser.TypeLitContext.StructType	parser/golang_parser.go	/^func (s *TypeLitContext) StructType() IStructTypeContext {$/;"	f	struct:parser.TypeLitContext	typeref:typename:IStructTypeContext	signature:()
parser.TypeLitContext.ToStringTree	parser/golang_parser.go	/^func (s *TypeLitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.TypeLitContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.TypeLitContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.TypeLitContext	typeref:typename:antlr.Parser
parser.TypeNameContext	parser/golang_parser.go	/^type TypeNameContext struct {$/;"	s	package:parser
parser.TypeNameContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.TypeNameContext	typeref:typename:*antlr.BaseParserRuleContext
parser.TypeNameContext.EnterRule	parser/golang_parser.go	/^func (s *TypeNameContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeNameContext	signature:(listener antlr.ParseTreeListener)
parser.TypeNameContext.ExitRule	parser/golang_parser.go	/^func (s *TypeNameContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeNameContext	signature:(listener antlr.ParseTreeListener)
parser.TypeNameContext.GetParser	parser/golang_parser.go	/^func (s *TypeNameContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.TypeNameContext	typeref:typename:antlr.Parser	signature:()
parser.TypeNameContext.GetRuleContext	parser/golang_parser.go	/^func (s *TypeNameContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.TypeNameContext	typeref:typename:antlr.RuleContext	signature:()
parser.TypeNameContext.IDENTIFIER	parser/golang_parser.go	/^func (s *TypeNameContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.TypeNameContext	typeref:typename:antlr.TerminalNode	signature:()
parser.TypeNameContext.IsTypeNameContext	parser/golang_parser.go	/^func (*TypeNameContext) IsTypeNameContext() {}$/;"	f	struct:parser.TypeNameContext	signature:()
parser.TypeNameContext.QualifiedIdent	parser/golang_parser.go	/^func (s *TypeNameContext) QualifiedIdent() IQualifiedIdentContext {$/;"	f	struct:parser.TypeNameContext	typeref:typename:IQualifiedIdentContext	signature:()
parser.TypeNameContext.ToStringTree	parser/golang_parser.go	/^func (s *TypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.TypeNameContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.TypeNameContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.TypeNameContext	typeref:typename:antlr.Parser
parser.TypeSpecContext	parser/golang_parser.go	/^type TypeSpecContext struct {$/;"	s	package:parser
parser.TypeSpecContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.TypeSpecContext	typeref:typename:*antlr.BaseParserRuleContext
parser.TypeSpecContext.EnterRule	parser/golang_parser.go	/^func (s *TypeSpecContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeSpecContext	signature:(listener antlr.ParseTreeListener)
parser.TypeSpecContext.ExitRule	parser/golang_parser.go	/^func (s *TypeSpecContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeSpecContext	signature:(listener antlr.ParseTreeListener)
parser.TypeSpecContext.GetParser	parser/golang_parser.go	/^func (s *TypeSpecContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.TypeSpecContext	typeref:typename:antlr.Parser	signature:()
parser.TypeSpecContext.GetRuleContext	parser/golang_parser.go	/^func (s *TypeSpecContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.TypeSpecContext	typeref:typename:antlr.RuleContext	signature:()
parser.TypeSpecContext.IDENTIFIER	parser/golang_parser.go	/^func (s *TypeSpecContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.TypeSpecContext	typeref:typename:antlr.TerminalNode	signature:()
parser.TypeSpecContext.IsTypeSpecContext	parser/golang_parser.go	/^func (*TypeSpecContext) IsTypeSpecContext() {}$/;"	f	struct:parser.TypeSpecContext	signature:()
parser.TypeSpecContext.ToStringTree	parser/golang_parser.go	/^func (s *TypeSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.TypeSpecContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.TypeSpecContext.Type_	parser/golang_parser.go	/^func (s *TypeSpecContext) Type_() IType_Context {$/;"	f	struct:parser.TypeSpecContext	typeref:typename:IType_Context	signature:()
parser.TypeSpecContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.TypeSpecContext	typeref:typename:antlr.Parser
parser.TypeSwitchCaseContext	parser/golang_parser.go	/^type TypeSwitchCaseContext struct {$/;"	s	package:parser
parser.TypeSwitchCaseContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.TypeSwitchCaseContext	typeref:typename:*antlr.BaseParserRuleContext
parser.TypeSwitchCaseContext.Case	parser/golang_parser.go	/^func (s *TypeSwitchCaseContext) Case() antlr.TerminalNode {$/;"	f	struct:parser.TypeSwitchCaseContext	typeref:typename:antlr.TerminalNode	signature:()
parser.TypeSwitchCaseContext.Default	parser/golang_parser.go	/^func (s *TypeSwitchCaseContext) Default() antlr.TerminalNode {$/;"	f	struct:parser.TypeSwitchCaseContext	typeref:typename:antlr.TerminalNode	signature:()
parser.TypeSwitchCaseContext.EnterRule	parser/golang_parser.go	/^func (s *TypeSwitchCaseContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeSwitchCaseContext	signature:(listener antlr.ParseTreeListener)
parser.TypeSwitchCaseContext.ExitRule	parser/golang_parser.go	/^func (s *TypeSwitchCaseContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeSwitchCaseContext	signature:(listener antlr.ParseTreeListener)
parser.TypeSwitchCaseContext.GetParser	parser/golang_parser.go	/^func (s *TypeSwitchCaseContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.TypeSwitchCaseContext	typeref:typename:antlr.Parser	signature:()
parser.TypeSwitchCaseContext.GetRuleContext	parser/golang_parser.go	/^func (s *TypeSwitchCaseContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.TypeSwitchCaseContext	typeref:typename:antlr.RuleContext	signature:()
parser.TypeSwitchCaseContext.IsTypeSwitchCaseContext	parser/golang_parser.go	/^func (*TypeSwitchCaseContext) IsTypeSwitchCaseContext() {}$/;"	f	struct:parser.TypeSwitchCaseContext	signature:()
parser.TypeSwitchCaseContext.ToStringTree	parser/golang_parser.go	/^func (s *TypeSwitchCaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string /;"	f	struct:parser.TypeSwitchCaseContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.TypeSwitchCaseContext.TypeList	parser/golang_parser.go	/^func (s *TypeSwitchCaseContext) TypeList() ITypeListContext {$/;"	f	struct:parser.TypeSwitchCaseContext	typeref:typename:ITypeListContext	signature:()
parser.TypeSwitchCaseContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.TypeSwitchCaseContext	typeref:typename:antlr.Parser
parser.TypeSwitchGuardContext	parser/golang_parser.go	/^type TypeSwitchGuardContext struct {$/;"	s	package:parser
parser.TypeSwitchGuardContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.TypeSwitchGuardContext	typeref:typename:*antlr.BaseParserRuleContext
parser.TypeSwitchGuardContext.EnterRule	parser/golang_parser.go	/^func (s *TypeSwitchGuardContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeSwitchGuardContext	signature:(listener antlr.ParseTreeListener)
parser.TypeSwitchGuardContext.ExitRule	parser/golang_parser.go	/^func (s *TypeSwitchGuardContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeSwitchGuardContext	signature:(listener antlr.ParseTreeListener)
parser.TypeSwitchGuardContext.GetParser	parser/golang_parser.go	/^func (s *TypeSwitchGuardContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.TypeSwitchGuardContext	typeref:typename:antlr.Parser	signature:()
parser.TypeSwitchGuardContext.GetRuleContext	parser/golang_parser.go	/^func (s *TypeSwitchGuardContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.TypeSwitchGuardContext	typeref:typename:antlr.RuleContext	signature:()
parser.TypeSwitchGuardContext.IDENTIFIER	parser/golang_parser.go	/^func (s *TypeSwitchGuardContext) IDENTIFIER() antlr.TerminalNode {$/;"	f	struct:parser.TypeSwitchGuardContext	typeref:typename:antlr.TerminalNode	signature:()
parser.TypeSwitchGuardContext.IsTypeSwitchGuardContext	parser/golang_parser.go	/^func (*TypeSwitchGuardContext) IsTypeSwitchGuardContext() {}$/;"	f	struct:parser.TypeSwitchGuardContext	signature:()
parser.TypeSwitchGuardContext.PrimaryExpr	parser/golang_parser.go	/^func (s *TypeSwitchGuardContext) PrimaryExpr() IPrimaryExprContext {$/;"	f	struct:parser.TypeSwitchGuardContext	typeref:typename:IPrimaryExprContext	signature:()
parser.TypeSwitchGuardContext.ToStringTree	parser/golang_parser.go	/^func (s *TypeSwitchGuardContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string/;"	f	struct:parser.TypeSwitchGuardContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.TypeSwitchGuardContext.Type	parser/golang_parser.go	/^func (s *TypeSwitchGuardContext) Type() antlr.TerminalNode {$/;"	f	struct:parser.TypeSwitchGuardContext	typeref:typename:antlr.TerminalNode	signature:()
parser.TypeSwitchGuardContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.TypeSwitchGuardContext	typeref:typename:antlr.Parser
parser.TypeSwitchStmtContext	parser/golang_parser.go	/^type TypeSwitchStmtContext struct {$/;"	s	package:parser
parser.TypeSwitchStmtContext.AllTypeCaseClause	parser/golang_parser.go	/^func (s *TypeSwitchStmtContext) AllTypeCaseClause() []ITypeCaseClauseContext {$/;"	f	struct:parser.TypeSwitchStmtContext	typeref:typename:[]ITypeCaseClauseContext	signature:()
parser.TypeSwitchStmtContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.TypeSwitchStmtContext	typeref:typename:*antlr.BaseParserRuleContext
parser.TypeSwitchStmtContext.EnterRule	parser/golang_parser.go	/^func (s *TypeSwitchStmtContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeSwitchStmtContext	signature:(listener antlr.ParseTreeListener)
parser.TypeSwitchStmtContext.ExitRule	parser/golang_parser.go	/^func (s *TypeSwitchStmtContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.TypeSwitchStmtContext	signature:(listener antlr.ParseTreeListener)
parser.TypeSwitchStmtContext.GetParser	parser/golang_parser.go	/^func (s *TypeSwitchStmtContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.TypeSwitchStmtContext	typeref:typename:antlr.Parser	signature:()
parser.TypeSwitchStmtContext.GetRuleContext	parser/golang_parser.go	/^func (s *TypeSwitchStmtContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.TypeSwitchStmtContext	typeref:typename:antlr.RuleContext	signature:()
parser.TypeSwitchStmtContext.IsTypeSwitchStmtContext	parser/golang_parser.go	/^func (*TypeSwitchStmtContext) IsTypeSwitchStmtContext() {}$/;"	f	struct:parser.TypeSwitchStmtContext	signature:()
parser.TypeSwitchStmtContext.SimpleStmt	parser/golang_parser.go	/^func (s *TypeSwitchStmtContext) SimpleStmt() ISimpleStmtContext {$/;"	f	struct:parser.TypeSwitchStmtContext	typeref:typename:ISimpleStmtContext	signature:()
parser.TypeSwitchStmtContext.Switch	parser/golang_parser.go	/^func (s *TypeSwitchStmtContext) Switch() antlr.TerminalNode {$/;"	f	struct:parser.TypeSwitchStmtContext	typeref:typename:antlr.TerminalNode	signature:()
parser.TypeSwitchStmtContext.ToStringTree	parser/golang_parser.go	/^func (s *TypeSwitchStmtContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string /;"	f	struct:parser.TypeSwitchStmtContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.TypeSwitchStmtContext.TypeCaseClause	parser/golang_parser.go	/^func (s *TypeSwitchStmtContext) TypeCaseClause(i int) ITypeCaseClauseContext {$/;"	f	struct:parser.TypeSwitchStmtContext	typeref:typename:ITypeCaseClauseContext	signature:(i int)
parser.TypeSwitchStmtContext.TypeSwitchGuard	parser/golang_parser.go	/^func (s *TypeSwitchStmtContext) TypeSwitchGuard() ITypeSwitchGuardContext {$/;"	f	struct:parser.TypeSwitchStmtContext	typeref:typename:ITypeSwitchGuardContext	signature:()
parser.TypeSwitchStmtContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.TypeSwitchStmtContext	typeref:typename:antlr.Parser
parser.Type_Context	parser/golang_parser.go	/^type Type_Context struct {$/;"	s	package:parser
parser.Type_Context.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.Type_Context	typeref:typename:*antlr.BaseParserRuleContext
parser.Type_Context.EnterRule	parser/golang_parser.go	/^func (s *Type_Context) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.Type_Context	signature:(listener antlr.ParseTreeListener)
parser.Type_Context.ExitRule	parser/golang_parser.go	/^func (s *Type_Context) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.Type_Context	signature:(listener antlr.ParseTreeListener)
parser.Type_Context.GetParser	parser/golang_parser.go	/^func (s *Type_Context) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.Type_Context	typeref:typename:antlr.Parser	signature:()
parser.Type_Context.GetRuleContext	parser/golang_parser.go	/^func (s *Type_Context) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.Type_Context	typeref:typename:antlr.RuleContext	signature:()
parser.Type_Context.IsType_Context	parser/golang_parser.go	/^func (*Type_Context) IsType_Context() {}$/;"	f	struct:parser.Type_Context	signature:()
parser.Type_Context.ToStringTree	parser/golang_parser.go	/^func (s *Type_Context) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.Type_Context	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.Type_Context.TypeLit	parser/golang_parser.go	/^func (s *Type_Context) TypeLit() ITypeLitContext {$/;"	f	struct:parser.Type_Context	typeref:typename:ITypeLitContext	signature:()
parser.Type_Context.TypeName	parser/golang_parser.go	/^func (s *Type_Context) TypeName() ITypeNameContext {$/;"	f	struct:parser.Type_Context	typeref:typename:ITypeNameContext	signature:()
parser.Type_Context.Type_	parser/golang_parser.go	/^func (s *Type_Context) Type_() IType_Context {$/;"	f	struct:parser.Type_Context	typeref:typename:IType_Context	signature:()
parser.Type_Context.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.Type_Context	typeref:typename:antlr.Parser
parser.UnaryExprContext	parser/golang_parser.go	/^type UnaryExprContext struct {$/;"	s	package:parser
parser.UnaryExprContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.UnaryExprContext	typeref:typename:*antlr.BaseParserRuleContext
parser.UnaryExprContext.BitAnd	parser/golang_parser.go	/^func (s *UnaryExprContext) BitAnd() antlr.TerminalNode {$/;"	f	struct:parser.UnaryExprContext	typeref:typename:antlr.TerminalNode	signature:()
parser.UnaryExprContext.BitXor	parser/golang_parser.go	/^func (s *UnaryExprContext) BitXor() antlr.TerminalNode {$/;"	f	struct:parser.UnaryExprContext	typeref:typename:antlr.TerminalNode	signature:()
parser.UnaryExprContext.ChanOp	parser/golang_parser.go	/^func (s *UnaryExprContext) ChanOp() antlr.TerminalNode {$/;"	f	struct:parser.UnaryExprContext	typeref:typename:antlr.TerminalNode	signature:()
parser.UnaryExprContext.EnterRule	parser/golang_parser.go	/^func (s *UnaryExprContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.UnaryExprContext	signature:(listener antlr.ParseTreeListener)
parser.UnaryExprContext.ExitRule	parser/golang_parser.go	/^func (s *UnaryExprContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.UnaryExprContext	signature:(listener antlr.ParseTreeListener)
parser.UnaryExprContext.GetParser	parser/golang_parser.go	/^func (s *UnaryExprContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.UnaryExprContext	typeref:typename:antlr.Parser	signature:()
parser.UnaryExprContext.GetRuleContext	parser/golang_parser.go	/^func (s *UnaryExprContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.UnaryExprContext	typeref:typename:antlr.RuleContext	signature:()
parser.UnaryExprContext.IsUnaryExprContext	parser/golang_parser.go	/^func (*UnaryExprContext) IsUnaryExprContext() {}$/;"	f	struct:parser.UnaryExprContext	signature:()
parser.UnaryExprContext.Minus	parser/golang_parser.go	/^func (s *UnaryExprContext) Minus() antlr.TerminalNode {$/;"	f	struct:parser.UnaryExprContext	typeref:typename:antlr.TerminalNode	signature:()
parser.UnaryExprContext.Multiply	parser/golang_parser.go	/^func (s *UnaryExprContext) Multiply() antlr.TerminalNode {$/;"	f	struct:parser.UnaryExprContext	typeref:typename:antlr.TerminalNode	signature:()
parser.UnaryExprContext.Not	parser/golang_parser.go	/^func (s *UnaryExprContext) Not() antlr.TerminalNode {$/;"	f	struct:parser.UnaryExprContext	typeref:typename:antlr.TerminalNode	signature:()
parser.UnaryExprContext.Plus	parser/golang_parser.go	/^func (s *UnaryExprContext) Plus() antlr.TerminalNode {$/;"	f	struct:parser.UnaryExprContext	typeref:typename:antlr.TerminalNode	signature:()
parser.UnaryExprContext.PrimaryExpr	parser/golang_parser.go	/^func (s *UnaryExprContext) PrimaryExpr() IPrimaryExprContext {$/;"	f	struct:parser.UnaryExprContext	typeref:typename:IPrimaryExprContext	signature:()
parser.UnaryExprContext.ToStringTree	parser/golang_parser.go	/^func (s *UnaryExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.UnaryExprContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.UnaryExprContext.UnaryExpr	parser/golang_parser.go	/^func (s *UnaryExprContext) UnaryExpr() IUnaryExprContext {$/;"	f	struct:parser.UnaryExprContext	typeref:typename:IUnaryExprContext	signature:()
parser.UnaryExprContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.UnaryExprContext	typeref:typename:antlr.Parser
parser.VarDeclContext	parser/golang_parser.go	/^type VarDeclContext struct {$/;"	s	package:parser
parser.VarDeclContext.AllEos	parser/golang_parser.go	/^func (s *VarDeclContext) AllEos() []IEosContext {$/;"	f	struct:parser.VarDeclContext	typeref:typename:[]IEosContext	signature:()
parser.VarDeclContext.AllVarSpec	parser/golang_parser.go	/^func (s *VarDeclContext) AllVarSpec() []IVarSpecContext {$/;"	f	struct:parser.VarDeclContext	typeref:typename:[]IVarSpecContext	signature:()
parser.VarDeclContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.VarDeclContext	typeref:typename:*antlr.BaseParserRuleContext
parser.VarDeclContext.EnterRule	parser/golang_parser.go	/^func (s *VarDeclContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.VarDeclContext	signature:(listener antlr.ParseTreeListener)
parser.VarDeclContext.Eos	parser/golang_parser.go	/^func (s *VarDeclContext) Eos(i int) IEosContext {$/;"	f	struct:parser.VarDeclContext	typeref:typename:IEosContext	signature:(i int)
parser.VarDeclContext.ExitRule	parser/golang_parser.go	/^func (s *VarDeclContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.VarDeclContext	signature:(listener antlr.ParseTreeListener)
parser.VarDeclContext.GetParser	parser/golang_parser.go	/^func (s *VarDeclContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.VarDeclContext	typeref:typename:antlr.Parser	signature:()
parser.VarDeclContext.GetRuleContext	parser/golang_parser.go	/^func (s *VarDeclContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.VarDeclContext	typeref:typename:antlr.RuleContext	signature:()
parser.VarDeclContext.IsVarDeclContext	parser/golang_parser.go	/^func (*VarDeclContext) IsVarDeclContext() {}$/;"	f	struct:parser.VarDeclContext	signature:()
parser.VarDeclContext.ToStringTree	parser/golang_parser.go	/^func (s *VarDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.VarDeclContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.VarDeclContext.Var	parser/golang_parser.go	/^func (s *VarDeclContext) Var() antlr.TerminalNode {$/;"	f	struct:parser.VarDeclContext	typeref:typename:antlr.TerminalNode	signature:()
parser.VarDeclContext.VarSpec	parser/golang_parser.go	/^func (s *VarDeclContext) VarSpec(i int) IVarSpecContext {$/;"	f	struct:parser.VarDeclContext	typeref:typename:IVarSpecContext	signature:(i int)
parser.VarDeclContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.VarDeclContext	typeref:typename:antlr.Parser
parser.VarSpecContext	parser/golang_parser.go	/^type VarSpecContext struct {$/;"	s	package:parser
parser.VarSpecContext.BaseParserRuleContext	parser/golang_parser.go	/^	*antlr.BaseParserRuleContext$/;"	M	struct:parser.VarSpecContext	typeref:typename:*antlr.BaseParserRuleContext
parser.VarSpecContext.EnterRule	parser/golang_parser.go	/^func (s *VarSpecContext) EnterRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.VarSpecContext	signature:(listener antlr.ParseTreeListener)
parser.VarSpecContext.ExitRule	parser/golang_parser.go	/^func (s *VarSpecContext) ExitRule(listener antlr.ParseTreeListener) {$/;"	f	struct:parser.VarSpecContext	signature:(listener antlr.ParseTreeListener)
parser.VarSpecContext.ExpressionList	parser/golang_parser.go	/^func (s *VarSpecContext) ExpressionList() IExpressionListContext {$/;"	f	struct:parser.VarSpecContext	typeref:typename:IExpressionListContext	signature:()
parser.VarSpecContext.GetParser	parser/golang_parser.go	/^func (s *VarSpecContext) GetParser() antlr.Parser { return s.parser }$/;"	f	struct:parser.VarSpecContext	typeref:typename:antlr.Parser	signature:()
parser.VarSpecContext.GetRuleContext	parser/golang_parser.go	/^func (s *VarSpecContext) GetRuleContext() antlr.RuleContext {$/;"	f	struct:parser.VarSpecContext	typeref:typename:antlr.RuleContext	signature:()
parser.VarSpecContext.IdentifierList	parser/golang_parser.go	/^func (s *VarSpecContext) IdentifierList() IIdentifierListContext {$/;"	f	struct:parser.VarSpecContext	typeref:typename:IIdentifierListContext	signature:()
parser.VarSpecContext.IsVarSpecContext	parser/golang_parser.go	/^func (*VarSpecContext) IsVarSpecContext() {}$/;"	f	struct:parser.VarSpecContext	signature:()
parser.VarSpecContext.ToStringTree	parser/golang_parser.go	/^func (s *VarSpecContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {$/;"	f	struct:parser.VarSpecContext	typeref:typename:string	signature:(ruleNames []string, recog antlr.Recognizer)
parser.VarSpecContext.Type_	parser/golang_parser.go	/^func (s *VarSpecContext) Type_() IType_Context {$/;"	f	struct:parser.VarSpecContext	typeref:typename:IType_Context	signature:()
parser.VarSpecContext.parser	parser/golang_parser.go	/^	parser antlr.Parser$/;"	m	struct:parser.VarSpecContext	typeref:typename:antlr.Parser
parser.decisionToDFA	parser/golang_parser.go	/^var decisionToDFA = make([]*antlr.DFA, len(deserializedATN.DecisionToState))$/;"	v	package:parser
parser.deserializedATN	parser/golang_parser.go	/^var deserializedATN = deserializer.DeserializeFromUInt16(parserATN)$/;"	v	package:parser
parser.deserializer	parser/golang_parser.go	/^var deserializer = antlr.NewATNDeserializer(nil)$/;"	v	package:parser
parser.init	parser/golang_lexer.go	/^func init() {$/;"	f	package:parser	signature:()
parser.init	parser/golang_parser.go	/^func init() {$/;"	f	package:parser	signature:()
parser.lexerAtn	parser/golang_lexer.go	/^var lexerAtn = lexerDeserializer.DeserializeFromUInt16(serializedLexerAtn)$/;"	v	package:parser
parser.lexerChannelNames	parser/golang_lexer.go	/^var lexerChannelNames = []string{$/;"	v	package:parser
parser.lexerDecisionToDFA	parser/golang_lexer.go	/^var lexerDecisionToDFA = make([]*antlr.DFA, len(lexerAtn.DecisionToState))$/;"	v	package:parser
parser.lexerDeserializer	parser/golang_lexer.go	/^var lexerDeserializer = antlr.NewATNDeserializer(nil)$/;"	v	package:parser
parser.lexerLiteralNames	parser/golang_lexer.go	/^var lexerLiteralNames = []string{$/;"	v	package:parser
parser.lexerModeNames	parser/golang_lexer.go	/^var lexerModeNames = []string{$/;"	v	package:parser
parser.lexerRuleNames	parser/golang_lexer.go	/^var lexerRuleNames = []string{$/;"	v	package:parser
parser.lexerSymbolicNames	parser/golang_lexer.go	/^var lexerSymbolicNames = []string{$/;"	v	package:parser
parser.literalNames	parser/golang_parser.go	/^var literalNames = []string{$/;"	v	package:parser
parser.parserATN	parser/golang_parser.go	/^var parserATN = []uint16{$/;"	v	package:parser
parser.ruleNames	parser/golang_parser.go	/^var ruleNames = []string{$/;"	v	package:parser
parser.serializedLexerAtn	parser/golang_lexer.go	/^var serializedLexerAtn = []uint16{$/;"	v	package:parser
parser.symbolicNames	parser/golang_parser.go	/^var symbolicNames = []string{$/;"	v	package:parser
parserATN	parser/golang_parser.go	/^var parserATN = []uint16{$/;"	v	package:parser
primaryExpr	parser/golang_parser.go	/^func (p *GolangParser) primaryExpr(_p int) (localctx IPrimaryExprContext) {$/;"	f	struct:parser.GolangParser	typeref:typename:(localctx IPrimaryExprContext)	signature:(_p int)
ruleNames	parser/golang_parser.go	/^var ruleNames = []string{$/;"	v	package:parser
serializedLexerAtn	parser/golang_lexer.go	/^var serializedLexerAtn = []uint16{$/;"	v	package:parser
symbolicNames	parser/golang_parser.go	/^var symbolicNames = []string{$/;"	v	package:parser
