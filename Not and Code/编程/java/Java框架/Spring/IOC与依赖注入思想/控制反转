在软件工程的面向对象方法学中,我们使用对象来模拟程序的行为,一切事务皆为对象,这样更加符合人类的思维
对象总是主动的,它主动地去获取外部的资源,比如我们在写代码时,类A需要依赖类B,那么类A的代码内部就要主动
地 new 一个B,这样代码的耦合性很强,假如有一天不再需要B了,而是需要B的升级版C,那么很多代码都要重写

对于控制反转,所谓控制,就是 Spring 的IOC容器 控制了这些对象
所谓反转,即是打破这种对象主动去创建,去获取外部对象,或者外部资源的行为,反其道而行之,对象要获取外部的对象
必须由 IOC 容器去构建对象,然后以参数的形式注入(比如 set方法,或者在构造函数中传参)到指定对象中,而不是在对
象内部主动用 new 去创建对象,如此一来所有对象都只能被动地受 IOC 容器控制,我们只要通过 xml 文件说明对象间
的关系,然后 IOC 容器就会根据 xml 文件去构建这些对象

依赖注入,是控制反转的一种实现方式

为了实现反转，Spring中有专门的Ioc容器对象(比如 BeanFactory 类)来控制反转的进行，
即Spring的IoC容器即是控制的主体，BeanFactory 类提供了容器最基本的功能，而ApplicationContext类则
是对BeanFactory 类的拓展，增加了更多支持企业级功能支持 

IOC容器做的事情: 假设我们有一个主类(设为类A),这个主类的创建还依赖于另一个子类(设为类B)
1.为我们创建用户类 (类A)
2.看主类是否有依赖对象注入 (如上面类A需要用到的类B)
  若有主类需要注入，则先创建这个主类来依赖的对象(B类的实例)，然后再注入到这个主类(类A)中
3.IOC容器会管理这些对象的生命周期
4.我们可以在XML配置文件中说明每个类内部的属性应该是什么，比如它的成员变量要如何初始化，构造函数要传递
哪些值，这些可以以XML的形式进行说明，Spring容器会根据这些配置自动生成代码来创建类，而不用我们手写代码


我们让IOC容器自己去创建我们需要的类，我们可以通过配置 XML，在XML中说明我们需要的类的各种属性以及与其它
类之间的关联，我们不用自己再手写代码去创建类，而是让IOC容器就会根据配置去创建类，然后我们把这个创建好的类
拿来用即可。
