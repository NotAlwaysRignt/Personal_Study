/*#include<stdio.h>
#ifndef _CONSTPRACTICE_H
#define _CONSTPRACTICE_H
#endif

class MyClass
{
static const int stanum;
public:
	const int Confunc()  const;
	int func();
	void print();
private:
	static const int m_connum;//可以在类中声明时初始化，也可以先声明，然后在函数中初始化
													//对于静态常成员，如果在类中只是声明，那么可以在c文件中全局处初始化
													//当类中只是声明未赋值时，还可以在函数中初始化常成员（常函数和常）	
	int m_num;

};
/*
总结常函数的特性：常对象只能调用常函数，常函数无法改变任何成员变量（其实对于只是在类中声明的静态常成员变量，在全局
处给静态常成员变量定义值后，常函数是可以改变其值的，但这样就失去了常函数的意义，所以不建议在常函数修改任何成员变量的值）
普通对象既可以调用常成员函数，也可以调用普通函数

总结类中的静态常成员变量的使用，对于静态常成员，可以在声明时初始化，也可以先声明，在类外（.cpp文件）中初始化
当在声明时未初始化时，一定要在全局处将其初始化，否则在函数中将无法将其初始化（也就是说，当在全局处给静态常成员变量初始化后，
在函数中可以改变其值）
建议用法：
1.在声明时直接初始化（有的编译器不支持，如果编译器支持最好就这样）
2.先声明，后在cpp文件中全局定义
3.注意：若采用2，那么后续在函数（包括常函数和普通函数）中也可以给静态常成员变量赋值改变其值，但不建议这么做
因为这样做就失去了const的定义，所以，建议只用1和2两种方式
*/
*/