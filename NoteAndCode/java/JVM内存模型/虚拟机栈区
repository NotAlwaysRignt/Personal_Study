虚拟机栈区:

    也可直接称为栈区,就是一个栈的数据结构,栈里的每一个元素称为栈帧,每开启一个线程就push进一个栈帧
到栈顶,当线程结束时就pop掉栈帧.栈帧里存储着这个线程的使用到的基本数据类型,对象的引用(注意是引用而不是
整个对象)以及函数的返回地址

虚拟机栈分为两种:栈和本地方法栈

栈:
    每创建一个线程,就会有一个新的栈帧入栈,栈帧中存放着函数的参数,局部变量表(包括各种编译器可知的基本数据
类型,以及对象的引用,注意是引用,以及返回地址等信息)


本地方法栈:
    首先明确本地方法的概念,本地方法(Native Method),就是一个java调用非java代码的接口,该方法的实现由
非java语言实现，比如C。这个特征并非java所特有，很多其它的编程语言都有这一机制，比如在C＋＋中，你可以
用extern "C"告知C＋＋编译器去调用一个C的函数。
    "A native method is a Java method whose implementation is provided by non-java code."
    
      在定义一个native method时，并不提供实现体（有些像定义一个java interface），因为其实现体是由非java语言在外面实现的。，下面给了一个示例：   
    public class IHaveNatives
    {
      native public void Native1( int x ) ;
      native static public long Native2() ;
      native synchronized private float Native3( Object o ) ;
      native void Native4( int[] ary ) throws Exception ;
    }
    这些方法的声明描述了一些非java代码在这些java代码里看起来像什么样子（view）
    一个native method方法可以返回任何java类型，包括非基本类型
    
    为什么要使用Native Method
   java使用起来非常方便，然而有些层次的任务用java实现起来不容易，或者我们对程序的效率很在意时，问题就
来了。本地方法可以使我们和去其它语言所写的程序交互,最常见的就是C语言.
    jre大部分是用java实现的，它也通过一些本地方法与外界交互。例如：类java.lang.Thread 的 
setPriority()方法是用java实现的，但是它实现调用的是该类里的本地方法setPriority0()。这个本地方法
是用C实现的，并被植入JVM内部
