前置知识 类的装载,连接以及初始化

Class cls1 = Class.forName("xxx.xxx.xxx");
Class cls2 = getClassLoader().loadClass("xxx.xxx.xxx");

都可以获取都类的相关 信息
    一般情况下，这两个方法效果一样，都能装载Class。
    Class.forName(className)装载的class已经被初始化，而ClassLoader.loadClass(className)装载的
class还没有被初始化。 但如果程序依赖于Class是否被初始化，就必须用Class.forName(name)了。

从这个角度看 loadClass 是比 forName 更底层的操作,因为它只完成了 forName 一部分的功能

Class cls1 = Class.forName("xx.xx")
等同于Class.forName("xx.xx",true,CALLClass.class.getClassLoader())，
第二个参数(bool)表示装载类的时候是否初始化该类，即调用类的静态块的语句及初始化静态成员变量。


Class cls2 = loader.loadClass("xx.xx"); //这句话没有执行初始化，其实与Class.forName("xx.xx"，
false，loader)是一致的，只是loader.loadClass("xx.xx")执行的是更底层的操作。

只有执行cls2.NewInstance()才能够初始化类，然后得到该类的一个实例(对象)


举例 需要装载并且初始化的情景:
在JDBC编程中，常看到这样的用法，Class.forName("com.mysql.jdbc.Driver")，如果换成了 
getClass().getClassLoader().loadClass("com.mysql.jdbc.Driver")，就不行。
为什么呢？打开com.mysql.jdbc.Driver的源代码看看，
//
// Register ourselves with the DriverManager
//
static {
    try {
        java.sql.DriverManager.registerDriver(new Driver());
    } catch (SQLException E) {
        throw new RuntimeException("Can't register driver!");
    }
}
原来，Driver在static块中会注册自己到java.sql.DriverManager。而static块就是在Class的初始化中被执行。
所以这个地方就只能用Class.forName(className)。
