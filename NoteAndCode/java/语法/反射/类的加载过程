```java

类的实例化需要 三个阶段 类的加载,链接,初始化

加载是指虚拟机加载 .class文件 并创建对应的Class对象 (注意是Class类的对象,而不是这个类的对象),读入JVM
内存的过程


Class对象是什么: 
每个类在被加载后都有一个 Class对象,这个Class对象封装了这个类的相关信息,比如 Class对象
可以调用 getName() 获得该类型的全称名称,比如一个 MyDAO 类的Class对象调用 MyDAO.class.getName()
将得到 "MyDAO"(string类型). 再如 isInterface,判断该类是否为接口类型.还有很多函数可以用于获取该类的
相关信息. 要注意 Class 类获取的不是具体对象的相关信息,不管一个类创建了多少对象,调用这些对象的getClass()
方法获得的 Class 对象都是相同的

看看Class对象的使用例子:

 
import java.lang.reflect.Method;
public class MyDAO
{
    void method1(){}
    void method2(){}
    public static void main(String[] args)
    {
        Class a = MyDAO.class;  // a即为 MyDAO 的 Class对象
        System.out.println(a.getName());
        System.out.println("************");
        
        Method[] methods = a.getDeclaredMethods();  //通过Class对象获取 MyDAO 类的所有成员函数
        for(Method m:methods){
            System.out.println(m.getName());
        }
    }
}

结果:
MyDAO
************
method1
method2
main


Class对象的获取:
类的加载由 类加载器 完成,类加载器有三种,这里不展开讲
启动类加载器，由C++实现，没有父类。
拓展类加载器(ExtClassLoader)，由Java语言实现，父类加载器为null
系统类加载器(AppClassLoader)，由Java语言实现，父类加载器为ExtClassLoader

我们在编写Java代码时是可以获得类加载器的,使用的是 getClassLoader() 方法
每个类都有一个Class 对象,要获得 Class 对象,则可以用
this.getClass().getClassLoader().loadClass() 获得

```
