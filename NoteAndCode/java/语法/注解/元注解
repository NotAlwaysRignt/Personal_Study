作用:就是负责注解其他注解 (其他注解通常指自定义注解)。

Java5.0定义的元注解：
　　　　1.@Target,
　　　　2.@Retention,
　　　　3.@Documented,
　　　　4.@Inherited
　　　　
@Target说明了注解所修饰的对象范围,即被描述的注解可以用在什么地方
取值(ElementType)有：

　　　　1.CONSTRUCTOR:用于描述构造器
　　　　2.FIELD:用于描述域
　　　　3.LOCAL_VARIABLE:用于描述局部变量
　　　　4.METHOD:用于描述方法
　　　　5.PACKAGE:用于描述包
　　　　6.PARAMETER:用于描述参数
　　　　7.TYPE:用于描述类、接口(包括注解类型) 或enum声明

举例:
@Target(ElementType.TYPE)
public @interface MyAnnotation {
  public String name();
  public String value();
}

由"@Target(ElementType.TYPE)"得,这个注解可以用来注解类,也可以用来注解方法
类注解　　　　
@MyAnnotation(name="someName",  value = "Hello World")
public class TheClass {
}　　　　

方法注解
public class TheClass {
  @MyAnnotation(name="someName",  value = "Hello World")
  public void doSomething(){}
}



@Retention定义了该Annotation被保留的时间长短,某些Annotation仅出现在源代码中，而被编译器丢弃；而另一些
却被编译在class文件中；编译在class文件中的Annotation可能会被虚拟机忽略，而另一些在class被装载时将被读取
(请注意并不影响class的执行，因为Annotation与class在使用上是被分离的）

取值（RetentionPoicy）有：

　　　　1.SOURCE:在源文件中有效（即源文件保留）
　　　　2.CLASS:在class文件中有效（即class保留）
　　　　3.RUNTIME:在运行时有效（即运行时保留）
　　　　
　　　　
@Documented指明拥有这个注解的元素可以被javadoc此类的工具文档化。
它是一个标记注解，没有成员(即使用时只有@Documented这种形式,后不跟参数)

@Inherited：说明子类可以继承父类中的该注解,比如用@Inherited修饰了一个自定义的注解,然后我们用这个自定义
注解去注解一个类A,如果类B继承了类A,那类B也将继承这个自定义注解
