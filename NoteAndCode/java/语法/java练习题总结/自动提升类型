基础类型在进行计算(+ - * /二元运算符)时，其中间结果可能超出本类型所表示的范围（也就是溢出）。
为防止这种情况的发生，在Java中基础类型的计算会先进行类型提升
类型提升的例外:
1.数据类型为final时,不会进行类型提升,但参与运算后若另一个变量可作类型提升,则计算结果也会做做类型提升
2.使用自加,自减+= -=,*= 时不会提升类型
byte a;
a+=2; //不会类型提升

典型例题:

byte b1=1,b2=2,b3,b6,b8;
final byte b4=4,b5=6,b7;
b3=(b1+b2);  /*语句1*/
b6=b4+b5;    /*语句2*/
b8=(b1+b4);  /*语句3*/
b7=(b2+b5);  /*语句4*/

存在编译错误的是 语句 1 3 4

语句1: b3为byte 而b1+b2 后会提升为int
语句2: b4,b5 由final修饰,不会进行类型提升,因此语句2正确
语句3: b4为final不会进行类型提升,但b1会,所以运算结果为int,b8为byte,不能接受int,错误
语句4: b7被final修饰,被final修饰的变量除了不能做类型提升外,还不能改变值
