

以mysql sakila示例数据库 作为例子:
explain SELECT film_id,description FROM film order by title limit 50,5 \G;
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: film
   partitions: NULL
         type: ALL
possible_keys: NULL
          key: NULL
      key_len: NULL
          ref: NULL
         rows: 1000
     filtered: 100.00
        Extra: Using filesort
1 row in set, 1 warning (0.00 sec)


要读取film_id 在 51到55,要扫描55行, type 为ALL 即使用了全表扫描

方法一
order by 的操作对象最好是索引,因此不要以title 为order by 的对象,而以主键film_id

explain SELECT film_id,description FROM film order by film_id limit 50,5 \G;
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: film
   partitions: NULL
         type: index
possible_keys: NULL
          key: PRIMARY
      key_len: 2
          ref: NULL
         rows: 55
     filtered: 100.00
        Extra: NULL
1 row in set, 1 warning (0.00 sec)

type 变为了 index,说明确实得到了优化

方法二
使用 limit 50,5 时要扫描55行,如果使用limit 300,5 那就要扫描305行
explain SELECT film_id,description FROM film order by film_id limit 300,5 \G;



*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: film
   partitions: NULL
         type: index
possible_keys: NULL
          key: PRIMARY
      key_len: 2
          ref: NULL
         rows: 305
     filtered: 100.00
        Extra: NULL
1 row in set, 1 warning (0.00 sec)

由此可看出 limit 是有局限性的,它必须遍历式地查找,如果我们知道 film_id的具体范围,最好改用where
这样扫描的行数将大大减少,当然前提是首先得知道主键的范围,且主键是连续增长的(才能保证是5个)
explain SELECT film_id,description FROM film where film_id>300 and film_id<=305 order by film_id \G;
*************************** 1. row ***************************
           id: 1
  select_type: SIMPLE
        table: film
   partitions: NULL
         type: range
possible_keys: PRIMARY
          key: PRIMARY
      key_len: 2
          ref: NULL
         rows: 5
     filtered: 100.00
        Extra: Using where
1 row in set, 1 warning (0.01 sec)

