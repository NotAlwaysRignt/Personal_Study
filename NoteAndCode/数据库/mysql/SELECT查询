SELECT 要查询的列名 FROM 表名字 WHERE 限制条件;

例子:
mysql> SELECT name,age FROM employee WHERE age>=26;
+------+------+
| name | age  |
+------+------+
| Tom  |   26 |
| Jim  |   35 |
| Alex |   26 |
| Ken  |   27 |
| Joe  |   31 |
+------+------+
5 rows in set (0.00 sec)

如果要显示全部
SELECT * FROM employee;

SELECT * FROM 列名 LIMIT m,n;
m是索引 0表示搜索到的第1条记录,n表示从m开始连续取n条记录

SELECT * FROM employee LIMIT 3;
等价于 SELECT * FROM employee LIMIT 0,3;  即取前三条记录

关于
WHERE

WHERE 是限制条件,我们在 WHERE 中有各种灵活的句法

1.在WHERE中使用 AND 和 OR

mysql> SELECT name,age FROM employee WHERE age>26 AND age<30;
+------+------+
| name | age  |
+------+------+
| Ken  |   27 |
+------+------+
1 row in set (0.00 sec)

2.IN 和 NOT IN  在某个范围内查找,注意范围应加括号

例: 查找工资为3000的员工的 id 和 name

mysql> SELECT id,name FROM employee WHERE salary IN (3000);
+----+------+
| id | name |
+----+------+
|  4 | Jim  |
|  5 | Mary |
|  6 | Alex |
+----+------+
3 rows in set (0.00 sec)

查找工资为 3000 和 3400 员工的 id 和 name
mysql> SELECT id,name FROM employee WHERE salary IN (3000,3400);


同样可以查找工资不为 3000 和 3400 的员工


通配符
字符串中'%'表示不定个字符 '_'表示一个字符,与LIKE 搭配

mysql> SELECT id,name FROM employee WHERE name LIKE 'To_';
+----+------+
| id | name |
+----+------+
|  1 | Tom  |
+----+------+
1 row in set (0.00 sec)

mysql> SELECT id,name FROM employee WHERE name LIKE "M%";
+----+------+
| id | name |
+----+------+
|  5 | Mary |
| 10 | Mike |
+----+------+
2 rows in set (0.00 sec)

3.对结果排序 ORDER BY 列名 (DESC或ASC或 不写)
ORDER BY 是对结果进行排序
DEC表示降序, ASC表升序,若未说明,默认采用升序(越往下越大)
默认为升序

注意 WHERE 和 ORDER BY 同时使用时, WHERE 应该在 ORDER BY 前面

mysql> SELECT name,age FROM employee WHERE salary IN (3000) ORDER BY age DESC;
+------+------+
| name | age  |
+------+------+
| Jim  |   35 |
| Alex |   26 |
| Mary |   21 |
+------+------+
3 rows in set (0.00 sec)



4.内置函数
sql 中 有5个内置函数,用于,选中列的值的计算
函数名： 	COUNT 	SUM 	AVG 	MAX 	MIN
作用： 	计数 	求和 	求平均值 	最大值 	最小值

例:
mysql> select MAX(salary) FROM employee;
+-------------+
| MAX(salary) |
+-------------+
|        3600 |
+-------------+
1 row in set (0.00 sec)





5. AS 给列重命名
SELECT 列 AS 自定义的列名

mysql> select name AS N from employee;
+------+
| N    |
+------+
| Tom  |
| Jack |
| Rose |
| Jim  |
| Mary |
| Alex |
| Ken  |
| Rick |
| Joe  |
| Mike |
| Jobs |
| Tony |
+------+

使用AS 后可以像调用类的实例一样操纵这张表的属性 
比如
SELCET * FROM employee AS e WHERE e.name="Tome"

SELECT *
FROM book as b INNER JOIN student as s
ON b.studentId=s.studentId;
表的内连接
