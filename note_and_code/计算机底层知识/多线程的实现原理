   不同的编程语言都支持使用多线程，但是事实上我们使用多线程的时候只是使用了编程语言给我们的api，
我们没办法了解多线程在计算机硬件的地方发生了什么。事实上，很多编程语言也不能让我们知道这些，因为
它们也是用了操作系统提供给它们的api，并封装起来给我们使用。要知道api，多线程在操作系统层面是怎么
实现的？

摘自：https://segmentfault.com/q/1010000004100707

多线程之所以能够实现，第一是硬件的功劳，也就是CPU。现代的CPU有一个很重要的特性，就是时间片。每一段获得CPU
的代码只能运行一个时间片规定的时间，例如10ms。到时间之后CPU就会把正在运行的代码暂停，然后发生一个中断。这
个中断是系统级的事件，只有操作系统能够接手，这样控制权就落到了操作系统手里。

接下来就是操作系统的事情了。线程对操作系统来说就是一段代码+运行时数据（主要是寄存器数据，还有线程中与资源相
关的数据，比如打开的文件等）。操作系统会为每个线程保存相关的这些数据，当接收到来自CPU的时间片中断事件时，
就会按一定规则从这些线程中选择一个，恢复它的运行时数据，这样CPU就可以继续执行这个线程了。

选择一个合适的线程的过程称为线程调度，最简单的规则是FCFS，也就是按排队的时间先后顺序调度，谁先来排队，下一
个就让谁运行。另外还有按优先级、按任务大小等调度策略，以及多种策略的组合等方式。详细的可以去了解一下操作系
统的原理。

Java中线程实现主要依赖于操作系统，其本身不进行线程管理。它只是把线程相关的操作进行了封装和抽象，以方便我们
使用。例如，Java中的线程可以设置优先级，但如果操作系统本身不支持优先级调度策略，那么为线程设置优先级是没有
任何作用的。
