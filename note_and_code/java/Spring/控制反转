控制反转，

首先什么是反转，反转对应的是正转，
传统Java SE程序设计中，对象A要使用对象B时，代码通常为实现对象A的内部中主动 new一个B对象，此称为正转
而所谓反转，即为我们不再从对象A中创建对象B，而是将B作为参数传给对象昂A，让对象A被动地接收创建的对象B

为了实现反转，Spring中有专门的Ioc容器对象(比如 BeanFactory 类)来控制反转的进行，
即Spring的IoC容器即是控制的主体，BeanFactory 类提供了容器最基本的功能，而ApplicationContext类则
是对BeanFactory 类的拓展，增加了更多支持企业级功能支持 

IOC容器做的事情: 假设我们有一个主类(设为类A),这个主类的创建还依赖于另一个子类(设为类B)
1.为我们创建用户类 (类A)
2.看主类是否有依赖对象注入 (如上面类A需要用到的类B)
  若有主类需要注入，则先创建这个主类来依赖的对象(B类的实例)，然后再注入到这个主类(类A)中
3.IOC容器会管理这些对象的生命周期
4.我们可以在XML配置文件中说明每个类内部的属性应该是什么，比如它的成员变量要如何初始化，构造函数要传递
哪些值，这些可以以XML的形式进行说明，Spring容器会根据这些配置自动生成代码来创建类，而不用我们手写代码


我们让IOC容器自己去创建我们需要的类，我们可以通过配置 XML，在XML中说明我们需要的类的各种属性以及与其它
类之间的关联，我们不用自己再手写代码去创建类，而是让IOC容器就会根据配置去创建类，然后我们把这个创建好的类
拿来用即可。
