数据库如何编程实现？ 可以参考practice/python/项目源码解读/DBDB源码解读

首先要明白，数据库中的数据最终存储在磁盘中，在代码实现上，最终还是会调用原生的api
如 python 的 open(),f.write() f.read()... C语言的 fread(), fwrite() , ftell()，fopen()...

数据的查增删改在内存中的速度会更快，所以我们从磁盘中读入数据时后把数据放入一个数据结构中，比如B-树

数据库既然是对fopen fwrite 等函数做了封装，那写入文件(存入磁盘)的时候就数据应该以一种特定的格式，
比如特定的编排，而不是简单的直接写入磁盘。

数据的序列化技术使得我们可以将文件中的对象序列化后存入磁盘中，然后在需要用到的时候再将其取出。有了这一
技术，我们把数据库中的键值对用B-树的节点封装，然后用序列化将这个节点内的信息(比如键和键值，下一个节点在文
件的位置，当前所有数据的总长度等)存入磁盘中，以后就能通过fseek(位置)，fread(数据长度)，
轻松地读取相应的节点并构建一棵B-树。

以上面提到的 DBDB 为例：
内存中的数据结构：
    假设我们用一个二叉树来存储键值对，二叉树的节点中 存储了 左右子树的引用对象，键，键值
引用对象中可以存储这个引用指向的节点在磁盘位置

如何将节点写入文件：
    存入一个节点内的所有数据时(左右子树在文件中的位置，key，value)，我们可以先存入这些数据转换为字节流后
的总长度，然后将这些数据序列化后写入文件，因为不同节点内数据占文件的空间可能不同，因此我们先将长度存入，
要读取时，先读取长度，就可以准确地读出所有的数据了。

如何从磁盘中读出数据在内存中构建一棵树：
   我们可以开辟一个文件，然后先开辟一个空间(比如用fwrite4096字节个数值0)，这个空间专用术语称为超级块，存
储这个文件的各种信息，比如在文件的最开头就可以存储根节点数据的位置，然后我们就可以用 fseek 来到文件的这个
位置，先读取根节点数据长度，然后再根据这个长度将整个根节点的相关信息读入，构建起树的第一个节点。
当我们要找到下一个节点时，我们可以从根节点中的数据得到左右子树节点在磁盘中的位置，然后又用 fseek到达相应
的节点，继续读入节点的数据到内存中并将它封装成节点放进树中，以此类推...
