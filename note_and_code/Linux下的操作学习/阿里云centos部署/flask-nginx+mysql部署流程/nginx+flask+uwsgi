nginx安装完成后,我们已经可以看到welcome页面,这里要注意,nginx一旦成功启动,之后我们在部署wsgi时应该
和nginx配合起来,因为我们在访问服务器时nginx会接管响应,可能会uwsgi没办法单独测试



先删除nginx默认配置文件    
sudo rm /etc/nginx/sites-enabled/default  (删除了它,界面才不会一直显示为Welcome)
(我的Centos7在安装成功nginx后没有这个sites-enabled文件夹,因此这一步不用操作)

为了测试我们的nginx到底有没有成功读入配置,进入配置文件夹
cd /etc/nginx/conf.d/
发现其下有一个default 文件
我们把default文件修改为自己的配置

server{
    listen 80;
    server_name localhost;
    charset utf-8;
    root /srv/www/;
    client_max_body_size 75M;
    location/{try_files @uri @yourapplication;}
    location @yourapplication{
        include uwsgi_params;
        uwsgi_pass unix:/srv/www/app_uwsgi.sock;
    }
}

然后在终端执行 nginx -s reload  可重新加载配置
注意 使用nginx -s reload时, 应确保nginx 已经启动,如果未启动
service nginx start

解释其中几个配置
root /srv/www/;  
根目录指向,载入这个配置后 服务器会在这个文件路径下找相应的文件,比如后面的 app_uwsgi.sock
nginx默认welcome页面index.html不在我自己的这个文件夹下,因此载入这个root配置后welcome也不会出现了

uwsgi_pass unix:/srv/www/app_uwsgi.sock  这个sock文件是uwsgi 和 nginx 交流的文件
正是通过这个文件实现了进程的通信

接下来是uwsgi的配置

使用scp 命令将python代码全部传输过去
scp -r docpath/* root@ ip地址 服务器文件路径

在虚拟环境下安装uwsgi
pip install uwsgi 

部署uwsgi:
在和 manage.py(这个py文件里创建了Flask实例app) 同级目录下 创建app_uwsgi.ini ,内容如下:

base = /srv/www

#下面两句等价于wsgi-file = manage.py
app=manage
module=%(app)

home = /root/file/python/venv_flask
python_path = /root/file/python/venv_flask

#socket file的位置
socket = /srv/www/%n.socket

socket file的权限
chmod-socket =666

#要导入的Flask实例的名字,即manage.py中Flask实例的变量名
callable=app

#日志记录的位置
logto = /srv/www/%n.log 

几点说明
1.在设置路径时不可以用相对路径"~",即不要用 ~/file/python/venv_flask

2.%n 会用当前ini的文件名字替换,如 app_uwsgi.ini ,则%n 为app_uwsgi
在启动后如果没有异常会显示

3.[uWSGI] getting INI configuration from demoapp_uwsgi.ini
并阻塞

4.我们在尝试访问服务器后可以暂时按 ctrl+c关闭uwsgi,并看log文件的记录
如果代码有语法错误,或者配置错误均会被记录在这个log文件中

5 在用浏览器访问服务器时,访问ip后,如果要重新访问按F5刷新,不要用 回车键,因为回车键访问到的很可能是
之前网页的缓存,这样服务器端变化后我们没办法知道(自己一直看见welcome网页,不管怎么设置都不会变,其实
是因为自己一直对ip按回车键访问服务器,其实并不是服务器的问题)

启动 uwsgi,注意启动uwsgi时要已经开启虚拟环境,这个虚拟环境安装了 uwsgi,且安装了我们要运行
python代码的所有以来模块
uwsgi --ini app_uwsgi.ini

显示[uWSGI] getting INI configuration from demoapp_uwsgi.ini并阻塞,说明没有严重错误
访问浏览器看是否正常工作,临时关闭uwsgi,看看log文件的记录

至此我们的flask+nginx就已经成功部署了
