先看一个简单的例子：
class Sample:
    def __enter__(self):
        print "In		（回车）
 __enter__()"
        return "Foo"
 
    def __exit__(self, type,
 value, trace):
        print "In
 __exit__()"
 
 
def get_sample():
    return Sample()


with
 get_sample() as sample:
    print "sample:",
 sample


结果：
bash-3.2$
 ./with_example01.py
In
 __enter__()
sample:
 Foo
In
 __exit__()

1. __enter__()方法被执行
2. __enter__()方法返回的值 - 这个例子中是"Foo"，赋值给变量'sample'
3. 执行代码块，打印变量"sample"的值为 "Foo"
4. __exit__()方法被调用

上面的例子帮我们认识with语句的流程。with真正强大之处是它可以处理异常。可能你已经注意到Sample类的__exit__方法有
三个参数- val, type 和 trace。 这些参数在异常处理中相当有用。我们来改一下代码，看看具体如何工作的。
class Sample:
    def __enter__(self):
        return self
 
    def __exit__(self, type,
 value, trace):
        print "type:", type
        print "value:",
 value
        print "trace:",
 trace
 
    def do_something(self):
        bar = 1/0
        return bar + 10

with
 Sample() as sample:
    sample.do_something()

结果
bash-3.2$
 ./with_example02.py
type:
 <type 'exceptions.ZeroDivisionError'>
value:
 integer division or modulo
 by zero
trace:						
 <traceback object at 0x1004a8128>
Traceback					#这里开始是系统抛出的错误，这里之前是执行__exit__方法()的结果
 (most recent call last):
  File "./with_example02.py",
 line 19, in <module>
    sample.do_something()
  File "./with_example02.py",
 line 15, in do_something
    bar = 1/0
ZeroDivisionError:
 integer division or modulo
 by zero

实际上，在with后面的代码块抛出任何异常时，__exit__()方法被执行。正如例子所示，异常抛出时，与之关联的type，
value和stack trace传给__exit__()方法，因此抛出的ZeroDivisionError异常被打印出来了。开发库时，清理资源，
关闭文件等等操作，都可以放在__exit__方法当中。
因此，Python的with语句是提供一个有效的机制，让代码更简练，同时在异常产生时，清理工作更简单。